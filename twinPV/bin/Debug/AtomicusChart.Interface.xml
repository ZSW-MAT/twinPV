<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AtomicusChart.Interface</name>
    </assembly>
    <members>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.AngleAxis2D">
            <summary>
            Contains parameters of a single 2D angle axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AngleAxis2D.MinorGridLinesColor">
            <summary>
            Gets or sets the axis minor grid lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AngleAxis2D.MinorGridLinesThickness">
            <summary>
            Gets or sets the axis minor grid lines thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AngleAxis2D.IsMinorGridLinesVisible">
            <summary>
            Gets or sets the axis minor grid lines visibility flag.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Axes2D.AngleAxis2D.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D">
            <summary>
            Contains settings used for chart 2D axes presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.CartesianSettings">
            <summary>
            Gets or sets chart 2D cartesian axes presentation settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.R">
            <summary>
            Gets or sets R (radius) axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.Phi">
            <summary>
            Gets or sets Phi axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.Theta">
            <summary>
            Gets or sets Theta axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.X">
            <summary>
            Gets or sets X axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.Y">
            <summary>
            Gets or sets Y axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.AxesSettings2D.Z">
            <summary>
            Gets or sets Z axis settings.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.Axis2D">
            <summary>
            Contains base presentation parameters of 2D axis.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DefaultMajorTickColor">
            <summary>
            Default value for MajorTickColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DefaultMajorTickSize">
            <summary>
            Default value for MajorTickSize.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DefaultMinorTickColor">
            <summary>
            Default value for MinorTickColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DefaultMinorTickSize">
            <summary>
            Default value for MinorTickSize .
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DefaultDesiredUnitsPerTick">
            <summary>
            Default value for DesiredUnitsPerTick.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.DesiredUnitsPerTick">
            <summary>
            Gets or sets desired units per pick value. This value is pesponsible for axis ticks intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MajorTickThickness">
            <summary>
            Gets of sets the axis major tick thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MajorTickSize">
            <summary>
            Gets of sets the axis major tick size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MajorTickColor">
            <summary>
            Gets of sets the axis major tick color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MinorTickThickness">
            <summary>
            Gets of sets the axis minor tick thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MinorTickSize">
            <summary>
            Gets of sets the axis minor tick size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.Axis2D.MinorTickColor">
            <summary>
            Gets of sets the axis minor tick color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.HorizontalAxis2DVisibilityFlags">
            <summary>
            Contains possible horizontal axis 2D visibility flags.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.HorizontalAxis2DVisibilityFlags.None">
            <summary>
            Axis is not visible.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.HorizontalAxis2DVisibilityFlags.Bottom">
            <summary>
            Axis is drawn in bottom location.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.HorizontalAxis2DVisibilityFlags.Top">
            <summary>
            Axis is drawn in top location.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.VerticalAxis2DVisibilityFlags">
            <summary>
            Contains possible horizontal axis 2D visibility flags.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.VerticalAxis2DVisibilityFlags.None">
            <summary>
            Axis is not visible.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.VerticalAxis2DVisibilityFlags.Left">
            <summary>
            Axis is drawn in left location.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.VerticalAxis2DVisibilityFlags.Right">
            <summary>
            Axis is drawn in right location.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.TickCalculatorDelegate">
            <summary>
            Delegate for tick calculation.
            </summary>
            <param name="description">Axis calculation description.</param>
            <param name="scale">Scales.</param>
            <param name="axisIndex">Index of axis.</param>
            <returns>Tick results.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings">
            <summary>
            Contains presentation settings of 2D cartesian axes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultHorizontalTitleOffset">
            <summary>
            Default value for HorizontalTitleOffset.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultVerticalTitleOffset">
            <summary>
            Default value for VerticalTitleOffset.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultMajorGridLinesThickness">
            <summary>
            Default value for MajorGridLinesThickness.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultMajorGridLinesColor">
            <summary>
            Default value for MajorGridLinesColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultMinorGridLinesColor">
            <summary>
            Default value for MinorGridLinesColor .
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultMargins">
            <summary>
            Default value for Margins.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultIsBorderVisible">
            <summary>
            Default value for IsBorderVisible.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.DefaultGridStripeColor">
            <summary>
            Default value for GridStripeColo.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.MinorGridLinesColor">
            <summary>
            Gets or sets minor grid lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.IsMinorGridLinesVisible">
            <summary>
            Gets or sets minor grid lines visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.IsMajorGridLinesVisible">
            <summary>
            Gets or sets major grid lines visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.MajorGridLinesColor">
            <summary>
            Gets or sets major grid lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.MajorGridLinesThickness">
            <summary>
            Gets or sets major grid line thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.HorizontalVisibilityFlags">
            <summary>
            Gets or sets the horizontal axis visibility flags.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.VerticalVisibilityFlags">
            <summary>
            Gets or sets the vertical axis visibility flags.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.HorizontalTitleOffset">
            <summary>
            Gets or sets horizontal title offset (in pixels).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.VerticalTitleOffset">
            <summary>
            Gets or sets vertical title offset (in pixels).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.IsGridStripeVisible">
            <summary>
            Gets or sets grid stripe visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.GridStripeColor">
            <summary>
            Gets or sets axes grid stride color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.Margins">
            <summary>
            Gets or sets axes margins values.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.IsBorderVisible">
            <summary>
            Gets or sets border visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.CartesianAxes2DSettings.CustomTickCalculator">
            <summary>
            Custom calculator of ticks.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.LineAxis2D">
            <summary>
            Contains settings of 2D line axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.LineAxis2D.CountMinorTicksOnSegment10">
            <summary>
            Gets or sets desired count of ticks that are visible on 10 segment.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.LineAxis2D.CountMinorTicksOnSegment5">
            <summary>
            Gets or sets desired count of ticks that are visible on 5 segment.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.LineAxis2D.CountMinorTicksOnSegment2">
            <summary>
            Gets or sets desired count of ticks that are visible on 2 segment.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.RadiusAxis2D">
            <summary>
            Contains 2D radius axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.RadiusAxis2D.MaxRadius">
            <summary>
            Gets or sets optional maximum radius.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.RadiusAxis2D.MaxRadiusColor">
            <summary>
            Gets or sets maximum radius color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions">
            <summary>
            Contains scale-bar options.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultSizeInPixels">
            <summary>
            Default value for SizeInPixels.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultTickLabelColor">
            <summary>
            Default value for TickLabelColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultTickLabelFont">
            <summary>
            Default value for TickLabelFont.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultThickness">
            <summary>
            Default value for Thickness.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultColor">
            <summary>
            Default value for Color.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.DefaultOffsetInPixels">
            <summary>
            Default value for OffsetInPixels.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.IsVisibleForOrthogonalProjection">
            <summary>
            Gets or sets parallel-projection visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.SizeInPixels">
            <summary>
            Gets or sets the scale-bar size (in pixels).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.TickLabelFont">
            <summary>
            Gets or sets tick label font description.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.TickLabelColor">
            <summary>
            Gets or sets tick label color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.Thickness">
            <summary>
            Gets or sets scale-bar lines thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.Color">
            <summary>
            Gets or sets scale-bar lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.OffsetInPixels">
            <summary>
            Gets or sets scale-bar offset (in pixels).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScaleBarOptions.Postfix">
            <summary>
            String content will be apended to number.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.TickPresentationTypes">
            <summary>
            Contains possible tick presentation type flags.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.TickPresentationTypes.Inner">
            <summary>
            Ticks are located inside of the render area.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes2D.TickPresentationTypes.Outer">
            <summary>
            Ticks are located outside of the render area.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes2D.ScallableAxis2D">
            <summary>
            Contains scallable axis 2D settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScallableAxis2D.TickPresentationType">
            <summary>
            Gets or sets tick presentation type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScallableAxis2D.UseScientificFormatForLog">
            <summary>
            Gets or sets flag that enables usage of scientific format for logarithmic data scales.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes2D.ScallableAxis2D.TickLabelLogFormat">
            <summary>
            Gets or sets tick label format used for logarithmic data scales.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.AngleAxis3D">
            <summary>
            Contains parameters of a single 3D angle axis.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Axes3D.AngleAxis3D.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D">
            <summary>
            Contains settings used for chart 3D axes presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.IsVisible">
            <summary>
            Gets or sets the axes visibility in 3D mode.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.CartesianSettings">
            <summary>
            Gets or sets chart 2D cartesian axes presentation settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.R">
            <summary>
            Gets or sets R (radius) axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.Phi">
            <summary>
            Gets or sets Phi axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.Theta">
            <summary>
            Gets or sets Phi axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.X">
            <summary>
            Gets or sets X axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.Y">
            <summary>
            Gets or sets Y axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.Z">
            <summary>
            Gets or sets Z axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.AxesSettings3D.CustomBoundsSelector">
            <summary>
            Custom selctor of data bounds.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings">
            <summary>
            Contains presentation settings of 2D cartesian axes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.DefaultMajorGridLinesThickness">
            <summary>
            Default value for MajorGridLinesThickness.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.DefaultMajorGridLinesColor">
            <summary>
            Default value for MajorGridLinesColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.DefaultMinorGridLinesColor">
            <summary>
            Default value for MinorGridLinesColor.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.IsMajorGridLinesVisible">
            <summary>
            Gets or sets major grid lines visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.MajorGridLinesColor">
            <summary>
            Gets or sets major grid lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.IsMinorGridLinesVisible">
            <summary>
            Gets or sets minor grid lines visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.MinorGridLinesColor">
            <summary>
            Gets or sets minor grid lines color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.CartesianAxes3DSettings.MajorGridLinesThickness">
            <summary>
            Gets or sets major grid line thickness.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.RadiusAxis3D">
            <summary>
            Contains 2D radius axis settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.RadiusAxis3D.MaxRadius">
            <summary>
            Gets or sets optional maximum radius.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.RadiusAxis3D.MaxRadiusColor">
            <summary>
            Gets or sets maximum radius color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.Axis3D">
            <summary>
            Contains base presentation parameters of 2D axis.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Axes3D.Axis3D.GetDefaultTitleLabelFont">
            <summary>
            Deafault <see cref="T:AtomicusChart.Interface.Data.FontDescription"/> for 3d axes.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Axes3D.Axis3D.DefaultTickCount">
            <summary>
            Default value for TickCount.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.Axis3D.TickCount">
            <summary>
            Gets or sets count of ticks.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.Axis3D.TickLabelsVisible">
            <summary>
            Are ticks axes visible.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Axes3D.Axis3D.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.LineAxis3D">
            <summary>
            Contains default settings for line axis in 3D space.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.LineAxis3D.TitlePixelOffset">
            <summary>
            Offset of label on axis in pixels.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Axes3D.LineAxis3D.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Axes3D.ScallableAxis3D">
            <summary>
            Contains scallable axis 3D settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.ScallableAxis3D.UseScientificFormatForLog">
            <summary>
            Gets or sets flag that enables usage of scientific format for logarithmic data scales.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.ScallableAxis3D.TickLabelLogFormat">
            <summary>
            Gets or sets tick label format used for logarithmic data scales.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Axes3D.ScallableAxis3D.AxisLabelsPixelOffset">
            <summary>
            Offset of label on axis in pixels.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.AxesSettings">
            <summary>
            Contains settings used for chart axes presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.Scales">
            <summary>
            Gets or sets the axes scales description.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.CoordinateSystem">
            <summary>
            Gets or sets the axes presentation coordinate system.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.ScaleBar">
            <summary>
            Gets or sets chart scale-bar options.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.CylindricalSettings">
            <summary>
            Gets or sets chart 2D cylindrical axes presentation settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.Axes2D">
            <summary>
            Gets or sets options for 2D axes presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.Axes3D">
            <summary>
            Gets or sets options for 3D axes presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.AxesSettings.ValueAxis">
            <summary>
            Gets or sets R (radius) axis settings.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.BoundsSelectorDelegate">
            <summary>
            Delegate map render data to bool, showing should RederData bounds be includede to bounds.
            </summary>
            <param name="renderData"></param>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.CoordinateSystem">
            <summary>
            Coordinate system enumeration.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.CoordinateSystem.Cartesian">
            <summary>
            Cartesian coordinate system.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.CoordinateSystem.Cylindrical">
            <summary>
            Cylindrical coordinate system.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.CoordinateSystem.Spherical">
            <summary>
            Spherical coordinate system.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Common.CylindricalSettings">
            <summary>
            Contains presentation settings of 2D cylindrical axes.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.CylindricalSettings.ZAxisAxisIndex">
            <summary>
            Gets or sets the cylindrical axes depth axis index.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Common.DataScale">
            <summary>
            Data scales enumeration.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.DataScale.Linear">
            <summary>
            Linear data scale.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.DataScale.Sqrt">
            <summary>
            Sqrt data scale.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.DataScale.Log">
            <summary>
            Log10 data scale.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Common.DataScales">
            <summary>
            Contains data scale settings.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.DataScales.X">
            <summary>
            Gets or sets X axis data scale.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.DataScales.Y">
            <summary>
            Gets or sets Y axis data scale.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.DataScales.Z">
            <summary>
            Gets or sets Z axis data scale.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.DataScales.Value">
            <summary>
            Gets or sets value axis data scale.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.Common.DataScales.GetScales">
            <summary>
            Get scales struct.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.Common.AxisBase">
            <summary>
            Contains base presentation parameters of 2D axis.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.AxisBase.DefaultAxisColor">
            <summary>
            Default value for AxisColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.AxisBase.DefaultTickLabelColor">
            <summary>
            Default value for TickLabelColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.AxisBase.DefaultTickLabelFont">
            <summary>
            Default value for TickLabelFont.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.AxisBase.DefaultTitleLabelColor">
            <summary>
            Default value for TitleLabelColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.Common.AxisBase.DefaultTitleLabelFont">
            <summary>
            Default value for TitleLabelFont.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.AxisColor">
            <summary>
            Gets or sets the axis color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.AxisThickness">
            <summary>
            Gets or sets the axis thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.Title">
            <summary>
            Gets or sets the axis title.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.TickLabelFont">
            <summary>
            Gets or sets the axis tick label font description.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.TickLabelFormat">
            <summary>
            Gets or sets the axis tick label format string used during tick value conversion.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.TickLabelColor">
            <summary>
            Gets ir sets the axis tick label color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.TitleLabelFont">
            <summary>
            Gets or sets the axis title label font description.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.AxesData.Common.AxisBase.TitleLabelColor">
            <summary>
            Gets or sets the axis title label color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.MinorTick">
            <summary>
            Contains information about minor tick.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.MinorTick.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.MinorTick.RelativePosition">
            <summary>
            Relative position of tick is value from [0,1].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.MinorTick.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Value on tick.</param>
            <param name="relativePosition">Relative position of tick.</param>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.MajorTick">
            <summary>
            Contain information about major tick.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.MajorTick.Value">
            <summary>
            Value of tick.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.MajorTick.IsEvenTickNumber">
            <summary>
            Is tick even. Even/Odd is not literally.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.MajorTick.RelativePosition">
            <summary>
            Relative position of tick is value from [0,1].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.MajorTick.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="relativePosition">Relative position of tick.</param>
            <param name="value">Value that corresponds to that tick.</param>
            <param name="isEvenTickNumber">Is that tick even (tick can be even or odd despite its value).</param>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.TickResult">
            <summary>
            Result of ticks computation.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickResult.InitialStart">
            <summary>
            Beginning of segment line.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickResult.InitialStop">
            <summary>
            End of segment line.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickResult.MajorTicks">
            <summary>
            Major ticks.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickResult.MinorTicks">
            <summary>
            Minor ticks.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.TickResult.#ctor(System.Double,System.Double,System.Collections.ObjectModel.ReadOnlyCollection{AtomicusChart.Interface.AxesData.MajorTick},System.Collections.ObjectModel.ReadOnlyCollection{AtomicusChart.Interface.AxesData.MinorTick})">
            <summary>
            Constructor.
            </summary>
            <param name="initialStart">Begin of segment line.</param>
            <param name="initialStop">End  of segment line.</param>
            <param name="majorTicks">Major tick.</param>
            <param name="minorTicks">Minor ticks.</param>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.AxisCalculationDescription">
            <summary>
            Container for data for computation of ticks.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.AxisCalculationDescription.TickCalculationOptions">
            <summary>
            Minor tick description.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.AxisCalculationDescription.InitialStart">
            <summary>
            The beginning of the line segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.AxisCalculationDescription.InitialStop">
            <summary>
            The end of the line segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.AxisCalculationDescription.UnitsCount">
            <summary>
            Desired count of units.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.AxisCalculationDescription.#ctor(AtomicusChart.Interface.AxesData.TickCalculationOptions,System.Double,System.Double,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="tickOptions">Tick calculation options.</param>
            <param name="initialStart">The beginning of the line segment.</param>
            <param name="initialStop">The end of the line segment.</param>
            <param name="unitsCount">Desired count of units.</param>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.AxisCalculationDescription.Equals(AtomicusChart.Interface.AxesData.AxisCalculationDescription)">
            <summary>
            Return true if the structures are equal.
            </summary>
            <param name="description">Structure for comparison.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.AxesData.TickCalculationOptions">
            <summary>
            Description for axis tick calculation.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickCalculationOptions.CountMinorTicksOnSegment2">
            <summary>
            Minor ticks count when major ticks step is 2x10^x, where X is integer value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickCalculationOptions.CountMinorTicksOnSegment5">
            <summary>
            Minor ticks count when major ticks step is 5x10^x, where X is integer value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.AxesData.TickCalculationOptions.CountMinorTicksOnSegment10">
            <summary>
            Minor ticks count when major ticks step is 1x10^x, where X is integer value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.AxesData.TickCalculationOptions.Equals(AtomicusChart.Interface.AxesData.TickCalculationOptions)">
            <summary>
            Returns true if the structures are equal.
            </summary>
            <param name="options">Options for comparison.</param>
            <returns>Result of comparison.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.BaseNotifyProperty">
            <summary>
            Implementation of INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.BaseNotifyProperty.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.OnPropertyChanged(System.String)">
            <summary>
            Called when a property value is changed.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="E:AtomicusChart.Interface.BaseNotifyProperty.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.OnPropertyChanging(System.String)">
            <summary>
            Called when a property value is changing.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.SetProperty(System.Single@,System.Single,System.String)">
            <summary>
            Set new value for float property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.SetProperty(System.Double@,System.Double,System.String)">
            <summary>
            Set new value for double property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.SetProperty(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,System.String)">
            <summary>
            Set new value for Vector3F property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.SetProperty(System.Boolean@,System.Boolean,System.String)">
            <summary>
            Set new value for bool property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:AtomicusChart.Interface.BaseNotifyProperty.SetProperty(AtomicusChart.Interface.Data.Color4@,AtomicusChart.Interface.Data.Color4,System.String)">
            <summary>
            Set new value for bool property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Bounds">
            <summary>
            Represents simple 3D bounds structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Bounds.Min">
            <summary>
            Min bounds value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Bounds.Max">
            <summary>
            Max bounds value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.#ctor(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Creates new bounds with the specified position.
            </summary>
            <param name="position">Concrete position.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.GetCenter">
            <summary>
            Gets the bounds center.
            </summary>
            <returns>Bounds center.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.GetSize">
            <summary>
            Gets the bounds size.
            </summary>
            <returns>Bounds size.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.GetDefault">
            <summary>
            Get default bounds.
            </summary>
            <returns>Default bounds.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.Merge(AtomicusChart.Interface.CameraView.Bounds@)">
            <summary>
            Merge bounds.
            </summary>
            <param name="bounds">Other bounds.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.TransformBounds(AtomicusChart.Interface.CameraView.Bounds@,AtomicusChart.Interface.Data.Matrix4F@)">
            <summary>
            Transform bounds.
            </summary>
            <param name="bounds">Bounds.</param>
            <param name="transform">Transform.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.GetBoundsWithoutComparison(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.CameraView.Bounds@)">
            <summary>
            Get bounds from two points without checking min/max validity.
            </summary>
            <param name="min">First point.</param>
            <param name="max">Second point.</param>
            <param name="result">Result</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Bounds.IsFastInvalidAlongOneAxis">
            <summary>
            Fast check for invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.BoundsSet">
            <summary>
            Contains information about three-dimensional bounds.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.BoundsSet.SizeOfData">
            <summary>
            Size of data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.BoundsSet.Max">
            <summary>
            Absolute max;
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.BoundsSet.Min">
            <summary>
            Absolute min.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.BoundsSet.PositiveMin">
            <summary>
            Positive min.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.BoundsSet.NonNegativeMin">
            <summary>
            Non negative min.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.#ctor(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Ctor.
            </summary>
            <param name="max">Max.</param>
            <param name="min">Min.</param>
            <param name="positiveMin">PositiveMin.</param>
            <param name="nonNegativeMin">NonNegativeMin.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.GetBounds(AtomicusChart.Interface.Data.Scales@,AtomicusChart.Interface.CameraView.Bounds@)">
            <summary>
            Gets scaled bounds.
            </summary>
            <param name="scales">Data scaling vector.</param>
            <param name="result">Scaled bounds</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.Get_LINEAR_Center">
            <summary>
            Gets the bounds linear center.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.Merge(AtomicusChart.Interface.CameraView.BoundsSet@)">
            <summary>
            Gets result of bounds merging.
            </summary>
            <param name="newBounds">Bounds for merging.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.Merge(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@)">
            <summary>
            Gets result of bounds merging.
            </summary>
            <param name="newMax">New max bound.</param>
            <param name="newMin">New min bound.</param>
            <param name="newNonNegativeMin">New non-negative min bounds.</param>
            <param name="newPositiveMin">New positive min value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.MergePoint(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Merge points to bounds.
            </summary>
            <param name="point">Point.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.MergeTo(AtomicusChart.Interface.Data.OneAxisBounds@,System.Int32)">
            <summary>
            Mege range.
            </summary>
            <param name="bounds">Bounds to merge.</param>
            <param name="axisInex">Axis index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.GetInvalidBounds">
            <summary>
            Get invalid instance of bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BoundsSet.ToString">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Camera2D">
            <summary>
            Represents two-dimensional camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.Camera2D.Projection">
            <summary>
            Gets or sets projection type.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera2D.GetTransform(System.Single,AtomicusChart.Interface.CameraView.Bounds@,AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@,System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera2D.SetViewport(AtomicusChart.Interface.CameraView.Viewport)">
            <summary>
            Sets the camera viewport.
            </summary>
            <param name="viewport">Destination viewport.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera2D.GetViewport">
            <summary>
            Gets the camera current viewport.
            </summary>
            <returns>Camera current viewport.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera2D.GetProjectionInfo">
            <summary>
            Get information about projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera2D.GetViewInfo">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Viewport">
            <summary>
            Represents two-dimensional camera viewport info structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Viewport.HorizontalIndex">
            <summary>
            Gets horizontal axis index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Viewport.VerticalIndex">
            <summary>
            Gets vertical axis index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Viewport.DepthIndex">
            <summary>
            Gets depth axis index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Viewport.LeftBottom">
            <summary>
            Gets left-bottom position.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Viewport.RightTop">
            <summary>
            Gets right-top position.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.#ctor(AtomicusChart.Interface.CameraView.Projection2DTypes,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Ctor.
            </summary>
            <param name="projection">Projection.</param>
            <param name="leftBottom">Left bottom.</param>
            <param name="rightTop">Right top.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.#ctor(AtomicusChart.Interface.CameraView.Viewport@,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Viewport.
            </summary>
            <param name="viewport">Old viewport.</param>
            <param name="newLeftBottom">New Left bottom.</param>
            <param name="newRightTop">New right top.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetWithNewBounds(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Get viewport with new bounds.
            </summary>
            <param name="leftBottom">New left bottom.</param>
            <param name="rightTop">New right top.</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetCenter">
            <summary>
            Center of view port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetSizeSigned">
            <summary>
            Center of view port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetLookUp">
            <summary>
            Look up direction.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetByOffsetFromCenter(AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Get points with offset.
            </summary>
            <param name="relativeOffset">Ofset vector with componets measured from -1 to 1.</param>
            <returns>New vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetBounds2D">
            <summary>
            Gets the viewport two-dimensional bounds.
            </summary>
            <returns>Viewport two-dimensional bounds.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetFrom2D(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Gets the viewport with changed two-dimensional bounds.
            </summary>
            <param name="leftBottoms">New left-bottom corner.</param>
            <param name="rightTop">New top-right corner.</param>
            <returns>Modified viewport.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.Move2D(AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Moves the viewport.
            </summary>
            <param name="displacement">Movement displacement.</param>
            <returns>Moved viewport.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Viewport.GetHorizontalRange">
            <summary>
            Get horizontal range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.CameraViewPaddings">
            <summary>
            Contains two-dimensional camera view paddings info.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.CameraViewPaddings.Left">
            <summary>
            Left padding.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.CameraViewPaddings.Top">
            <summary>
            Top padding.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.CameraViewPaddings.Right">
            <summary>
            Right padding.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.CameraViewPaddings.Bottom">
            <summary>
            Bottom padding.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.CameraViewPaddings.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new camera view paddings.
            </summary>
            <param name="left">Left corner.</param>
            <param name="top">Top corner.</param>
            <param name="right">Right corner.</param>
            <param name="bottom">Bottom corner.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Projection2DInfo">
            <summary>
            Info about projections.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DInfo.HorizontalIndex">
            <summary>
            Horizontal index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DInfo.VerticalIndex">
            <summary>
            Vertical index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DInfo.DepthIndex">
            <summary>
            Depth index.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewConstrains">
            <summary>
            Settings of one axes view.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewConstrains.Min">
            <summary>
            Min view value on axes.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewConstrains.Max">
            <summary>
            Max view value on axes.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewConstrains.MinViewDeltaPercent">
            <summary>
            Min possible delta of view, measured by percents of range. Value from [0,1].
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewConstrains.MinViewDeltaAbs">
            <summary>
            Min delta value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewConstrains.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Constructor.
            </summary>
            <param name="min">Min bound of view.</param>
            <param name="max">Max bound of view.</param>
            <param name="minViewDeltaPercent">Min delta percent of view, belongs to [0,1].</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Camera3D">
            <summary>
            Represents three-dimensional camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.Camera3D.FieldOfViewVertical">
            <summary>
            Gets or sets field of view in radians.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.Camera3D.ScalingVector">
            <summary>
            Vector of view scaling.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.Camera3D.IsOrthogonal">
            <summary>
            Gets or sets orthogonal view flag.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.GetViewInfo">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.SetScaledViewInfo(AtomicusChart.Interface.CameraView.ScaledViewInfo@)">
            <summary>
            Gets scaled view info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.GetTransform(System.Single,AtomicusChart.Interface.CameraView.Bounds@,AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@,System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.Pan(AtomicusChart.Interface.Data.Vector3F,System.Boolean)">
            <summary>
            Pans the camera.
            </summary>
            <param name="displacement">Pan displacement.</param>
            <param name="inScaledSpace">Is in scaled space flag.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.ApplyZoomToLookAt(System.Single)">
            <summary>
            Applies a zoom to the camera.
            </summary>
            <param name="unzoomCoefficient">Unzoom coefficient.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Camera3D.ApplyZoomAlongLook(System.Single)">
            <summary>
            Applies a zoom to the camera.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ScaledViewInfo">
            <summary>
            Represents scaled view info structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ScaledViewInfo.LookAt">
            <summary>
            Gets view look-at position.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ScaledViewInfo.Position">
            <summary>
            Gets view position.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ScaledViewInfo.LookUp">
            <summary>
            Gets look-up vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ScaledViewInfo.LookTo">
            <summary>
            Gets look-to vector.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ScaledViewInfo.#ctor(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.CameraView.ScaledViewInfo"/>.
            </summary>
            <param name="lookAt">View look-at position.</param>
            <param name="position">View position.</param>
            <param name="lookUp">View look-up vector.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ScaledViewInfo.GetLookRight">
            <summary>
            Gets look-right vector.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ScaledViewInfo.RotateAroundLookAt(AtomicusChart.Interface.Data.Vector3F,System.Double)">
            <summary>
            Create rotated view info.
            </summary>
            <param name="rotationAxis">Axis.</param>
            <param name="angle">Angle in radians.</param>
            <returns>New info.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.AspectRatio">
            <summary>
            Contains aspect ratio info.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.AspectRatio.Values">
            <summary>
            Aspect ratio values (per axis).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.AspectRatio.#ctor(AtomicusChart.Interface.CameraView.PreferableAxis,AtomicusChart.Interface.Data.Vector3{System.Nullable{System.Single}})">
            <summary>
            Ctor.
            </summary>
            <param name="preferableAxis">That axis will save initial size.</param>
            <param name="values">Data will have such ratio of bounding box cube. S</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.AspectRatio.Equals(AtomicusChart.Interface.CameraView.AspectRatio)">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.AspectRatio.Equals(System.Object)">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.AspectRatio.GetHashCode">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.PreferableAxis">
            <summary>
            Contains possible aspect-ratio preferable axis index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.PreferableAxis.X">
            <summary>
            X-axis.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.PreferableAxis.Y">
            <summary>
            Y-axis.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.PreferableAxis.Z">
            <summary>
            Z-axis.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager">
            <summary>
            Base class for interaction.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.ContextView">
            <summary>
            Context view.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.Camera2D">
            <summary>
            Camera 2d.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.#ctor(AtomicusChart.Interface.CameraView.ContextView,AtomicusChart.Interface.CameraView.ViewManagement.BaseViewOptions)">
            <summary>
            Base class for interaction manager.
            </summary>
            <param name="contextView">View.</param>
            <param name="baseViewOptions">Base view options.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.CorrectByConstrains(AtomicusChart.Interface.CameraView.Viewport@,System.Nullable{AtomicusChart.Interface.Data.Vector3F})">
            <summary>
            Correct viewport by constrains.
            </summary>
            <param name="viewport">Viewport for correction.</param>
            <param name="viewportForSave">Viewport for saving its size.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.TryCorrectViewportRange(System.ValueTuple{System.Single,System.Single}@)">
            <summary>
            Tries to correct the viewport range.
            </summary>
            <param name="range">Data range.</param>
            <returns>True if corrected.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.GetViewportFromBounds(AtomicusChart.Interface.CameraView.Bounds@)">
            <summary>
            Create viewport from bounds.
            </summary>
            <param name="bounds">Bounds.</param>
            <returns>Viewport.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.BaseInteractionManager.UpdateConstrains(AtomicusChart.Interface.CameraView.Viewport@)">
            <summary>
            Update constrains from viewport.
            </summary>
            <param name="viewport">Viewport.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2D">
            <summary>
            Contains parameters responsible for view reset behaviour.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2D.SceneChangesTracker">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2D.#ctor(AtomicusChart.Interface.CameraView.ContextView,AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver,AtomicusChart.Interface.CameraView.ViewManagerCreationArgument,AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache,System.Func{AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangedHandler,AtomicusChart.Interface.CameraView.ViewManagerCreationArgument,AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache,AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker})">
            <summary>
            Ctor.
            </summary>
            <param name="view">View for control.</param>
            <param name="viewOptions">Resolver object.</param>
            <param name="viewManagerCreationArgument">Argument for creation view manager.</param>
            <param name="baseSceneBoundsCache">Owner of scene bounds.</param>
            <param name="resolver">Resolver.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3D">
            <summary>
            Default 3d view manager.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3D.SceneChangesTracker">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3D.DataScalesChanged(AtomicusChart.Interface.Data.Scales,AtomicusChart.Interface.Data.Scales)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3D.SetupDefaultView(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver">
            <summary>
            Resolver of default <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/> contains options of view reset.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.AspectRatio">
            <summary>
            Gets or sets optional aspect-ratio info.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.DefaultProjection">
            <summary>
            Default projection of chart.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.IsDefaultHorizontalProjectionInverse">
            <summary>
            Is default projection of horizontal axis to left.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.IsDefaultVerticalProjectionInverse">
            <summary>
            Is default projection of horizontal axis to down.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.ResetOnCollectionChanged">
            <summary>
            Property indicates if camera will be set to default view when DataSource collection
            is changed (INotifyCollectionChanged interface is used to track collection changes). 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.ResetOnDataSourceChanged">
            <summary>
            Property indicates if camera will be set to default view when DataSource property is set to another object. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.ResetOnDataChanged">
            <summary>
            Property indicates if camera will be set to default view when data presentation changed. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.ResetOnVisibleBoundsChanged">
            <summary>
            Property indicates if camera will be set to default view when data presentation changed. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager3DResolver.DefaultViewPadding">
            <summary>
            Padding for default view.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController">
            <summary>
            Default interaction controller.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.ZoomByWheel(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Zoom to new viewport.
            </summary>
            <param name="zoomSigns">Sines of zoom.</param>
            <param name="relativeFromZero"></param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.MoveViewport(AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Move viewport.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.ZoomByRectangle(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Zoom view by rectangle.
            </summary>
            <param name="leftBottom">Left bottom.</param>
            <param name="rightTop">Right top.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.SetDefaultViewHorizontal">
            <summary>
            Set default view horizontal.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.SetDefaultViewVertical">
            <summary>
            Set default view vertical.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IDefaultInteractionController.SetDefaultView">
            <summary>
            Set default view.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.ICoreChangesHandler">
            <summary>
            Handler for core changes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ICoreChangesHandler.DataScalesChanged(AtomicusChart.Interface.Data.Scales,AtomicusChart.Interface.Data.Scales)">
            <summary>
            Data scaling was changed.
            </summary>
            <param name="oldScales">Old scales.</param>
            <param name="newScales">New scales.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager">
            <summary>
            Interfaces of processing default view for camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager.SceneChangesTracker">
            <summary>
            Handler of scene changes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager.ViewManagerActivated">
            <summary>
            View manager activated.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager.UpdateViewRatio">
            <summary>
            Update view ratio.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker">
            <summary>
            Notifier.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnDataChanged(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Data was changed.
            </summary>
            <param name="renderData">Render data was changed.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnTransformChanged(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Transform was changed.
            </summary>
            <param name="renderData">Render data with changed transform.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnVisibilityChanged(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Data visibility was changed.
            </summary>
            <param name="renderData">Render data with changed visibility.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnIsBoundsVisibleChanged(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Data IsBoundsVisible was changed.
            </summary>
            <param name="renderData">Render data with changed IsBoundsVisible.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnItemAdded(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Items was added to collection.
            </summary>
            <param name="newItem">Added item.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnItemRemoved(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Items was removed from collection.
            </summary>
            <param name="oldItem">Removed item.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnItemsCleared">
            <summary>
            Collection was cleared.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangesTracker.OnDataChanged(System.Collections.Generic.IReadOnlyList{AtomicusChart.Interface.PresentationData.BaseTypes.RenderData},System.Collections.Generic.IReadOnlyList{AtomicusChart.Interface.PresentationData.BaseTypes.RenderData})">
            <summary>
            Data source was changed.
            </summary>
            <param name="oldItems">Old items.</param>
            <param name="newItems">New item.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager2D">
            <summary>
            Interfaces of processing default view for camera.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager2D.SetupDefaultView">
            <summary>
            Setup 2d view.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager3D">
            <summary>
            Interfaces of processing default view for camera.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager3D.SetupDefaultView(System.Single)">
            <summary>
            Get new 2d view settings.
            </summary>
            <param name="screenRationWidthDevByH">Screan ration.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.BaseViewOptions">
            <summary>
            Resolver of default <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/> contains options of view resetting.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.BaseViewOptions.DefaultViewPaddings">
            <summary>
            Padding for default viewport are measured in percents from initial viewport.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.BaseViewOptions.Constrains">
            <summary>
            View constrains for axes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver">
            <summary>
            Resolver of default <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/> contains options of view resetting.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.ResetOnDataSourceChanged">
            <summary>
            Property indicates if camera will be set to default view when DataSource property is set to another object. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.ResetOnCollectionChanged">
            <summary>
            Property indicates if camera will be set to default view when DataSource collection
            is changed (INotifyCollectionChanged interface is used to track collection changes). 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.ResetOnDataChanged">
            <summary>
            Property indicates if camera will be set to default view when data presentation changed. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.ApplyConstrainsAfterByDefaultData">
            <summary>
            Property indicates if camera will be set to default view when data presentation changed. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.ResetToDefaultAfterDataScaleChanged">
            <summary>
            Property indicates if camera will be set to default view when data presentation changed. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ViewManagement.DefaultViewManager2DResolver.FixedUnitRatio">
            <summary>
            Fixed aspect ratio.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IBoundsCacheReset">
            <summary>
            Resetting bounds cache.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IBoundsCacheReset.ResetCache">
            <summary>
            Reset bounds cache.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache">
            <summary>
            Default scene bounds owner.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache.#ctor(AtomicusChart.Interface.CameraView.IBoundsOwner,AtomicusChart.Interface.AxesData.BoundsSelectorDelegate)">
            <summary>
            ctor.
            </summary>
            <param name="boundsOwner">Bounds owner.</param>
            <param name="selector">Selector of bounds for cache.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache.ResetCache">
            <summary>
            Reset cache.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.DefaultSceneBoundsCache.GetBounds(AtomicusChart.Interface.Data.Scales@,AtomicusChart.Interface.CameraView.Bounds@)">
            <summary>
            Get bounds of data.
            </summary>
            <param name="scales">Current scales.</param>
            <param name="bounds">Bounds.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangedHandler">
            <summary>
            Handler changes of scene.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.ISceneChangedHandler.ResetSceneView">
            <summary>
            Request for default view.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.View2DHelper">
            <summary>
            Helper for 2d view operations.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.View2DHelper.ZoomByCoeff(AtomicusChart.Interface.CameraView.Viewport@,AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            
            </summary>
            <param name="viewport">Viewport to zoom.</param>
            <param name="zoomSigns">Sines of zoom.</param>
            <param name="relativeFromZero"></param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.View2DHelper.MoveViewport(AtomicusChart.Interface.CameraView.Viewport@,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Move viewport.
            </summary>
            <param name="viewport">Viewport.</param>
            <param name="delta"></param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.View2DHelper.ZoomByRectangle(AtomicusChart.Interface.CameraView.Viewport@,AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Zoom view by rectangle.
            </summary>
            <param name="viewport">Viewport.</param>
            <param name="leftBottom">Left bottom.</param>
            <param name="rightTop">Right top.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.View2DHelper.GetCorrectedByPaddings(AtomicusChart.Interface.CameraView.Viewport,AtomicusChart.Interface.CameraView.CameraViewPaddings)">
            <summary>
            Get corrected by paddings viewport.
            </summary>
            <param name="nonCorrected">Not corrected viewport.</param>
            <param name="paddings">Paddings.</param>
            <returns>Corrected viewport.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager2DResolver">
            <summary>
            Resolver of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager2DResolver.Resolve(AtomicusChart.Interface.CameraView.ContextView,AtomicusChart.Interface.CameraView.ViewManagerCreationArgument)">
            <summary>
            Resolve instance of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>
            </summary>
            <param name="view">View for managing.</param>
            <param name="viewManagerCreationArgument">Argument for creataion of view manager.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager3DResolver">
            <summary>
            Resolver of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager3DResolver.Resolve(AtomicusChart.Interface.CameraView.ContextView,AtomicusChart.Interface.CameraView.ViewManagerCreationArgument)">
            <summary>
            Resolve instance of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>
            </summary>
            <param name="view">View for managing.</param>
            <param name="viewManagerCreationArgument">Argument for creataion of view manager.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ICollectionChangedListener`1">
            <summary>
            Interface of notifying object when collection changing.
            </summary>
            <typeparam name="T">Type of data for tracking.</typeparam>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ICollectionChangedListener`1.ItemsAdded(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Method is called when new items are added to collection.
            </summary>
            <param name="newItems">New added items.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ICollectionChangedListener`1.BeforeItemsRemove(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Method is called before removing items from collection.
            </summary>
            <param name="itemsForRemoving">Removed items.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ICollectionChangedListener`1.ItemsClearedAndAdded(System.Collections.Generic.IReadOnlyList{`0},System.Collections.Generic.IReadOnlyList{`0},System.Boolean)">
            <summary>
            Method is called after clearing data source and adding new items.
            </summary>
            <param name="oldItems">Old items for clearing.</param>
            <param name="newItems">New items for adding.</param>
            <param name="wasSourceChanged">Was source object replaces. </param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ICollectionChangedListener`1.ItemsInCollectionReplaced(System.Collections.Generic.IReadOnlyList{`0},System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Method is called after items in collection was replaced.
            </summary>
            <param name="oldItems">Items to remove.</param>
            <param name="newItems">Items to add.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Matrix4D">
            <summary>
            Definition of DirectX - style matrix and its algebra.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.Identity">
            <summary>
            Builds identity matrix.
            </summary>
            <returns>Identity matrix.</returns>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M11">
            <summary>
            Matrix element at (1,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M12">
            <summary>
            Matrix element at (1,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M13">
            <summary>
            Matrix element at (1,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M14">
            <summary>
            Matrix element at (1,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M21">
            <summary>
            Matrix element at (2,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M22">
            <summary>
            Matrix element at (2,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M23">
            <summary>
            Matrix element at (2,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M24">
            <summary>
            Matrix element at (2,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M31">
            <summary>
            Matrix element at (3,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M32">
            <summary>
            Matrix element at (3,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M33">
            <summary>
            Matrix element at (3,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M34">
            <summary>
            Matrix element at (3,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M41">
            <summary>
            Matrix element at (4,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M42">
            <summary>
            Matrix element at (4,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M43">
            <summary>
            Matrix element at (4,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Matrix4D.M44">
            <summary>
            Matrix element at (4,4).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.#ctor(System.Double)">
            <summary>
            Creates matrix with equal elements.
            </summary>
            <param name="all">Value for all elements.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates matrix with given elements.
            </summary>
            <param name="m11">M11.</param>
            <param name="m12">M12.</param>
            <param name="m13">M13.</param>
            <param name="m14">M14.</param>
            <param name="m21">M21.</param>
            <param name="m22">M22.</param>
            <param name="m23">M23.</param>
            <param name="m24">M24.</param>
            <param name="m31">M31.</param>
            <param name="m32">M32.</param>
            <param name="m33">M33.</param>
            <param name="m34">M34.</param>
            <param name="m41">M41.</param>
            <param name="m42">M42.</param>
            <param name="m43">M43.</param>
            <param name="m44">M44.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.#ctor(AtomicusChart.Interface.CameraView.Matrix4D@)">
            <summary>
            Creates matrix, equal to source one.
            </summary>
            <param name="src">Source matrix.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.ToMatrix4F(AtomicusChart.Interface.CameraView.Matrix4D@,AtomicusChart.Interface.Data.Matrix4F@)">
            <summary>
            Converts the <see cref="T:AtomicusChart.Interface.CameraView.Matrix4D"/> to <see cref="T:AtomicusChart.Interface.Data.Matrix4F"/>.
            </summary>
            <param name="source">Source matrix.</param>
            <param name="result">Destination matrix.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.ToString">
            <summary>
            Overrides ToString(). 
            </summary>
            <returns>Human readable representation of matrix elements.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Addition(AtomicusChart.Interface.CameraView.Matrix4D,AtomicusChart.Interface.CameraView.Matrix4D)">
            <summary>
            Matrix summation operator.
            </summary>
            <param name="m1">First matrix.</param>
            <param name="m2">Second matrix.</param>
            <returns>Sum matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Subtraction(AtomicusChart.Interface.CameraView.Matrix4D,AtomicusChart.Interface.CameraView.Matrix4D)">
            <summary>
            Matrix subtraction operator.
            </summary>
            <param name="m1">First matrix.</param>
            <param name="m2">Second matrix.</param>
            <returns>Difference matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Multiply(AtomicusChart.Interface.CameraView.Matrix4D,System.Single)">
            <summary>
            Matrix by scalar multiplication operator.
            </summary>
            <param name="m">Matrix.</param>
            <param name="val">Scalar.</param>
            <returns>Multiplied matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Multiply(System.Single,AtomicusChart.Interface.CameraView.Matrix4D)">
            <summary>
            Matrix by scalar multiplication operator.
            </summary>
            <param name="m">Matrix.</param>
            <param name="val">Scalar.</param>
            <returns>Multiplied matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Multiply(AtomicusChart.Interface.CameraView.Matrix4D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Matrix by vector multiplication (or vector transformation) operator.
            </summary>
            <param name="m">Matrix.</param>
            <param name="v">Vector.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Multiply(AtomicusChart.Interface.CameraView.Matrix4D,AtomicusChart.Interface.CameraView.Matrix4D)">
            <summary>
            Matrix by matrix multiplication operator.
            </summary>
            <param name="left">Left matrix.</param>
            <param name="right">Right matrix.</param>
            <returns>Matrix product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.op_Division(AtomicusChart.Interface.CameraView.Matrix4D,System.Single)">
            <summary>
            Matrix by scalar division operator.
            </summary>
            <param name="m">Matrix.</param>
            <param name="val">Scalar.</param>
            <returns>Divided matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Builds a matrix for translation by (x, y, z).
            </summary>
            <param name="x">Translation along OX.</param>
            <param name="y">Translation along OY.</param>
            <param name="z">Translation along OZ.</param>
            <returns>Translation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.Translation(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a matrix for translation by vector v.
            </summary>
            <param name="v">Translation vector.</param>
            <returns>Translation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.Scaling(System.Double,System.Double,System.Double)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="sx">X-scale.</param>
            <param name="sy">Y-scale.</param>
            <param name="sz">Z-scale.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.Scaling(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="v">Scaling vector (x-scale, y-scale, z-scale).</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.RotationX(System.Double)">
            <summary>
            Builds a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Rotation angle in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.RotationY(System.Double)">
            <summary>
            Builds a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Rotation angle in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.RotationZ(System.Double)">
            <summary>
            Builds a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Rotation angle in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.RotationYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Builds a matrix for a specified yaw, pitch, and roll rotations.
            The order of transformations is first roll, then pitch, then yaw. 
            Relative to the object's local coordinate axis, 
            this is equivalent to rotation around the z-axis, 
            followed by rotation around the x-axis,
            followed by rotation around the y-axis. 
            </summary>
            <param name="yaw">Yaw in radians.</param>
            <param name="pitch">Pitch in radians.</param>
            <param name="roll">Roll in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.RotationAxis(AtomicusChart.Interface.Data.Vector3D,System.Double)">
            <summary>
            Builds matrix for counterclockwise rotation around the given axis.
            </summary>
            <param name="axis">
            Rotation axis.
            Note: Matrix4D.RotationAxis does not normalize vector same as DirectX.Matrix.RotationAxis.
            Be sure to normalize axis externally to get expected results.
            </param>
            <param name="angle">Rotation angle in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.LookAtRH(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Builds a right-handed look-at matrix. Analog to DirectX's Matrix.LookAtRH.
            </summary>
            <param name="cameraPosition">A Vector3D structure that defines the camera point. This value is used in translation.</param>
            <param name="cameraTarget">A Vector3D structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A Vector3D structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A Matrix4D structure that is a right-handed look-at matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.LookAtRH(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a right-handed look-at matrix. Analog to DirectX's Matrix.LookAtRH.
            </summary>
            <param name="cameraPosition">A Vector3F structure that defines the camera point. This value is used in translation.</param>
            <param name="cameraTarget">A Vector3F structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A Vector3F structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A Matrix4D structure that is a right-handed look-at matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.LookAtLH(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Builds a left-handed look-at matrix. Analog to DirectX's Matrix.LookAtRH.
            </summary>
            <param name="cameraPosition">A Vector3D structure that defines the camera point. This value is used in translation.</param>
            <param name="cameraTarget">A Vector3D structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A Vector3D structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A Matrix4D structure that is a left-handed look-at matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.LookAtLH(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a left-handed look-at matrix. Analog to DirectX's Matrix.LookAtRH.
            </summary>
            <param name="cameraPosition">A Vector3F structure that defines the camera point. This value is used in translation.</param>
            <param name="cameraTarget">A Vector3F structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A Vector3F structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A Matrix4D structure that is a left-handed look-at matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.OrthoRH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a right-handed orthogonal projection matrix. Analog to DirectX's Matrix.OrthoRH.
            </summary>
            <param name="width">PixelsWidth of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="zNearPlane">Minimum z-value of the view volume.</param>
            <param name="zFarPlane">Maximum z-value of the view volume.</param>
            <returns>A Matrix4D structure that is a right-handed orthogonal projection matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.PerspectiveForRH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a right-handed perspective projection matrix based on a field of view (FOV). Analog to DirectX's Matrix.PerspectiveForRH.
            </summary>
            <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
            <param name="zNearPlane">Z-value of the near view plane.</param>
            <param name="zFarPlane">Z-value of the far view plane.</param>
            <returns>A Matrix4D structure that is a right-handed perspective projection matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.Matrix4D.Invert(AtomicusChart.Interface.CameraView.Matrix4D)">
             <summary>
             Calculates the inverse of the specified matrix.
             </summary>
             <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>Inverted matrix.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.PresentationTracker">
            <summary>
            Class help manage suspending of actions.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.PresentationTracker.IsSuspended">
            <summary>
            Is manager suspended.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.PresentationTracker.#ctor(System.Action)">
            <summary>
            Constructor.
            </summary>
            <param name="afterResumeAction">Action that called after resuming.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.PresentationTracker.Suspend">
            <summary>
            Suspend action.
            </summary>
            <returns>Context of suspension. Should be disposed instead resume.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.PresentationTracker.Resume">
            <summary>
            Resume and rise action (if it happens).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.PresentationTracker.TryRaiseChanged">
            <summary>
            Request for executing action.
            If suspended set flag that event was suspended.
            Else return true.
            </summary>
            <returns>False if action is allowed, otherwise true.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.SuspentionContext">
            <summary>
            Context of suspension.
            Call resume on disposing.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.SuspentionContext.IsDisposed">
            <summary>
            Is context disposed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.SuspentionContext.#ctor(AtomicusChart.Interface.CameraView.PresentationTracker)">
            <summary>
            Constructor.
            </summary>
            <param name="suspendManager">Suspend manager for resuming.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.SuspentionContext.Dispose">
            <summary>
            Dispose object and resume attached SuspendManager.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ContextView">
            <summary>
            Contains parameters responsible for chart view.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.CustomViewManager2DResolver">
            <summary>
            Custom resolver of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>. Substitute default <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/> so default options will not work.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.CustomViewManager3DResolver">
            <summary>
            Custom resolver of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/>. Substitute default <see cref="T:AtomicusChart.Interface.CameraView.ViewManagement.IViewManager"/> so default options will not work.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.ViewManager2D">
            <summary>
            View manager.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.ViewManager3D">
            <summary>
            View manager.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.CurrentViewManager">
            <summary>
            Current view manager.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.DefaultView2DOptions">
            <summary>
            Default reset manager resolver.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.DefaultView3DOptions">
            <summary>
            Default reset manager resolver.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.ViewRequiresCalculation">
            <summary>
            Is view request require calculation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.Mode2D">
            <summary>
            Gets or sets the view two-dimensional camera mode.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.SynchronizeOnAdd">
            <summary>
            Should synchronize with parent on add.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.CameraView.ContextView.Changed">
            <summary>
            Camera changed event.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.CameraView.ContextView.Changing">
            <summary>
            Camera changing event.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.CurrentCamera">
            <summary>
            Gets the view current camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.Camera2D">
            <summary>
            Gets the view two-dimensional camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.Camera3D">
            <summary>
            Gets the view three-dimensional camera.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.ContextView.SynchronizationOptions">
            <summary>
            Option of synchronization.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ContextView.#ctor(AtomicusChart.Interface.CameraView.PresentationTracker,AtomicusChart.Interface.CameraView.IViewMarginsInitializer)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.CameraView.ContextView"/>.
            </summary>
            <param name="presentationTracker">Presentation tracker instance.</param>
            <param name="creator">Margin initializer.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ContextView.RequestForSetDefaultView">
            <summary>
            Sets the view default parameters.
            </summary>s
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ContextView.AddSynchronizationView(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Add view that will be used as source for synchronization.
            </summary>
            <param name="masterView">Current will be synchronized with specified view.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ContextView.RemoveSynchronizationView(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Remove view from synchronization list.
            </summary>
            <param name="masterView">View for remove.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewChangedDelegate">
            <summary>
            View changed delegate.
            </summary>
            <param name="contextView">Context sent message.</param>
            <param name="isSynchronous">Is changed synchronous.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.SynchronizationOptions">
            <summary>
            Synchronization options.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.SynchronizationOptions.Synch2DAxes2DModeFlag">
            <summary>
            Description of axes to synchronization.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.SynchronizationOptions.Synch2DProjection">
            <summary>
            Should camera synchronize projection mode in 2d.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.SynchronizationOptions.Synch3DType">
            <summary>
            Type of synchronization in 3d.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.SynchronizationOptions.NotSynchronize3DScalingVector">
            <summary>
            Synchronize scaling 3d vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.SynchronizationOptions.CameraPositionOffset">
            <summary>
            Offset of camera position (will be added to parent position).
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IDataScalingOwner">
            <summary>
            Represents <see cref="T:AtomicusChart.Interface.AxesData.Common.DataScale"/> vector owner interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.IDataScalingOwner.DataScales3">
            <summary>
            Gets data scales vector.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IScreenRatioInfo">
            <summary>
            Represents screen ratio coefficient owner interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.IScreenRatioInfo.GetScreenRatioWidthDevByHeight">
            <summary>
            Gets screen ratio coefficient.
            </summary>
            <returns>Screen ratio coefficient.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IResultInfo">
            <summary>
            Represents result render area info provider interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.IResultInfo.GetResultDataArea">
            <summary>
            Gets render area rectangle.
            </summary>
            <returns>Render area rectangle.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IViewMarginsInitializer">
            <summary>
            Represents view margins provider interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.IViewMarginsInitializer.Create(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Gets instance of <see cref="T:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument"/> for the specified instance of <see cref="T:AtomicusChart.Interface.CameraView.ContextView"/>.
            </summary>
            <param name="contextView"><see cref="T:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument"/> instance.</param>
            <returns>Generated providers instances.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IBoundsOwner">
            <summary>
            Owner of bounds.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.IBoundsOwner.GetBoundsPrecise(AtomicusChart.Interface.Data.Scales@,AtomicusChart.Interface.CameraView.Bounds@,AtomicusChart.Interface.AxesData.BoundsSelectorDelegate)">
            <summary>
            Get bounds.
            </summary>
            <param name="scales">Scales.</param>
            <param name="scaled">Scaled bounds.</param>
            <param name="boundsSelector">Bounds selector.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.IDataSourceOwner">
            <summary>
            Owner of data source.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.CameraView.IDataSourceOwner.DataSource">
            <summary>
            Data source.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.BaseCamera">
            <summary>
            Represents camera base class.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BaseCamera.GetTransform(System.Single,AtomicusChart.Interface.CameraView.Bounds@,AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@,System.Single@,System.Single@)">
            <summary>
            Computes matrix parameters of the camera.
            </summary>
            <param name="screenRatioWDevByH">Screen aspect ratio.</param>
            <param name="bounds">Bounds.</param>
            <param name="viewTransform">View transform.</param>
            <param name="normalTransform">Normal transform.</param>
            <param name="nearPlane">Near plane.</param>
            <param name="farPlane">Far plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.BaseCamera.GetViewInfo">
            <summary>
            Get scaled view info.
            </summary>
            <returns>View info.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Synch2DAxesFlag">
            <summary>
            Flags of synchronization of axes in 2d.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.None">
            <summary>
            No synchronization.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.X">
            <summary>
            X only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.Y">
            <summary>
            Y only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.Z">
            <summary>
            Z only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.XY">
            <summary>
            X and Y only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.XZ">
            <summary>
            X and Z only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.YZ">
            <summary>
            Y and Z only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch2DAxesFlag.XYZ">
            <summary>
            X, Y and Z only.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Synch3DType">
            <summary>
            Type of 3d Synchronization.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch3DType.Full">
            <summary>
            Full 3D view synchronization.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Synch3DType.Rotation">
            <summary>
            Synchronization of look(from position to lookAt) direction and lookUp
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.Projection2DTypes">
            <summary>
            Enumeration that contains all possible 2D projections.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.XY">
            <summary>
            X - horizontal, Y - vertical.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.XZ">
            <summary>
            X - horizontal, Z - vertical.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.YX">
            <summary>
            Y - horizontal, X - vertical.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.YZ">
            <summary>
            Y - horizontal, Z - vertical.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.ZX">
            <summary>
            Z - horizontal, X - vertical.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.Projection2DTypes.ZY">
            <summary>
            Z - horizontal, Y - vertical.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ProjectionHelper">
            <summary>
            Help to work with projections..
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ProjectionHelper.GetProjectionInfo(AtomicusChart.Interface.CameraView.Projection2DTypes)">
            <summary>
            Get info about projection by projection type.
            </summary>
            <param name="projection2DType">Type of projection.</param>
            <returns>Info about projection.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument">
            <summary>
            Argument for creation view manager.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument.BoundsOwner">
            <summary>
            Owner of bounds.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument.DataScalingOwner">
            <summary>
            Owner of data scales.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument.DataSourceOwner">
            <summary>
            Owner of data source.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument.ScreenRatioInfo">
            <summary>
            Screen ratio owner.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewManagerCreationArgument.#ctor(AtomicusChart.Interface.CameraView.IBoundsOwner,AtomicusChart.Interface.CameraView.IDataScalingOwner,AtomicusChart.Interface.CameraView.IDataSourceOwner,AtomicusChart.Interface.CameraView.IScreenRatioInfo)">
            <summary>
            Ctor.
            </summary>
            <param name="boundsOwner">Owner of bounds.</param>
            <param name="dataScalingOwner">Owner of data scales.</param>
            <param name="dataSourceOwner">Owner of data source.</param>
            <param name="screenRatioInfo">Screen ration info.</param>
        </member>
        <member name="T:AtomicusChart.Interface.CameraView.ViewState">
            <summary>
            Viw state.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewState.#ctor(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Ctor.
            </summary>
            <param name="view">View.</param>
        </member>
        <member name="M:AtomicusChart.Interface.CameraView.ViewState.ApplyTo(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Apply state to context view.
            </summary>
            <param name="contextView">Context view.</param>
        </member>
        <member name="T:AtomicusChart.Interface.ChartTypesRestrationAttribute">
            <summary>
            Attribute for fast search of resitration.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.ChartTypesRestrationAttribute.Type">
            <summary>
            Type in attribute.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ChartTypesRestrationAttribute.#ctor(System.Type)">
            <summary>
            Type that will be used for registration.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.ByteArrayBGRA32RasterImageReader">
            <summary>
            Represents BGRA32 texture raster image reader for bytes array.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ByteArrayBGRA32RasterImageReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.ByteArrayBGRA32RasterImageReader"/> wit the given parameters.
            </summary>
            <param name="data">Data array.</param>
            <param name="width">Texture width.</param>
            <param name="height">Texture height.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ByteArrayBGRA32RasterImageReader.InitializeResource(AtomicusChart.Interface.DataReaders.IResourceWriter2D)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IResourceWriter1D">
            <summary>
            Represents one-dimensional resource writer interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IResourceWriter1D.UpdateResource(System.IntPtr)">
            <summary>
            Performs full update of the resource is associated with the writer.
            </summary>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IResourceWriter1D.UpdateResource(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Performs partial update of the resource is associated with the writer.
            </summary>
            <param name="data">Data pointer.</param>
            <param name="destinationByteOffset">Destination offset (in bytes).</param>
            <param name="byteLength">Data length (in bytes).</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IResourceWriter1D.SetCapacity(System.Int32)">
            <summary>
            Resizes the resources associated with the writer.
            </summary>
            <param name="capacity">Capacity (in items).</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.ResourceWriter1DExtensions">
            <summary>
            Contains extension methods for <see cref="T:AtomicusChart.Interface.DataReaders.IResourceWriter1D"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ResourceWriter1DExtensions.UpdateResource``1(AtomicusChart.Interface.DataReaders.IResourceWriter1D,``0[])">
            <summary>
            Updates the resource.
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="writer">Resource writer.</param>
            <param name="data">Data for update.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ResourceWriter1DExtensions.UpdateResource``1(AtomicusChart.Interface.DataReaders.IResourceWriter1D,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the resource.
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="writer">Resource writer.</param>
            <param name="data">Data for update.</param>
            <param name="sourceIndex">Source item index.</param>
            <param name="length">Item count.</param>
            <param name="destinationIndex">Destination item index.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IDataWriter2D">
            <summary>
            Represents 2D data writer interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IDataWriter2D.Write(AtomicusChart.Interface.DataReaders.IResourceWriter2D)">
            <summary>
            Writes data to the specified <see cref="T:AtomicusChart.Interface.DataReaders.IResourceWriter2D"/>.
            </summary>
            <param name="dataWriter">Resource writer.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IResourceWriter2D">
            <summary>
            Represents 2D resource writer interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IResourceWriter2D.UpdateResource(System.IntPtr,System.Int32)">
            <summary>
            Performs full update of the resource is associated with the writer.
            </summary>
            <param name="array">Source data.</param>
            <param name="stride">Data row stride (in bytes).</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IResourceWriter2D.UpdateResource(System.IntPtr,AtomicusChart.Interface.DataReaders.DataSegment2D,System.Int32)">
            <summary>
            Performs partial update of the resource is associated with the writer.
            </summary>
            <param name="array">Source data.</param>
            <param name="dataSegment">Data segment (in pixels).</param>
            <param name="stride">Data row stride (in bytes).</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DataSegment2D">
            <summary>
            Contains 2D segment information.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DataSegment2D.Left">
            <summary>
            Left corner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DataSegment2D.Top">
            <summary>
            Top corner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DataSegment2D.Right">
            <summary>
            Right corner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DataSegment2D.Bottom">
            <summary>
            Bottom corner.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DataSegment2D.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DataSegment2D"/>.
            </summary>
            <param name="left">Left corner.</param>
            <param name="top">Top corner.</param>
            <param name="right">Right corner.</param>
            <param name="bottom">Bottom corner.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DelegateWriter2D">
            <summary>
            Represents the most trivial implementation of <see cref="T:AtomicusChart.Interface.DataReaders.IDataWriter2D"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DelegateWriter2D.#ctor(System.Action{AtomicusChart.Interface.DataReaders.IResourceWriter2D})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DelegateWriter2D"/>.
            </summary>
            <param name="action">Concrete action.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DelegateWriter2D.Write(AtomicusChart.Interface.DataReaders.IResourceWriter2D)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.ResourceWriter2DExtensions">
            <summary>
            Contains extension methods for <see cref="T:AtomicusChart.Interface.DataReaders.IResourceWriter2D"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ResourceWriter2DExtensions.UpdateResource``1(AtomicusChart.Interface.DataReaders.IResourceWriter2D,``0[],System.Int32)">
            <summary>
            Updates the resources.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="writer">Resource writer instance.</param>
            <param name="data">Data array.</param>
            <param name="stride">Data stride.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.ResourceWriter2DExtensions.UpdateResource``1(AtomicusChart.Interface.DataReaders.IResourceWriter2D,``0[0:,0:],System.Int32)">
            <summary>
            Updates the resources.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="writer">Resource writer instance.</param>
            <param name="data">Data array.</param>
            <param name="stride">Data stride.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader">
            <summary>
            Represents default implementation of <see cref="T:AtomicusChart.Interface.DataReaders.PositionMaskDataReader"/>. Doesn't support any dynamic update operations.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader.#ctor(AtomicusChart.Interface.Data.Vector3F[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader"/>.
            </summary>
            <param name="positions">Positions array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader.#ctor(AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.VertexMask[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="vertexMasks">Vertex masks array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader.GetPositions">
            <summary>
            Get positions.
            </summary>
            <returns>Positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader.SetDrawRegion(AtomicusChart.Interface.DataReaders.DrawRegion)">
            <summary>
            Sets the reader draw region.
            </summary>
            <param name="drawRegion">Draw region.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DefaultPositionMaskDataReader.InitializeResources(AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DataReaderContentUpdateAction`1">
            <summary>
            Represents data reader update processor.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="storage"></param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader">
            <summary>
            Represents positions mask data reader that supports update/append/replace operations.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.Capacity">
            <summary>
            Gets the reader capacity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.DrawRegion">
            <summary>
            Gets the reader draw region.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader"/> with predefined capacity.
            </summary>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.InitializeResources(AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.SetDrawRegion(AtomicusChart.Interface.DataReaders.DrawRegion)">
            <summary>
            Sets the reader draw region.
            </summary>
            <param name="drawRegion">Region to draw.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.UpdateMasks(AtomicusChart.Interface.VertexMask[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the reader masks.
            </summary>
            <param name="masks">Masks for update.</param>
            <param name="sourceIndex">Source array index.</param>
            <param name="sourceLength">Source array count.</param>
            <param name="destinationIndex">Destination index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.UpdateMask(AtomicusChart.Interface.VertexMask,System.Int32)">
            <summary>
            Updates the reader mask.
            </summary>
            <param name="mask">Updated mask.</param>
            <param name="index">Destination index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.UpdatePositions(AtomicusChart.Interface.Data.Vector3F[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the reader positions.
            </summary>
            <param name="points">Points for update.</param>
            <param name="sourceIndex">Source array index.</param>
            <param name="sourceLength">Source array count.</param>
            <param name="destinationIndex">Destination index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.UpdatePosition(AtomicusChart.Interface.Data.Vector3F,System.Int32)">
            <summary>
            Updates the reader position.
            </summary>
            <param name="point">Updated point.</param>
            <param name="index">Destination index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the reader content.
            </summary>
            <param name="index">Index offset.</param>
            <param name="count">Shift count.</param>
            <param name="shift">Shift factor.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.SetCapacity(System.Int32)">
            <summary>
            Sets the reader capacity.
            </summary>
            <param name="newCapacity">Additional capacity.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DynamicPositionMaskDataReader.GetPositionsUnsafe">
            <summary>
            Get positions.
            </summary>
            <returns>Positions.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IDataReader`1">
            <summary>
            Represents base interface for data reader with the specified writer type.
            </summary>
            <typeparam name="TWriter">Data writer type.</typeparam>
        </member>
        <member name="E:AtomicusChart.Interface.DataReaders.IDataReader`1.DataChanged">
            <summary>
            The event is called whenever the reader has data content changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DenormalizationRange">
            <summary>
            Represents denormalization range structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DenormalizationRange.Multiplier">
            <summary>
            Gets min value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DenormalizationRange.Offset">
            <summary>
            Gets max value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DenormalizationRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes fields of <see cref="T:AtomicusChart.Interface.DataReaders.DenormalizationRange"/> structure.
            </summary>
            <param name="multiplier">Denormalization multiplier.</param>
            <param name="offset">Denormalization offset.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IDenormalizationRangeOwner">
            <summary>
            Represents base interface for value data reader.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.IDenormalizationRangeOwner.DenormalizationRange">
            <summary>
            Gets the reader value denormalization range.
            The formula of denormalization is following: Multiplier * Value + Offset.
            Note:
            	- Using float type a value is represented by real absolute value.
            	- Using compressed integer types a value is represented by normalized value (for example 200 for byte is 200 / byte.Max).
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.DataReaders.IDenormalizationRangeOwner.DenormalizationRangeChanged">
            <summary>
            The event is called whenever the reader has denormalization value range changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IValueDataReader`1">
            <summary>
            Represents base interface for value data reader with the specified writer type.
            </summary>
            <typeparam name="TWriter">Data writer type.</typeparam>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DataChangedDelegate`1">
            <summary>
            Represents data reader data changed callback delegate.
            </summary>
            <typeparam name="TWriter">Data writer type.</typeparam>
            <param name="sender">Invokator instance.</param>
            <param name="dataWriter">Data writer instance.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.Image2DReader">
            <summary>
            Represents image data reader base class.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.Image2DReader.Description">
            <summary>
            Gets the reader image description.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.DataReaders.Image2DReader.DataChanged">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DReader.#ctor(AtomicusChart.Interface.DataReaders.Image2DDescription)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.Image2DReader"/> with the specified description.
            </summary>
            <param name="description">Image description.
            </param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DReader.OnDataChanged(AtomicusChart.Interface.DataReaders.IDataWriter2D)">
            <summary>
            Notifies the reader about data content changes.
            </summary>
            <param name="dataWriter">Data writes instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DReader.InitializeResource(AtomicusChart.Interface.DataReaders.IResourceWriter2D)">
            <summary>
            Initializes the image content.
            </summary>
            <param name="resourceWriter">Resource data writer.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DReader.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.Image2DPixelFormat">
            <summary>
            Contains available 2D image pixel formats.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DPixelFormat.Float">
            <summary>
            Float (4 byte per pixel) pixel format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DPixelFormat.Byte">
            <summary>
            Byte (1 byte per pixel) pixel format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DPixelFormat.Short">
            <summary>
            Short (2 byte per pixel) pixel format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DPixelFormat.Bgr32">
            <summary>
            Bgr32 (8 bits per channel, alpha ignored) pixel format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DPixelFormat.Bgra32">
            <summary>
            Bgra32 (8 bis per channel) pixel format.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.Image2DDescription">
            <summary>
            Contains two-dimensional image description.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DDescription.Width">
            <summary>
            Gets the image width (in pixels).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DDescription.Height">
            <summary>
            Gets the image height (in pixels).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.Image2DDescription.Format">
            <summary>
            Gets the image pixel format.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DDescription.#ctor(System.Int32,System.Int32,AtomicusChart.Interface.DataReaders.Image2DPixelFormat)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.Image2DDescription"/>.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="format">Image pixel format.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.Image2DDescription.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.RasterImage2DReader">
            <summary>
            Represents raster image data reader base class.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.RasterImage2DReader.IsTransparent">
            <summary>
            Gets true if the image that is represented by the reader contains semi-transparent pixels.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.RasterImage2DReader.#ctor(System.Int32,System.Int32,AtomicusChart.Interface.DataReaders.RasterImage2DFormat)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.RasterImage2DReader"/>.
            </summary>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <param name="imageFormat">Image pixel format.</param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.RasterImage2DReader.#ctor(System.Int32,System.Int32,AtomicusChart.Interface.DataReaders.RasterImage2DFormat,System.Boolean)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.DataReaders.RasterImage2DReader"/>.
            </summary>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <param name="imageFormat">Image pixel format.</param>
            <param name="isTransparent">Image transparency flag.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.RasterImage2DFormat">
            <summary>
            Contains available raster image pixel formats.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.RasterImage2DFormat.Bgr32">
            <summary>
            Blue, red, green, alpha ignored (8 bit per channel) format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.RasterImage2DFormat.Bgra32">
            <summary>
            Blue, red, green, alpha channels (8 bit per channel) format.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.RasterImage2DFormat.Byte">
            <summary>
            One channel (8 bit).
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.PositionMaskDataReader">
            <summary>
            Represents data reader suitable for position (Vector3F) and mask (VertexMask) data extracting.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.DataReaders.PositionMaskDataReader.DataChanged">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.PositionMaskDataReader.OnDataChanged(AtomicusChart.Interface.DataReaders.IPositionMaskDataWriter)">
            <summary>
            Notifies the reader about data changes.
            </summary>
            <param name="dataWriter"></param>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.PositionMaskDataReader.InitializeResources(AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater)">
            <summary>
            Performs reader initialization.
            </summary>
            <param name="updater">Updater callback.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.DrawRegion">
            <summary>
            Represents draw region structure descriptor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DrawRegion.Offset">
            <summary>
            Gets draw offset value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.DataReaders.DrawRegion.Count">
            <summary>
            Gets draw count value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.DrawRegion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes new <see cref="T:AtomicusChart.Interface.DataReaders.DrawRegion"/> structure.
            </summary>
            <param name="offset">Draw offset value.</param>
            <param name="count">Draw count value.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater">
            <summary>
            REpresents positions-mask data reader updater interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater.PositionsWriter">
            <summary>
            Gets the reader positions writer.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater.VertexMaskWriter">
            <summary>
            Gets the reader vertex mask writer.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater.SetDrawRegion(AtomicusChart.Interface.DataReaders.DrawRegion)">
            <summary>
            Sets the reader draw region.
            </summary>
            <param name="drawRegion">Draw region descriptor.</param>
        </member>
        <member name="T:AtomicusChart.Interface.DataReaders.IPositionMaskDataWriter">
            <summary>
            Represents positions and mask data writer.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.DataReaders.IPositionMaskDataWriter.Write(AtomicusChart.Interface.DataReaders.IPositionMaskDataReaderUpdater)">
            <summary>
            Performs reader update.
            </summary>
            <param name="updater">Updater callback.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Color4">
            <summary>
            Represents Rgba32 (8 bits per channel) color structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Color4.SizeOfData">
            <summary>
            Size of the structure (in bytes).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Color4.Red">
            <summary>
            Red component of color.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Color4.Green">
            <summary>
            Green component of color.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Color4.Blue">
            <summary>
            Blue component of color.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Color4.Alpha">
            <summary>
            Alpha component of color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Color4.IsOpaque">
            <summary>
            Returns true if the color is opaque (non-transparent).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Color from bytes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates color from bytes. Alpha = 255.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.#ctor(AtomicusChart.Interface.Data.Color4,System.Byte)">
            <summary>
            Creates color from another color.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.GetTrimmedAlpha">
            <summary>
            Trims alpha of the color to it's maximum value making the color opaque.
            </summary>
            <returns>Trimmed color.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.GetWithAlpha(System.Byte)">
            <summary>
            Get same color with substituted alpha.
            </summary>
            <param name="alpha">New alpha.</param>
            <returns>New color.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.Equals(AtomicusChart.Interface.Data.Color4)">
            <summary>
            Is equals to other object.
            </summary>
            <param name="other">Object for compare.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.Equals(System.Object)">
            <summary>
            Is equals to other object.
            </summary>
            <param name="other">Object for compare.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.op_Equality(AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.op_Inequality(AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4)">
            <summary>
            Operator of non equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.Lerp(AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4,System.Single)">
            <summary>
            Performs the colors linear interpolation.
            </summary>
            <param name="beginColor">Source color.</param>
            <param name="endColor">Destination color.</param>
            <param name="factor">Interpolation factor.</param>
            <returns>Interpolated color.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.GetOpacity">
            <summary>
            Gets the color relative opacity measured in distance [0; 1].
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Color4.ToVec3FRgb">
            <summary>
            Convert RGB components to normalized vector3F.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ColorEqualityComparer">
            <summary>
            EqualityCopmarer for color.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorEqualityComparer.Equals(AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorEqualityComparer.GetHashCode(AtomicusChart.Interface.Data.Color4)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Colors">
            <summary>
            Contains default <see cref="T:AtomicusChart.Interface.Data.Color4"/>-s values.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.AliceBlue">
            <summary>
            Gets color named AliceBlue with channel values (240, 248, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.AntiqueWhite">
            <summary>
            Gets color named AntiqueWhite with channel values (250, 235, 215, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Aqua">
            <summary>
            Gets color named Aqua with channel values (0, 255, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Aquamarine">
            <summary>
            Gets color named Aquamarine with channel values (127, 255, 212, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Azure">
            <summary>
            Gets color named Azure with channel values (240, 255, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Beige">
            <summary>
            Gets color named Beige with channel values (245, 245, 220, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Bisque">
            <summary>
            Gets color named Bisque with channel values (255, 228, 196, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Black">
            <summary>
            Gets color named Black with channel values (0, 0, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.BlanchedAlmond">
            <summary>
            Gets color named BlanchedAlmond with channel values (255, 235, 205, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Blue">
            <summary>
            Gets color named Blue with channel values (0, 0, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.BlueViolet">
            <summary>
            Gets color named BlueViolet with channel values (138, 43, 226, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Brown">
            <summary>
            Gets color named Brown with channel values (165, 42, 42, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.BurlyWood">
            <summary>
            Gets color named BurlyWood with channel values (222, 184, 135, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.CadetBlue">
            <summary>
            Gets color named CadetBlue with channel values (95, 158, 160, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Chartreuse">
            <summary>
            Gets color named Chartreuse with channel values (127, 255, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Chocolate">
            <summary>
            Gets color named Chocolate with channel values (210, 105, 30, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Coral">
            <summary>
            Gets color named Coral with channel values (255, 127, 80, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.CornflowerBlue">
            <summary>
            Gets color named CornflowerBlue with channel values (100, 149, 237, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Cornsilk">
            <summary>
            Gets color named Cornsilk with channel values (255, 248, 220, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Crimson">
            <summary>
            Gets color named Crimson with channel values (220, 20, 60, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Cyan">
            <summary>
            Gets color named Cyan with channel values (0, 255, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkBlue">
            <summary>
            Gets color named DarkBlue with channel values (0, 0, 139, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkCyan">
            <summary>
            Gets color named DarkCyan with channel values (0, 139, 139, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkGoldenrod">
            <summary>
            Gets color named DarkGoldenrod with channel values (184, 134, 11, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkGray">
            <summary>
            Gets color named DarkGray with channel values (169, 169, 169, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkGreen">
            <summary>
            Gets color named DarkGreen with channel values (0, 100, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkKhaki">
            <summary>
            Gets color named DarkKhaki with channel values (189, 183, 107, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkMagenta">
            <summary>
            Gets color named DarkMagenta with channel values (139, 0, 139, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkOliveGreen">
            <summary>
            Gets color named DarkOliveGreen with channel values (85, 107, 47, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkOrange">
            <summary>
            Gets color named DarkOrange with channel values (255, 140, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkOrchid">
            <summary>
            Gets color named DarkOrchid with channel values (153, 50, 204, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkRed">
            <summary>
            Gets color named DarkRed with channel values (139, 0, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkSalmon">
            <summary>
            Gets color named DarkSalmon with channel values (233, 150, 122, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkSeaGreen">
            <summary>
            Gets color named DarkSeaGreen with channel values (143, 188, 143, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkSlateBlue">
            <summary>
            Gets color named DarkSlateBlue with channel values (72, 61, 139, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkSlateGray">
            <summary>
            Gets color named DarkSlateGray with channel values (47, 79, 79, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkTurquoise">
            <summary>
            Gets color named DarkTurquoise with channel values (0, 206, 209, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DarkViolet">
            <summary>
            Gets color named DarkViolet with channel values (148, 0, 211, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DeepPink">
            <summary>
            Gets color named DeepPink with channel values (255, 20, 147, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DeepSkyBlue">
            <summary>
            Gets color named DeepSkyBlue with channel values (0, 191, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DimGray">
            <summary>
            Gets color named DimGray with channel values (105, 105, 105, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.DodgerBlue">
            <summary>
            Gets color named DodgerBlue with channel values (30, 144, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Firebrick">
            <summary>
            Gets color named Firebrick with channel values (178, 34, 34, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.FloralWhite">
            <summary>
            Gets color named FloralWhite with channel values (255, 250, 240, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.ForestGreen">
            <summary>
            Gets color named ForestGreen with channel values (34, 139, 34, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Fuchsia">
            <summary>
            Gets color named Fuchsia with channel values (255, 0, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Gainsboro">
            <summary>
            Gets color named Gainsboro with channel values (220, 220, 220, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.GhostWhite">
            <summary>
            Gets color named GhostWhite with channel values (248, 248, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Gold">
            <summary>
            Gets color named Gold with channel values (255, 215, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Goldenrod">
            <summary>
            Gets color named Goldenrod with channel values (218, 165, 32, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Gray">
            <summary>
            Gets color named Gray with channel values (128, 128, 128, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Green">
            <summary>
            Gets color named Green with channel values (0, 128, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.GreenYellow">
            <summary>
            Gets color named GreenYellow with channel values (173, 255, 47, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Honeydew">
            <summary>
            Gets color named Honeydew with channel values (240, 255, 240, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.HotPink">
            <summary>
            Gets color named HotPink with channel values (255, 105, 180, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.IndianRed">
            <summary>
            Gets color named IndianRed with channel values (205, 92, 92, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Indigo">
            <summary>
            Gets color named Indigo with channel values (75, 0, 130, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Ivory">
            <summary>
            Gets color named Ivory with channel values (255, 255, 240, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Khaki">
            <summary>
            Gets color named Khaki with channel values (240, 230, 140, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Lavender">
            <summary>
            Gets color named Lavender with channel values (230, 230, 250, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LavenderBlush">
            <summary>
            Gets color named LavenderBlush with channel values (255, 240, 245, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LawnGreen">
            <summary>
            Gets color named LawnGreen with channel values (124, 252, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LemonChiffon">
            <summary>
            Gets color named LemonChiffon with channel values (255, 250, 205, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightBlue">
            <summary>
            Gets color named LightBlue with channel values (173, 216, 230, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightCoral">
            <summary>
            Gets color named LightCoral with channel values (240, 128, 128, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightCyan">
            <summary>
            Gets color named LightCyan with channel values (224, 255, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightGoldenrodYellow">
            <summary>
            Gets color named LightGoldenrodYellow with channel values (250, 250, 210, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightGray">
            <summary>
            Gets color named LightGray with channel values (211, 211, 211, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightGreen">
            <summary>
            Gets color named LightGreen with channel values (144, 238, 144, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightPink">
            <summary>
            Gets color named LightPink with channel values (255, 182, 193, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightSalmon">
            <summary>
            Gets color named LightSalmon with channel values (255, 160, 122, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightSeaGreen">
            <summary>
            Gets color named LightSeaGreen with channel values (32, 178, 170, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightSkyBlue">
            <summary>
            Gets color named LightSkyBlue with channel values (135, 206, 250, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightSlateGray">
            <summary>
            Gets color named LightSlateGray with channel values (119, 136, 153, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightSteelBlue">
            <summary>
            Gets color named LightSteelBlue with channel values (176, 196, 222, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LightYellow">
            <summary>
            Gets color named LightYellow with channel values (255, 255, 224, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Lime">
            <summary>
            Gets color named Lime with channel values (0, 255, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.LimeGreen">
            <summary>
            Gets color named LimeGreen with channel values (50, 205, 50, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Linen">
            <summary>
            Gets color named Linen with channel values (250, 240, 230, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Magenta">
            <summary>
            Gets color named Magenta with channel values (255, 0, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Maroon">
            <summary>
            Gets color named Maroon with channel values (128, 0, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumAquamarine">
            <summary>
            Gets color named MediumAquamarine with channel values (102, 205, 170, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumBlue">
            <summary>
            Gets color named MediumBlue with channel values (0, 0, 205, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumOrchid">
            <summary>
            Gets color named MediumOrchid with channel values (186, 85, 211, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumPurple">
            <summary>
            Gets color named MediumPurple with channel values (147, 112, 219, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumSeaGreen">
            <summary>
            Gets color named MediumSeaGreen with channel values (60, 179, 113, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumSlateBlue">
            <summary>
            Gets color named MediumSlateBlue with channel values (123, 104, 238, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumSpringGreen">
            <summary>
            Gets color named MediumSpringGreen with channel values (0, 250, 154, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumTurquoise">
            <summary>
            Gets color named MediumTurquoise with channel values (72, 209, 204, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MediumVioletRed">
            <summary>
            Gets color named MediumVioletRed with channel values (199, 21, 133, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MidnightBlue">
            <summary>
            Gets color named MidnightBlue with channel values (25, 25, 112, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MintCream">
            <summary>
            Gets color named MintCream with channel values (245, 255, 250, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.MistyRose">
            <summary>
            Gets color named MistyRose with channel values (255, 228, 225, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Moccasin">
            <summary>
            Gets color named Moccasin with channel values (255, 228, 181, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.NavajoWhite">
            <summary>
            Gets color named NavajoWhite with channel values (255, 222, 173, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Navy">
            <summary>
            Gets color named Navy with channel values (0, 0, 128, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.OldLace">
            <summary>
            Gets color named OldLace with channel values (253, 245, 230, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Olive">
            <summary>
            Gets color named Olive with channel values (128, 128, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.OliveDrab">
            <summary>
            Gets color named OliveDrab with channel values (107, 142, 35, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Orange">
            <summary>
            Gets color named Orange with channel values (255, 165, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.OrangeRed">
            <summary>
            Gets color named OrangeRed with channel values (255, 69, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Orchid">
            <summary>
            Gets color named Orchid with channel values (218, 112, 214, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PaleGoldenrod">
            <summary>
            Gets color named PaleGoldenrod with channel values (238, 232, 170, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PaleGreen">
            <summary>
            Gets color named PaleGreen with channel values (152, 251, 152, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PaleTurquoise">
            <summary>
            Gets color named PaleTurquoise with channel values (175, 238, 238, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PaleVioletRed">
            <summary>
            Gets color named PaleVioletRed with channel values (219, 112, 147, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PapayaWhip">
            <summary>
            Gets color named PapayaWhip with channel values (255, 239, 213, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PeachPuff">
            <summary>
            Gets color named PeachPuff with channel values (255, 218, 185, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Peru">
            <summary>
            Gets color named Peru with channel values (205, 133, 63, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Pink">
            <summary>
            Gets color named Pink with channel values (255, 192, 203, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Plum">
            <summary>
            Gets color named Plum with channel values (221, 160, 221, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.PowderBlue">
            <summary>
            Gets color named PowderBlue with channel values (176, 224, 230, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Purple">
            <summary>
            Gets color named Purple with channel values (128, 0, 128, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Red">
            <summary>
            Gets color named Red with channel values (255, 0, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.RosyBrown">
            <summary>
            Gets color named RosyBrown with channel values (188, 143, 143, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.RoyalBlue">
            <summary>
            Gets color named RoyalBlue with channel values (65, 105, 225, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SaddleBrown">
            <summary>
            Gets color named SaddleBrown with channel values (139, 69, 19, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Salmon">
            <summary>
            Gets color named Salmon with channel values (250, 128, 114, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SandyBrown">
            <summary>
            Gets color named SandyBrown with channel values (244, 164, 96, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SeaGreen">
            <summary>
            Gets color named SeaGreen with channel values (46, 139, 87, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SeaShell">
            <summary>
            Gets color named SeaShell with channel values (255, 245, 238, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Sienna">
            <summary>
            Gets color named Sienna with channel values (160, 82, 45, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Silver">
            <summary>
            Gets color named Silver with channel values (192, 192, 192, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SkyBlue">
            <summary>
            Gets color named SkyBlue with channel values (135, 206, 235, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SlateBlue">
            <summary>
            Gets color named SlateBlue with channel values (106, 90, 205, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SlateGray">
            <summary>
            Gets color named SlateGray with channel values (112, 128, 144, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Snow">
            <summary>
            Gets color named Snow with channel values (255, 250, 250, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SpringGreen">
            <summary>
            Gets color named SpringGreen with channel values (0, 255, 127, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.SteelBlue">
            <summary>
            Gets color named SteelBlue with channel values (70, 130, 180, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Tan">
            <summary>
            Gets color named Tan with channel values (210, 180, 140, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Teal">
            <summary>
            Gets color named Teal with channel values (0, 128, 128, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Thistle">
            <summary>
            Gets color named Thistle with channel values (216, 191, 216, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Tomato">
            <summary>
            Gets color named Tomato with channel values (255, 99, 71, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Transparent">
            <summary>
            Gets color named Transparent with channel values (255, 255, 255, 0).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Turquoise">
            <summary>
            Gets color named Turquoise with channel values (64, 224, 208, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Violet">
            <summary>
            Gets color named Violet with channel values (238, 130, 238, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Wheat">
            <summary>
            Gets color named Wheat with channel values (245, 222, 179, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.White">
            <summary>
            Gets color named White with channel values (255, 255, 255, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.WhiteSmoke">
            <summary>
            Gets color named WhiteSmoke with channel values (245, 245, 245, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.Yellow">
            <summary>
            Gets color named Yellow with channel values (255, 255, 0, 255).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Colors.YellowGreen">
            <summary>
            Gets color named YellowGreen with channel values (154, 205, 50, 255).
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ColorMapContainer">
            <summary>
            Represents color map with an attached value range container class.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMapContainer.ColorMap">
            <summary>
            Gets the container color map.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMapContainer.ValueRange">
            <summary>
            Gets the container value range.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ColorMapChanged">
            <summary>
            Delegete of color amp changeing.
            </summary>
            <param name="sender">Sender.</param>
            <param name="gradientChanged">Was gradien changed;</param>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ColorMap">
            <summary>
            Color map type for coloring data depending on value.
            </summary>
            <remarks><para>Color map contains collection of color stops (analog of gradient stops), color areas (for discrete mode) and out of range colors. 
            Color stop positions are relative and has value from 0 for min value and 1 for max value. Result is raster gradient with linear color interpolation between color stops.</para>
            </remarks>
        </member>
        <member name="E:AtomicusChart.Interface.Data.ColorMap.Changed">
            <summary>
            Occurs when something changed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.ColorStops">
            <summary>
            Color on color map (apart from bottom and top).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.NanColor">
            <summary>
            Gets or sets NaN color. This property implements INotifyPropertyChanged and INotifyPropertyChanging. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.OutOfRangeTop">
            <summary>
            Gets or sets top out-of-range color. This property implements INotifyPropertyChanged and INotifyPropertyChanging. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.OutOfRangeBottom">
            <summary>
            Gets or sets bottom out-of-range color. This property implements INotifyPropertyChanged and INotifyPropertyChanging. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.Top">
            <summary>
            Gets or sets top color. This property implements INotifyPropertyChanged and INotifyPropertyChanging. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorMap.Bottom">
            <summary>
            Gets or sets bottom color. This property implements INotifyPropertyChanged and INotifyPropertyChanging. 
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.#ctor">
            <summary>
            Default constructor for serialization only.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.#ctor(AtomicusChart.Interface.Data.ColorStop[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.ColorMap"/> with a given <see cref="T:AtomicusChart.Interface.Data.ColorStop"/> collection.
            </summary>
            <param name="colorStops">Color stops for initialization.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.GetDefaultBright">
            <summary>
            Get default color map.
            </summary>
            <returns>Default color map instance.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.GetViridis">
            <summary>
            Get viridis color map.
            </summary>
            <returns>Color map instance.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.SetColorStops(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.ColorStop})">
            <summary>
            Sets the color map color stops.
            </summary>
            <param name="colorStops">New color stops collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.GetColor(System.Single)">
            <summary>
            Get color with correspond relative position.
            </summary>
            <param name="relativePosition">Relative position of color.</param>
            <returns>Color.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.OnChanged(System.Boolean)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="gradientChanged">Was gradient changed.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.Clone">
            <summary>
            Export color map.
            </summary>
            <returns>Clone of color map.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorMap.CopyFrom(AtomicusChart.Interface.Data.ColorMap)">
            <summary>
            Import color map.
            </summary>
            <param name="colorMap">Color map for copying.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ColorStop">
            <summary>
            Represents color stop on color map class. It contains color and relative position [0, 1f]. Doesn't support alpha channel.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Data.ColorStop.Changed">
            <summary>
            Occurred when ColorStop changed.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Data.ColorStop.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorStop.BotColor">
            <summary>
            Bottom color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorStop.TopColor">
            <summary>
            Top color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ColorStop.RelativePosition">
            <summary>
            Relative position belong (0,1).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.#ctor">
            <summary>
            Default constructor.
            Use for serialization only.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.#ctor(AtomicusChart.Interface.Data.Color4,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="color">Color of color stop.</param>
            <param name="relativePosition">Position of color stop (belong [0, 1]).</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.#ctor(AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="topColor">Top color.</param>
            <param name="bottomColor">Bottom color.</param>
            <param name="relativePosition">Position of color stop (belong [0, 1]).</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.#ctor(AtomicusChart.Interface.Data.ColorStop)">
            <summary>
            Copy constructor.
            </summary>
            <param name="colorStop">Color of color stop.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.#ctor(AtomicusChart.Interface.Data.ColorStop,System.Single)">
            <summary>
            Copy constructor.
            </summary>
            <param name="colorStop">Color of color stop.</param>
            <param name="relativePosition">Position of color stop (belong [0, 1]).</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.ColorStop.CopyFrom(AtomicusChart.Interface.Data.ColorStop)">
            <summary>
            Copies internal state of another color stop.
            </summary>
            <param name="colorStop">Color stop to copy data from.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Contour">
            <summary>
            Represents contour type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Contour.IsVisible">
            <summary>
            Gets or sets the contour visibility.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Contour.level">
            <summary>
            String name of Level property.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Contour.Level">
            <summary>
            Gets or sets contour Level.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Contour.Color">
            <summary>
            Gets or sets Color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Contour.Thickness">
            <summary>
            Gets or sets Thickness.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Contour.#ctor">
            <summary>
            Default constructor.
            Use for serialization only.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Contour.#ctor(System.Single,AtomicusChart.Interface.Data.Color4)">
            <summary>
            Contour constructor.
            </summary>
            <param name="level">Contour level.</param>
            <param name="contourColor">Color for contour.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Contour.#ctor(System.Single,AtomicusChart.Interface.Data.Color4,System.Single)">
            <summary>
            Contour constructor.
            </summary>
            <param name="level">Contour level.</param>
            <param name="contourColor">Color for contour.</param>
            <param name="thickness">Contour thickness.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Contour.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.DefaultTransferFunction1D">
            <inheritdoc />
            <summary>
            Transfer function type.
            </summary>
            <remarks>Custom transfer function. Result of function are linearly interpolated values between IntermediatePoints.</remarks>
        </member>
        <member name="P:AtomicusChart.Interface.Data.DefaultTransferFunction1D.IntermediatePoints">
            <summary>
            Gets intermediate points(between start and stop values). X values must be in range 0..1. Y values should be in range 0..1. 
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.DefaultTransferFunction1D.StartValue">
            <summary>
            Gets or sets Start Value.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.DefaultTransferFunction1D.StopValue">
            <summary>
            Gets or sets Stop Value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.DefaultTransferFunction1D.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.DefaultTransferFunction1D.#ctor(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Vector2DRef})">
            <summary>
            Constructor.
            </summary>
            <param name="points">Initial points.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.DefaultTransferFunction1D.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.DefaultTransferFunction1D.SampleLinear(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.Data.FontDescription">
            <summary>
            Represents structure that contains font description.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.FontDescription.FontFamily">
            <summary>
            Name of font family.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.FontDescription.Size">
            <summary>
            Size of font.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.FontDescription.IsBold">
            <summary>
            Is font bold.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.#ctor(System.String,System.Single,System.Boolean)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.FontDescription"/>.
            </summary>
            <param name="fontFamily">Font family name.</param>
            <param name="size">Font size.</param>
            <param name="isBold">Is font bold.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.#ctor(System.String,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.FontDescription"/>.
            </summary>
            <param name="fontFamily">Font family name.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.Equals(AtomicusChart.Interface.Data.FontDescription)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.GetSystemFont">
            <summary>
            Get system front.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.FontDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.IndexedTriangle">
            <summary>
            Represents triangle constructed by three indices structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.IndexedTriangle.Index0">
            <summary>
            Gets index of the first vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.IndexedTriangle.Index1">
            <summary>
            Gets index of the second vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.IndexedTriangle.Index2">
            <summary>
            Gets index of the third vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs the triangle from three indices.
            </summary>
            <param name="index0">The first vertex index.</param>
            <param name="index1">The second vertex index.</param>
            <param name="index2">The third vertex index.</param>
        </member>
        <member name="P:AtomicusChart.Interface.Data.IndexedTriangle.Item(System.Int32)">
            <summary>
            Gets or sets element at the specified position.
            </summary>
            <param name="index">Component index.</param>
            <returns>Component value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.Convert(System.Int32[])">
            <summary>
            Converts index array into triangle array.
            </summary>
            <param name="indices">Index array.</param>
            <returns>Triangle array.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.Convert(AtomicusChart.Interface.Data.IndexedTriangle[])">
            <summary>
            Converts triangle array into index array.
            </summary>
            <param name="triangles">Triangle array.</param>
            <returns>Index array.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.op_Equality(AtomicusChart.Interface.Data.IndexedTriangle,AtomicusChart.Interface.Data.IndexedTriangle)">
            <summary>
            Equality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if equals, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.op_Inequality(AtomicusChart.Interface.Data.IndexedTriangle,AtomicusChart.Interface.Data.IndexedTriangle)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if unequal, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object. 
            </param>
            <filterpriority>2.</filterpriority>
        </member>
        <member name="M:AtomicusChart.Interface.Data.IndexedTriangle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Margins4F">
            <summary>
            Contains margins values.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Margins4F.Left">
            <summary>
            Left margin.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Margins4F.Top">
            <summary>
            Top margin.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Margins4F.Right">
            <summary>
            Right margin.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Margins4F.Bottom">
            <summary>
            Bottom margin.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Margins4F.#ctor(System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.Margins4F"/>.
            </summary>
            <param name="all">All margins value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Margins4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.Margins4F"/>.
            </summary>
            <param name="left">Left margin.</param>
            <param name="top">Top margin.</param>
            <param name="right">Right margin.</param>
            <param name="bottom">Bottom margin.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Margins4F.ScaleAll(System.Single)">
            <summary>
            Returns result of the margin linear scaling.
            </summary>
            <param name="scaler">Scaling coefficient.</param>
            <returns>Scaling result.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Matrix4F">
            <summary>
            Represents 4x4 matrix container structure with helper methods and overloaded arithmetic operators operators.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.BytesSize">
            <summary>
            Size of the matrix (in bytes).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.Identity">
            <summary>
            Builds identity matrix.
            </summary>
            <returns>Identity matrix.</returns>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M11">
            <summary>
            Matrix element at (1,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M12">
            <summary>
            Matrix element at (1,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M13">
            <summary>
            Matrix element at (1,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M14">
            <summary>
            Matrix element at (1,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M21">
            <summary>
            Matrix element at (2,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M22">
            <summary>
            Matrix element at (2,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M23">
            <summary>
            Matrix element at (2,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M24">
            <summary>
            Matrix element at (2,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M31">
            <summary>
            Matrix element at (3,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M32">
            <summary>
            Matrix element at (3,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M33">
            <summary>
            Matrix element at (3,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M34">
            <summary>
            Matrix element at (3,4).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M41">
            <summary>
            Matrix element at (4,1).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M42">
            <summary>
            Matrix element at (4,2).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M43">
            <summary>
            Matrix element at (4,3).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Matrix4F.M44">
            <summary>
            Matrix element at (4,4).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.#ctor(System.Single)">
            <summary>
            Creates matrix with equal elements.
            </summary>
            <param name="all">Value for all elements.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates matrix with given elements.
            </summary>
            <param name="m11">M11.</param>
            <param name="m12">M12.</param>
            <param name="m13">M13.</param>
            <param name="m14">M14.</param>
            <param name="m21">M21.</param>
            <param name="m22">M22.</param>
            <param name="m23">M23.</param>
            <param name="m24">M24.</param>
            <param name="m31">M31.</param>
            <param name="m32">M32.</param>
            <param name="m33">M33.</param>
            <param name="m34">M34.</param>
            <param name="m41">M41.</param>
            <param name="m42">M42.</param>
            <param name="m43">M43.</param>
            <param name="m44">M44.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.#ctor(AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Creates matrix, equal to source one.
            </summary>
            <param name="src">Source matrix.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Equals(AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Compare the matrixes.
            </summary>
            <param name="other">Other matrix.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.ToString">
            <summary>
            Overrides ToString(). 
            </summary>
            <returns>Human readable representation of matrix elements.</returns>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Matrix4F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets element of matrix.
            </summary>
            <param name="row">Zero-based row index.</param>
            <param name="column">Zero-based column index.</param>
            <returns>Matrix element or ArgumentException if indexes are out of range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If row or column is out of range 0..3.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Equality(AtomicusChart.Interface.Data.Matrix4F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">First matrix.</param>
            <param name="right">Second matrix.</param>
            <returns>True, if matrices are equal, False otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Inequality(AtomicusChart.Interface.Data.Matrix4F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">First matrix.</param>
            <param name="right">Second matrix.</param>
            <returns>True, if matrices are not equal, False otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Addition(AtomicusChart.Interface.Data.Matrix4F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Matrix summation operator.
            </summary>
            <param name="m1">First matrix.</param>
            <param name="m2">Second matrix.</param>
            <returns>Sum matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Subtraction(AtomicusChart.Interface.Data.Matrix4F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Matrix subtraction operator.
            </summary>
            <param name="m1">First matrix.</param>
            <param name="m2">Second matrix.</param>
            <returns>Difference matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Multiply(AtomicusChart.Interface.Data.Matrix4F,System.Single)">
            <summary>
            Matrix by scalar multiplication operator.
            </summary>
            <param name="matrix">Matrix.</param>
            <param name="val">Scalar.</param>
            <returns>Multiplied matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Multiply(System.Single,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Matrix by scalar multiplication operator.
            </summary>
            <param name="matrix">Matrix.</param>
            <param name="scalar">Scalar.</param>
            <returns>Multiplied matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Multiply(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Matrix by vector multiplication (or vector transformation) operator.
            </summary>
            <param name="matrix">Matrix.</param>
            <param name="vector">Vector.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Multiply(AtomicusChart.Interface.Data.Matrix4F,AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Matrix by matrix multiplication operator.
            </summary>
            <param name="left">Left matrix.</param>
            <param name="right">Right matrix.</param>
            <returns>Matrix product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.op_Division(AtomicusChart.Interface.Data.Matrix4F,System.Single)">
            <summary>
            Matrix by scalar division operator.
            </summary>
            <param name="m">Matrix.</param>
            <param name="val">Scalar.</param>
            <returns>Divided matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Builds a matrix for translation by (x, y, z).
            </summary>
            <param name="x">Translation along OX.</param>
            <param name="y">Translation along OY.</param>
            <param name="z">Translation along OZ.</param>
            <returns>Translation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.GetWithNewTranslation(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a matrix for translation by (x, y, z).
            </summary>
            <returns>Translation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Translation(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a matrix for translation by vector vector.
            </summary>
            <param name="position">Translation vector.</param>
            <returns>Translation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="sx">X-scale.</param>
            <param name="sy">Y-scale.</param>
            <param name="sz">Z-scale.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Scaling(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="v">Scaling vector (x-scale, y-scale, z-scale).</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Scaling(System.Single)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="scale">Single scaling value for x,y,z.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Invert(AtomicusChart.Interface.Data.Matrix4F)">
             <summary>
             Calculates the inverse of the specified matrix.
             </summary>
             <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>Inverted matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.InvertRef(AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@)">
             <summary>
             Calculates the inverse of the specified matrix.
             </summary>
             <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">Result.</param>
            <returns>Inverted matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.Transpose(AtomicusChart.Interface.Data.Matrix4F@)">
             <summary>
             Transposes specified matrix.
             </summary>
             <param name="value">The matrix to transpose.</param>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.RotationAxis(AtomicusChart.Interface.Data.Vector3F,System.Double)">
            <summary>
            Builds matrix for counterclockwise rotation around the given axis.
            </summary>
            <param name="axis">
            Rotation axis.
            Note: Matrix4F.RotationAxis does not normalize vector same as DirectX.Matrix.RotationAxis.
            Be sure to normalize axis externally to get expected results.
            </param>
            <param name="angle">Rotation angle in radians.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.LookAtRightHanded(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Builds a right-handed look-at matrix. Analog to DirectX's Matrix.LookAtRH.
            </summary>
            <param name="cameraPosition">A Vector3D structure that defines the camera point. This value is used in translation.</param>
            <param name="cameraTarget">A Vector3D structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A Vector3D structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A Matrix4D structure that is a right-handed look-at matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.RotationBetweanAxes(System.Int32,System.Int32)">
            <summary>
            Get rotation matrix from vector that is definex by axis to another vector defined by other axis.
            </summary>
            <param name="fromAxisIndex">Index defining from-axis.</param>
            <param name="toAxesIndex">Index defining to-axis.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.GetTranslation">
            <summary>
            Get the matrix translation components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.TransformVector(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Matrix4F@)">
            <summary>
            Transform the vector using the speicifed matrix.
            </summary>
            <param name="vector">Source vector.</param>
            <param name="matrix">Transformation matrix</param>
            <returns>Result of transformation.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Matrix4F.MultiplyTo(AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@,AtomicusChart.Interface.Data.Matrix4F@)">
            <summary>
            Matrix by matrix multiplication operator.
            </summary>
            <param name="left">Left matrix.</param>
            <param name="right">Right matrix.</param>
            <param name="result">Result.</param>
            <returns>Matrix product.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.OneAxisBounds">
            <summary>
            Represents one axis bounds structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.OneAxisBounds.Min">
            <summary>
            Gets the bounds min value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.OneAxisBounds.Max">
            <summary>
            Gets the bounds max value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.OneAxisBounds.NonNegativeMin">
            <summary>
            Non-negative min value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.OneAxisBounds.PositiveMin">
            <summary>
            Positions min value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.OneAxisBounds"/>.
            </summary>
            <param name="min">Min value.</param>
            <param name="max">Max value.</param>
            <param name="nonNegativeMin">Non-negative min value.</param>
            <param name="positiveMin">Positive min value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.Contains(System.Single)">
            <summary>
            Returns true if the bounds contains the value.
            </summary>
            <param name="value">Value for checking.</param>
            <returns>True if is contained.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.GetInvalidBounds">
            <summary>
            Gets invalid instance of <see cref="T:AtomicusChart.Interface.Data.OneAxisBounds"/>.
            </summary>
            <returns>Invalid bounds.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.Merge(AtomicusChart.Interface.Data.OneAxisBounds@)">
            <summary>
            Merges the bounds.
            </summary>
            <param name="oneAxisBounds">External bounds.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.AddPoint(System.Single)">
            <summary>
            Add value to bounds.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.OneAxisBounds.GetScaled(AtomicusChart.Interface.AxesData.Common.DataScale)">
            <summary>
            Get scaled range.
            </summary>
            <param name="scale">Scale.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Plane">
            <summary>
            Represents geometric plane structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Plane.Origin">
            <summary>
            Origin of the plane.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Plane.Normal">
            <summary>
            Normal of the plane.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.#ctor(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.Plane"/>.
            </summary>
            <param name="origin">Origin of the plane.</param>
            <param name="normal">Normal to the plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.op_Equality(AtomicusChart.Interface.Data.Plane,AtomicusChart.Interface.Data.Plane)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Argument 1.</param>
            <param name="right">Argument 2.</param>
            <returns>True if equals, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.op_Inequality(AtomicusChart.Interface.Data.Plane,AtomicusChart.Interface.Data.Plane)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">Argument 1.</param>
            <param name="right">Argument 2.</param>
            <returns>True if unequal, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.Equals(AtomicusChart.Interface.Data.Plane)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Plane.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.PointAndSizeF">
            <summary>
            Contains rectangle information.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.PointAndSizeF.Left">
            <summary>
            Left corner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.PointAndSizeF.Top">
            <summary>
            Top corner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.PointAndSizeF.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.PointAndSizeF.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.PointAndSizeF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.PointAndSizeF"/>.
            </summary>
            <param name="left">Left corner.</param>
            <param name="top">Top corner.</param>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Data.PowerTransferFunction1D">
            <summary>
            Simple 1D transfer function. f(x) = pow(x, Power).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.PowerTransferFunction1D.Power">
            <summary>
            Gets or sets power.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.PowerTransferFunction1D.Clone">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.Data.PowerTransferFunction1D.SampleLinear(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.Data.Scales">
            <summary>
            Data scales.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Scales.Linear">
            <summary>
            Linear scales.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Scales.X">
            <summary>
            X-component.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Scales.Y">
            <summary>
            Y-component.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Scales.Z">
            <summary>
            Z-component.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Scales.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Scales.#ctor(AtomicusChart.Interface.AxesData.Common.DataScale,AtomicusChart.Interface.AxesData.Common.DataScale,AtomicusChart.Interface.AxesData.Common.DataScale)">
            <summary>
            Ctor.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="z">Z.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Scales.Equals(AtomicusChart.Interface.Data.Scales@)">
            <summary>
            Are to scales equal.
            </summary>
            <param name="other">Other.</param>
            <returns>Are equal.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.TransferFunction1D">
            <inheritdoc />
            <summary>
            Base type for transfer function 1D.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Data.TransferFunction1D.Changed">
            <summary>
            Gets intermediate points.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.TransferFunction1D.SampleLinear(System.Single)">
            <summary>
            Sample transfer function.
            </summary>
            <param name="value">Sample value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.TransferFunction1D.Clone">
            <summary>
            Creates clone of the function.
            </summary>
            <returns>Result of cloning.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.TransferFunction1D.OnChanged">
            <summary>
            Raise changed event.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Data.ITransferFunction1DOwner">
            <summary>
            Represents <see cref="P:AtomicusChart.Interface.Data.ITransferFunction1DOwner.TransferFunction1D"/> owner interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.ITransferFunction1DOwner.TransferFunction1D">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector2D">
            <summary>
            Vector with 2 float components.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2D.SizeOfData">
            <summary>
            Size of structure in bytes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2D.X">
            <summary>
            X.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2D.Y">
            <summary>
            Y.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="all">Components value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Addition(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Vector summation operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Sum vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Subtraction(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Vector subtraction operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Division(AtomicusChart.Interface.Data.Vector2D,System.Single)">
            <summary>
            Vector division operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="scalar">Division value.</param>
            <returns>Divided vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Multiply(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Vector multiplication operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Multiplied vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Multiply(System.Single,AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Vector multiplication operator.
            </summary>
            <param name="scalar">Scalar.</param>
            <param name="vector">Vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_UnaryNegation(AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Opposite vector operator.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Opposite vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.GetLength">
            <summary>
            Calculates vector length.
            </summary>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.GetSqueredLength">
            <summary>
            Calculates vector quered length.
            </summary>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector2D.Item(System.Int32)">
            <summary>
            Indexer that gets or sets a coordinate of vector.
            </summary>
            <param name="index">Index of coordinate (0 - X, 1 - Y).</param>
            <returns>Coordinate of vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index of component is out of range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.Equals(AtomicusChart.Interface.Data.Vector2D)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Equality(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.op_Inequality(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector2DRef">
            <inheritdoc />
            <summary>
            Vector2 double reference type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector2DRef.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector2DRef.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2DRef.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2DRef.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="E:AtomicusChart.Interface.Data.Vector2DRef.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector2F">
            <summary>
            Vector with 2 float components.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2F.SizeOfData">
            <summary>
            Size of structure in bytes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2F.X">
            <summary>
            X.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2F.Y">
            <summary>
            Y.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="all">Components value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Addition(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Vector summation operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Sum vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Subtraction(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Vector subtraction operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Division(AtomicusChart.Interface.Data.Vector2F,System.Single)">
            <summary>
            Vector division operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="scalar">Division value.</param>
            <returns>Divided vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Multiply(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Vector multiplication operator.
            </summary>
            <param name="left">First vector.</param>
            <param name="right">Second vector.</param>
            <returns>Multiplied vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Multiply(System.Single,AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Vector multiplication operator.
            </summary>
            <param name="scalar">Scalar.</param>
            <param name="vector">Vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_UnaryNegation(AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Opposite vector operator.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Opposite vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.GetLength">
            <summary>
            Calculates vector length.
            </summary>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.GetSqueredLength">
            <summary>
            Calculates vector quered length.
            </summary>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector2F.Item(System.Int32)">
            <summary>
            Indexer that gets or sets a coordinate of vector.
            </summary>
            <param name="index">Index of coordinate (0 - X, 1 - Y, 2 - Z).</param>
            <returns>Coordinate of vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index of component is out of range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.GetAbs">
            <summary>
            Get vector with abs components.
            </summary>
            <returns>Abs vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.IsAbsGreaterThanOne(System.Boolean@,System.Boolean@)">
            <summary>
            Compares the vector components with 1 value. Returns boolean results for each component.
            </summary>
            <param name="x">Result for X.</param>
            <param name="y">Result for Y.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.Equals(AtomicusChart.Interface.Data.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Equality(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.op_Inequality(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2F.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector2Int">
            <summary>
            Represents two-dimensional vector with integer components.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2Int.X">
            <summary>
            Gets X value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector2Int.Y">
            <summary>
            Gets Y value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Data.Vector2Int"/>.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.op_Subtraction(AtomicusChart.Interface.Data.Vector2Int,AtomicusChart.Interface.Data.Vector2Int)">
            <summary>
            Subtracts right vector from left vector.
            </summary>
            <param name="left">Left vector.</param>
            <param name="right">Right vector.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.GetMaxSideLength">
            <summary>
            Gets the vector max side length.
            </summary>
            <returns>Max size length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.op_Equality(AtomicusChart.Interface.Data.Vector2Int,AtomicusChart.Interface.Data.Vector2Int)">
            <summary>
            Equals operator.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.op_Inequality(AtomicusChart.Interface.Data.Vector2Int,AtomicusChart.Interface.Data.Vector2Int)">
            <summary>
            Unequal operator.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Is not equals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.Equals(AtomicusChart.Interface.Data.Vector2Int)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector2Int.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector3`1">
            <summary>
            Represents three-dimensional vector with generic component type.
            </summary>
            <typeparam name="T">Vector component type.</typeparam>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3`1.X">
            <summary>
            Gets or sets X.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3`1.Y">
            <summary>
            Gets or sets Y.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3`1.Z">
            <summary>
            Gets or sets Z.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector3`1.Item(System.Int32)">
            <summary>
            Indexer that gets or sets a coordinate of vector.
            </summary>
            <param name="index">Index of coordinate (0 - X, 1 - Y, 2 - Z).</param>
            <returns>Coordinate of vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index of component is out of range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Value for all components.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.#ctor(`0,`0,`0)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.ReplaceComponent(`0,System.Int32)">
            <summary>
            Get new vector with replaced component;
            </summary>
            <param name="newComponent">New component value.</param>
            <param name="index">New index value.</param>
            <returns>New vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.Equals(AtomicusChart.Interface.Data.Vector3{`0})">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.op_Equality(AtomicusChart.Interface.Data.Vector3{`0},AtomicusChart.Interface.Data.Vector3{`0})">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Argument 1.</param>
            <param name="right">Argument 2.</param>
            <returns>True if equals, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.op_Inequality(AtomicusChart.Interface.Data.Vector3{`0},AtomicusChart.Interface.Data.Vector3{`0})">
            <summary>
            Inequality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if unequal, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object. 
            </param>
            <filterpriority>2.</filterpriority>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.GenericExtensions">
            <summary>
            Extension for generic vector.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.GenericExtensions.GetFullSize(AtomicusChart.Interface.Data.Vector3{System.Int32})">
            <summary>
            Get multiplication of all components.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Product.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector3D">
            <summary>
            Definition of 3D vector of doubles and its algebra.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3D.X">
            <summary>
            X coordinate of vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3D.Y">
            <summary>
            Y coordinate of vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3D.Z">
            <summary>
            Z coordinate of vector.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.#ctor(System.Double)">
            <summary>
            Creates vector with X = Y = Z.
            </summary>
            <param name="all">Value for all coordinates.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.#ctor(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Creates vector, equal to source one.
            </summary>
            <param name="src">Source vector.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates vector with given coordinates.
            </summary>
            <param name="x">X coordinate value.</param>
            <param name="y">Y coordinate value.</param>
            <param name="z">Z coordinate value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.ToVector3F">
            <summary>
            Builds vector of floats from vector of doubles.
            Warning! Double/float conversions.
            </summary>
            <returns>Vector of floats.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Equals(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Compares this vector to other.
            </summary>
            <param name="oth">Other vector.</param>
            <returns>True, if vectors are equal, False otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.ToString">
            <summary>
            Overrides ToString(). 
            </summary>
            <returns>Human readable representation of coordinates "X:Y:Z".</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Equality(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>True, if vectors are equal, False otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Inequality(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>True, if vectors are not equal, False otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Addition(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Vector summation operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Sum vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Subtraction(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Vector subtraction operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_UnaryNegation(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Vector inversion operator.
            </summary>
            <param name="v">Vector.</param>
            <returns>Inverted vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Multiply(System.Double,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Vector by scalar multiplication operator.
            </summary>
            <param name="v">Vector.</param>
            <param name="val">Scalar.</param>
            <returns>Multiplied vector. </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.op_Division(AtomicusChart.Interface.Data.Vector3D,System.Double)">
            <summary>
            Vector by scalar division operator.
            </summary>
            <param name="v">Vector.</param>
            <param name="val">Scalar.</param>
            <returns>Divided vector. </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.GetLength(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Calculates vector length.
            </summary>
            <param name="v">Vector.</param>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.GetLength">
            <summary>
            Gets vector length.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Cross(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Calculates vectors cross.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Vectors cross.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Dot(AtomicusChart.Interface.Data.Vector3D,AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Calculates vectors dot product.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Vectors dot product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Dot(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Calculates vectors dot product.
            </summary>
            <param name="v2">Second vector.</param>
            <returns>Vectors dot product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.GetInverseLengt">
            <summary>
            Gets inverted vector length.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3D.Normalize(AtomicusChart.Interface.Data.Vector3D)">
            <summary>
            Returns normalized clone of given vector.
            </summary>
            <param name="v">Vector to normalize.</param>
            <returns>Normalized vector.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector3F">
            <summary>
            Definition of 3D vector of floats and its algebra.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.SizeOfData">
            <summary>
            Size of structure in bytes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.UnitX">
            <summary>
            Vector3F(1f, 0f, 0f) 
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.UnitY">
            <summary>
            Vector3F(0f, 1f, 0f)
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.UnitZ">
            <summary>
            new Vector3F(0f, 0f, 1f)
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.X">
            <summary>
            X coordinate of vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.Y">
            <summary>
            Y coordinate of vector.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector3F.Z">
            <summary>
            Z coordinate of vector.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector3F.Item(System.Int32)">
            <summary>
            Indexer that gets or sets a coordinate of vector.
            </summary>
            <param name="index">Index of coordinate (0 - X, 1 - Y, 2 - Z).</param>
            <returns>Coordinate of vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index of component is out of range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.#ctor(System.Single)">
            <summary>
            Creates vector with X = Y = Z.
            </summary>
            <param name="all">Value for all coordinates.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates vector with given coordinates.
            </summary>
            <param name="x">X coordinate value.</param>
            <param name="y">Y coordinate value.</param>
            <param name="z">Z coordinate value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Equals(AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Equality(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True, if vectors are equal, False - otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Inequality(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True, if vectors are not equal, False - otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.ToString">
            <summary>
            Overrides ToString(). 
            </summary>
            <returns>Human readable representation of coordinates "X:Y:Z".</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Addition(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector summation operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Sum vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Subtraction(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector subtraction operator.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Difference vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_UnaryNegation(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector inversion operator.
            </summary>
            <param name="v">Vector.</param>
            <returns>Inverted vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Multiply(System.Single,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector by scalar multiplication operator.
            </summary>
            <param name="scalar">Scalar.</param>
            <param name="vector">Vector.</param>
            <returns>Multiplied vector. </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Multiply(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector multiplied by vector by components.
            </summary>
            <param name="left">Vector.</param>
            <param name="right">Vector.</param>
            <returns>Multiplied vector. </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Division(AtomicusChart.Interface.Data.Vector3F,System.Single)">
            <summary>
            Vector by scalar division operator.
            </summary>
            <param name="vector">Vector.</param>
            <param name="scalar">Scalar.</param>
            <returns>Divided vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.op_Division(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Vector by vector (by component) division operator.
            </summary>
            <param name="vector">Vector.</param>
            <param name="divisor">Divisor.</param>
            <returns>Divided vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Cross(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Calculates vectors cross.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Vectors cross.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Cross(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Calculates cross of this vector (left) to another (right).
            </summary>
            <param name="right">Second (right) vector.</param>
            <returns>Vectors cross.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Dot(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Calculates vectors dot product.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>Vectors dot product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Dot(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Calculates dot product of this vector (left) to another (right).
            </summary>
            <param name="right">Second (right) vector.</param>
            <returns>Vectors dot product.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetSqrLength">
            <summary>
            Get squared length.
            </summary>
            <returns>Squared length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetLength">
            <summary>
            Calculates vector length.
            </summary>
            <returns>Vector length.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetNormalized">
            <summary>
            Gets result of the vector normalization.
            </summary>
            <returns>Normalized vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetAbs">
            <summary>
            Gets result of per-component absolute operation.
            </summary>
            <returns>Absolute vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.CompareAndGetMax(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Gets result of per-compoment vector max operation.
            </summary>
            <param name="other">Second vector.</param>
            <returns>Max vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.GetInverseLength">
            <summary>
            Calculates inverse vector length.
            </summary>
            <returns>Inverse vector length.</returns>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector3F.IsZero">
            <summary>
            Is Vector zero.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.IsCollinear(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Checks if two vectors are collinear.
            </summary>
            <param name="v1">First vector.</param>
            <param name="v2">Second vector.</param>
            <returns>True, if there is c () such v1 * c = v2.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.Lerp(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,System.Single)">
            <summary>
            Linearly interpolates between the vectors a and b by the interpolant t.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">B vector.</param>
            <param name="t">Interpolant.</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.PullMinValues(AtomicusChart.Interface.Data.Vector3F@)">
            <summary>
            Pull min values to this from other.
            </summary>
            <param name="other">Other vector.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.PullMaxValues(AtomicusChart.Interface.Data.Vector3F@)">
            <summary>
            Pull max values to this from other.
            </summary>
            <param name="other">Other vector.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.FillMinMax(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@)">
            <summary>
            Fill <paramref name="min"/> and <paramref name="max"/> from <paramref name="a"/> and <paramref name="b"/> parameters.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="min">Min o vectors componets.</param>
            <param name="max">Max o vectors componets.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector3F.ToVector3D">
            <summary>
            Converts the <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> to <see cref="T:AtomicusChart.Interface.Data.Vector3D"/>.
            </summary>
            <returns>Converted vector.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.Vector4`1">
            <summary>
            Generic Vector4 structure.
            </summary>
            <typeparam name="T">Vector components type.</typeparam>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector4`1.X">
            <summary>
            Gets or sets X.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector4`1.Y">
            <summary>
            Gets or sets Y.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector4`1.Z">
            <summary>
            Gets or sets Z.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.Vector4`1.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="val">Value for all components.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
            <param name="value">Value of point.</param>
        </member>
        <member name="P:AtomicusChart.Interface.Data.Vector4`1.Item(System.Int32)">
            <summary>
            Indexer that gets or sets a coordinate of vector.
            </summary>
            <param name="index">Index of coordinate (0 - X, 1 - Y, 2 - Z).</param>
            <returns>Coordinate of vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index of component is out of range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.Equals(AtomicusChart.Interface.Data.Vector4{`0})">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.op_Equality(AtomicusChart.Interface.Data.Vector4{`0},AtomicusChart.Interface.Data.Vector4{`0})">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Argument 1.</param>
            <param name="right">Argument 2.</param>
            <returns>True if equals, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.op_Inequality(AtomicusChart.Interface.Data.Vector4{`0},AtomicusChart.Interface.Data.Vector4{`0})">
            <summary>
            Inequality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if unequal, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object. 
            </param>
            <filterpriority>2.</filterpriority>
        </member>
        <member name="M:AtomicusChart.Interface.Data.Vector4`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:AtomicusChart.Interface.Data.VertexTriangle`1">
            <summary>
            Represents triangle constructed by three vertices structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.VertexTriangle`1.Vertex0">
            <summary>
            Gets first vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.VertexTriangle`1.Vertex1">
            <summary>
            Gets second vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Data.VertexTriangle`1.Vertex2">
            <summary>
            Gets third vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Data.VertexTriangle`1.#ctor(`0,`0,`0)">
            <summary>
            Constructs the triangle from three vertices.
            </summary>
            <param name="vertex0">The first vertex.</param>
            <param name="vertex1">The second vertex.</param>
            <param name="vertex2">The third vertex.</param>
        </member>
        <member name="P:AtomicusChart.Interface.Data.VertexTriangle`1.Item(System.Int32)">
            <summary>
            Gets or sets element at the specified position.
            </summary>
            <param name="index">Component index.</param>
            <returns>Component value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.VertexTriangle`1.op_Equality(AtomicusChart.Interface.Data.VertexTriangle{`0},AtomicusChart.Interface.Data.VertexTriangle{`0})">
            <summary>
            Equality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if equals, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.VertexTriangle`1.op_Inequality(AtomicusChart.Interface.Data.VertexTriangle{`0},AtomicusChart.Interface.Data.VertexTriangle{`0})">
            <summary>
            Inequality operator.
            </summary>
            <param name="a1">Argument 1.</param>
            <param name="a2">Argument 2.</param>
            <returns>True if unequal, otherwise false.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Data.VertexTriangle`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object. 
            </param>
            <filterpriority>2.</filterpriority>
        </member>
        <member name="M:AtomicusChart.Interface.Data.VertexTriangle`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.ArrowMeshFactory">
            <summary>
            Contains arrow mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.ArrowMeshFactory.GenerateArrow(System.Int32,System.Single,System.Single)">
            <summary>
            Create mesh for arrow primitive with start position [0, 0, 0] and direction along Z axis.
            </summary>
            <param name="resolution">Number of angles of the polygon that is used as circle.</param>
            <param name="radiusRatio">Radius of base divide to radius of cone.</param>
            <param name="TipToFullLengthRatio">Tip length devide by full arrow length.</param>
            <returns>Mesh of arrow.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.ArrowMeshFactory.GenerateArrowX(System.Int32,System.Single,System.Single)">
            <summary>
            Create mesh for arrow primitive with start position [0, 0, 0] and direction along X axis.
            </summary>
            <param name="resolution">Number of angles of the polygon that is used as circle.</param>
            <param name="radiusBaseToConeRatio">Radius of base divide to radius of cone.</param>
            <param name="heightBaseToConeRatio">Height of base divide to height of cone.</param>
            <returns>Mesh of arrow.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.ConeMeshFactory">
            <summary>
            Contains cone mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.ConeMeshFactory.GetCone(System.Int32)">
            <summary>
            Gets mesh for cone primitive. R =0.5f, 0.0.0 is in base center, oriented along Z-axis.
            </summary>
            <param name="resolution">Resolution of mesh.</param>
            <returns>Cone mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.CubeMeshFactory">
            <summary>
            Contains cube mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CubeMeshFactory.GenerateCube">
            <summary>
            Generates normalized cube mesh.
            </summary>
            <returns>Normalized cube mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.CylinderMeshFactory">
            <summary>
            Contains cylinder mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CylinderMeshFactory.CreateCylinder(System.Int32)">
            <summary>
            Create cylinder mesh along Z axis.
            </summary>
            <param name="resolution">Resolution of round elements.</param>
            <returns>Unit cyllinder mesh with normals along Z axis</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.DiskMeshFactory">
            <summary>
            Contains disk mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.DiskMeshFactory.CreateDisk(System.Int32)">
            <summary>
            Getting disk mesh.
            </summary>
            <param name="resolution">Number of angles in polygon that is used instead of circle.</param>
            <returns>Disk mesh.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.MatrixHelper.RotationFromDirection(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Get rotation matrix from new direction if old direction was 0,0,1
            </summary>
            <param name="newDirection">new direction.</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CircularMeshFactory.GetNumberOfCircleBaseIndices(System.Int32)">
            <summary>
            Gets number of circle base indices for the specified resolution.
            </summary>
            <param name="resolution">Circle resolution.</param>
            <returns>Count of base indices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CircularMeshFactory.WriteCircleBaseIndices(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write indices for circle mesh generated using WriteCircle methods. Number of generated indices = (resolution / 2 - 1) * 6 + (resolution % 2 == 0 ? 0 : 3).
            </summary>
            <param name="indices"></param>
            <param name="offset"></param>
            <param name="indexOffset"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CircularMeshFactory.WriteCylinderWireIndices(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write indices for cylinder mesh generated using  pair of WriteCircle methods. Number of generated indices = resolution * 2.
            </summary>
            <param name="indices"></param>
            <param name="offset"></param>
            <param name="indexOffset"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CircularMeshFactory.WriteCircleWireIndices(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write indices for cylinder mesh generated using  pair of WriteCircle methods. Number of generated indices = resolution * 2.
            </summary>
            <param name="indices"></param>
            <param name="offset"></param>
            <param name="indexOffset"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.CircularMeshFactory.WriteCircleBaseWireIndices(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write indices for circle mesh generated using WriteCircle methods. Number of generated indices = (resolution / 2 ) * 2 -2.
            </summary>
            <param name="indices"></param>
            <param name="offset"></param>
            <param name="indexOffset"></param>
            <param name="resolution"></param>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory">
            <summary>
            Contains prism mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.GetPrismGeometry(AtomicusChart.Interface.Data.Vector2F[],AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Generates Prism mesh for given parameters.
            </summary>
            <param name="side">Vertexes of Prism bottom side (basis).</param>
            <param name="bottomToTopVector">Prism axis direction.</param>
            <exception cref="T:System.ArgumentException">Mesh creation exception.</exception>
            <returns>Generated Prism Mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator">
            <summary>
            Static class for triangulation of polygons which are presented by enumeration of their vertex.
            Works for majority of polygons (including non-convex).
            Doesn't work if polygon has self crossings.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.PolygonVertex">
            <summary>
            Internal structure to store polygon vertex and its original index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.PolygonVertex.Vertex">
            <summary>
            VertexPosNormCol.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.PolygonVertex.Index">
            <summary>
            Original index.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.Triangle">
            <summary>
            Internal structure to store triangle.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.Triangle.IndexA">
            <summary>
            Index of 1st triangle vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.Triangle.IndexB">
            <summary>
            Index of 2nd triangle vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.Triangle.IndexC">
            <summary>
            Index of 3d triangle vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.GetTriangulationIndexesList(System.Collections.Generic.ICollection{AtomicusChart.Interface.Data.Vector3F},System.Boolean)">
            <summary>
            Calculates triangulation for given polygon.
            </summary>
            <param name="polygon">Polygon vertexes (must be sequential).</param>
            <param name="ccw">If true, vertexes sequence is treated as clockwise, otherwise as counter clockwise.</param>
            <returns>Indexes array.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.PrismMeshFactory.PolygonTriangulator.GetAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the angle ABC (between PI and -PI).
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.PyramidMeshFactory">
            <summary>
            Contains pyramid mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.PyramidMeshFactory.CreateFourSidePyramid">
            <summary>
            Creates four-side pyramid mesh.
            </summary>
            <returns>Four-side pyramid mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.SemisphereMeshFactory">
            <summary>
            Contains semisphere mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.SemisphereMeshFactory.GetSemisphere(System.Int32,System.Boolean)">
            <summary>
            Generates sphere mesh for given parameters.
            </summary>
            <param name="iterations">Level of details of the sphere.</param>
            <param name="drawBase">True if it's necessary to draw the bottom of the semisphere.</param>
            <returns>Sphere Mesh.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.SemisphereMeshFactory.ResolutionToIterations(System.Int32)">
            <summary>
            Convert resolution to number sphere iterations.
            </summary>
            <param name="resolution">Desired number of points on circle curve.</param>
            <returns>Number of iterations.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.SphereMeshFactory">
            <summary>
            Sphere mesh geometry generator.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.SphereMeshFactory.GetSphere(System.Int32)">
            <summary>
            Generates sphere mesh for given parameters.
            </summary>
            <param name="iterations">Level of details of the sphere. Each iteration increases detail level(number of triangles) in 4 times.</param>
            <returns>Sphere Mesh.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.SphereMeshFactory.ResolutionToIterations(System.Int32)">
            <summary>
            Convert resolution to number sphere iterations.
            </summary>
            <param name="resolution">Desired number of points on circle curve.</param>
            <returns>Number of iterations.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.TetrahedronMeshFactory">
            <summary>
            Contains methods for generating tetrahedron mesh.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TetrahedronMeshFactory.CreateTetrahedron">
            <summary>
            Create tetrahedron mesh.
            </summary>
            <returns>Tetrahedron mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.TorusMeshFactory">
            <summary>
            Contains torus mesh generation helper methods.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TorusMeshFactory.GenerateTorus(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Create mesh for arrow primitive with start position [0, 0, 0] and direction along Z axis.
            </summary>
            <param name="resolution">Number of angles of the polygon that is used as circle.</param>
            <param name="resolutionSmall">Resolution for small part</param>
            <param name="r">Torus radius</param>
            <param name="rSmall">Torus small part radius</param>
            <returns>Mesh of arrow.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.GeometryFactory.TubeMeshFactory">
            <summary>
            Contains methods for tube mesh generation.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TubeMeshFactory.GetTube(System.Int32,System.Single,AtomicusChart.Interface.Data.Color4,AtomicusChart.Interface.Data.Color4)">
            <summary>
            Get tube mesh for link primitive. Started at [0; 0; -0.5] ended at [0; 0; 0.5].
            </summary>
            <param name="resolution">Resolution of mesh.</param>
            <param name="ratio">Ratio (0..1) between tube parts.</param>
            <param name="col1">First color.</param>
            <param name="col2">Second color.</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TubeMeshFactory.GetTube(System.Int32)">
            <summary>
            Get tube mesh with center of mesh in [0; 0; 0].
            </summary>
            <param name="resolution">Tube resolution.</param>
            <returns>Generated tube.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TubeMeshFactory.GetTubeTransform(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Get specific to tube transform that tube will connect to points.
            </summary>
            <param name="point1">Point 1.</param>
            <param name="point2">Point 2.</param>
            <returns>Tranformation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.GeometryFactory.TubeMeshFactory.GetTubeTransform(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,System.Single)">
            <summary>
            Get specific to tube transform that tube will connect to points.
            </summary>
            <param name="point1">Point 1.</param>
            <param name="point2">Point 2.</param>
            <param name="r">Radius.</param>
            <returns>Tranformation matrix.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Geometry.CustomTextureGeometry">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Geometry.TextureGeometry"/> presented as custom <see cref="T:AtomicusChart.Interface.Geometry.TextureMesh"/>.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Geometry.CustomTextureGeometry.Mesh">
            <summary>
            Gets or sets the geometry mesh.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Geometry.CustomTextureGeometry.GetMesh">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Geometry.RectTextureGeometry">
            <summary>
            Represents rectangle texture geometry implementation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Geometry.RectTextureGeometry.Origin">
            <summary>
            Gets or sets the geometry origin.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Geometry.RectTextureGeometry.Size">
            <summary>
            Gets or sets the rectangle size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Geometry.RectTextureGeometry.DirectionX">
            <summary>
            Gets or sets the rectangle X direction. This vector must be normalized.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Geometry.RectTextureGeometry.DirectionY">
            <summary>
            Gets or sets the rectangle X direction. This vector must be normalized.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Geometry.RectTextureGeometry.GetMesh">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Geometry.TextureGeometry">
            <summary>
            Represents base class for textured geometry class.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Geometry.TextureGeometry.MeshChanged">
            <summary>
            This event is invoked whenever the mesh has changed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Geometry.TextureGeometry.OnMeshChanged">
            <summary>
            Invoke the method to notify about the geometry mesh changes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Geometry.TextureGeometry.GetMesh">
            <summary>
            Generates the geometry mesh.
            </summary>
            <returns>Generated textured mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Geometry.TextureMesh">
            <summary>
            Represents textured mesh geometry container class.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Geometry.TextureMesh.#ctor(AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.Data.Vector2F[],System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Geometry.TextureMesh"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="textureCoordinates">Texture coordinates array.</param>
            <param name="indices">Indices array.</param>
        </member>
        <member name="F:AtomicusChart.Interface.Geometry.TextureMesh.Accessor">
            <summary>
            Gets the mesh geometry accessor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.ISingleColorOwner">
            <summary>
            Contains single color with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.ISingleColorOwner.Color">
            <summary>
            Gets or sets the object color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.IContoursOwner">
            <summary>
            Contains <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:AtomicusChart.Interface.Data.Contour"/>-s with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.IContoursOwner.Contours">
            <summary>
            Gets the object contours collection.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.IColorHighlightable">
            <summary>
            Represents highlight color owner interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.IColorHighlightable.HighlightColor">
            <summary>
            Gets or sets highlight color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IActionController">
            <summary>
            Provides action handlers registration methods.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IActionController.InteractionPickingStrategy">
            <summary>
            Picking strategy. Can be null.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IActionController.IsRenderDataInteractionEnabled">
            <summary>
            Is enabled interaction with render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IActionController.InteractionResolver">
            <summary>
            Interaction resolver.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IActionController.RegisterHandler(System.Int32,AtomicusChart.Interface.Interaction.IEventListener)">
            <summary>
            Register handler of events.
            </summary>
            <param name="priority">Priority of handler. Define order of calling eventListeners.</param>
            <param name="listener">Event listener.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IActionController.RemoveHandler(AtomicusChart.Interface.Interaction.IEventListener)">
            <summary>
            Remove event listener from event processing queue.
            </summary>
            <param name="eventsListener">Listener for remove.</param>
            <returns>True - listener was removed. False - there is no such listener.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IChartEventArg">
            <summary>
            Event arguments of the chart.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IChartEventArg.InteractorEventArg">
            <summary>
            InteractorEventArg.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.GetViewInfo">
            <summary>
            Gets the camera scaled view parameters.
            </summary>
            <returns>Current view parameters.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.CrossWithPlane(AtomicusChart.Interface.Data.Vector2F,System.ValueTuple{AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F},System.Boolean@)">
            <summary>
            Tries to cross screen ray with custom plane.
            </summary>
            <param name="onScreenLocation">Screen relative coordinates.</param>
            <param name="customPlane">Custom plane information.</param>
            <param name="isParallel">True if objects are parallel.</param>
            <returns>Result of intersection.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.CrossWithLookAtPlane(AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector3F,System.Boolean@)">
            <summary>
            Tries to cross screen ray with the camera look-at plane.
            </summary>
            <param name="onScreenLocation">Screen relative coordinates.</param>
            <param name="planePoint">Point on look-at plane.</param>
            <param name="isParallel">True if the objects are parallel.</param>
            <returns>Result of intersection.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.CrossWithLookAtPlane(AtomicusChart.Interface.Data.Vector2F)">
            <summary>
            Tries to cross screen ray with the camera look-at plane.
            </summary>
            <param name="onScreenLocation">Screen relative coordinates.</param>
            <returns>Result of intersection.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.CrossWithLookAtPlane">
            <summary>
            Tries to cross screen ray from current cursor position with the camera look-at plane.
            </summary>
            <returns>Result of intersection.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.Scale(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Gets linear presentation of the specified position (performs scaling according to current chart).
            </summary>
            <param name="point">Source position.</param>
            <returns>Linear position.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.Unscale(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Gets linear presentation of the specified position (performs unscaling according to current chart)..
            </summary>
            <param name="point">Source position.</param>
            <returns>Linear position.</returns>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IChartEventArg.IsCaptured">
            <summary>
            Was event captured.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.Capture">
            <summary>
            Capture interaction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IChartEventArg.Release">
            <summary>
            Release interaction.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IEventListener">
            <summary>
            Listener of events.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseDown(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseDown handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseUp(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseUp handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseMove(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseMove handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseEnter(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseEnter handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseLeave(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseLeave handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseDoubleClick(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseDoubleClick handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.MouseWheel(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            MouseWheel handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.KeyDown(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            KeyDown handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IEventListener.KeyUp(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            KeyUp handler.
            </summary>
            <param name="arg">Event information.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IInteractionContext">
            <summary>
            Interaction context.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInteractionContext.StarProcessing(AtomicusChart.Interface.Interaction.InteractorEventArg)">
            <summary>
            Start process actions.
            </summary>
            <param name="interactorEventArg">InteractorEventArg.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInteractionContext.Move(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            Interaction moving.
            </summary>
            <param name="arg">ChartEventArg.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInteractionContext.StopWork(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            Stop interaction.
            </summary>
            <param name="arg">ChartEventArg.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IInteractionShortActionHandler">
            <summary>
            Interaction context.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInteractionShortActionHandler.HandleAction(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            Handle action.
            </summary>
            <param name="arg">ChartEventArg.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.InCirclePickingStrategy">
            <summary>
            Picking in circle.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InCirclePickingStrategy.CircleRadius">
            <summary>
            Radius of selection circle. Less or equals than 0.5 is equivalent to picking on one pixel.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.InteractorEventArg">
            <summary>
            Interactor event arguments.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractorEventArg.CursorType">
            <summary>
            Type of cursor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractorEventArg.KeyboardMask">
            <summary>
            Mask of pressed keyboard keys.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractorEventArg.MouseMask">
            <summary>
            Mask of pressed mouse keys.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.Hotkeys">
            <summary>
            Pressed hotkeys.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.CtrlPressed">
            <summary>
            Indicates if Ctrl is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.ShiftPressed">
            <summary>
            Indicates if Shift is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.AltPressed">
            <summary>
            Indicates if Alt is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.LmbPressed">
            <summary>
            Indicates if left mouse button is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.RmbPressed">
            <summary>
            Indicates if right mouse button is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.MmbPressed">
            <summary>
            Indicates if middle mouse button is pressed.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.WheelDelta">
            <summary>
            Mouse wheel delta. Usually this is values like +120, -120.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.PixelLocation">
            <summary>
            Mouse pixel location on control. Measured from (0,0).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.RelativeLocation">
            <summary>
            Relative mouse location on render area (or render panel).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.KeyBoardKey">
            <summary>
            Changed keyboard key.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractorEventArg.IsCursorOnChart">
            <summary>
            Is cursor on chart.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.InteractorEventArg.IsHandled">
            <summary>
            Was event handled by observer and shouldn't be processed by GUI framework.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.InteractorEventArg.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,AtomicusChart.Interface.Data.Vector2Int,AtomicusChart.Interface.Data.Vector2F,System.Boolean,AtomicusChart.Interface.Interaction.CursorType,AtomicusChart.Interface.Interaction.Keys)">
            <summary>
            Constructor.
            </summary>
            <param name="ctrlPressed">Indicates if Ctrl is pressed.</param>
            <param name="shiftPressed">Indicates if Shift is pressed.</param>
            <param name="altPressed">Indicates if Alt is pressed.</param>
            <param name="lmbPressed">Indicates if left mouse button is pressed.</param>
            <param name="rmbPressed">Indicates if right mouse button is pressed.</param>
            <param name="mmbPressed">Indicates if middle mouse button is pressed.</param>
            <param name="wheelDelta">Mouse wheel delta.</param>
            <param name="pixelLocation">Mouse pixel location on control.</param>
            <param name="relativeLocation">Relative mouse location on render area (or render panel).</param>
            <param name="isCursorOnChart">Is cursor on chart.</param>
            <param name="cursorType">Cursor type.</param>
            <param name="keyBoardKey"></param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.InteractorEventArg.HandleEvent">
            <summary>
            Set event as handled.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.CursorType">
            <summary>
            Type of cursor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.Arrow">
            <summary>A standard arrow cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.No">
            <summary>A cursor with which indicates that a particular region is invalid for a given operation.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.AppStarting">
            <summary>A standard arrow with small hourglass cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.Cross">
            <summary>A crosshair cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.Help">
            <summary>A help cursor. </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.IBeam">
            <summary>A text I-Beam cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.SizeAll">
            <summary>A cursor with arrows pointing north, south, east, and west.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.SizeNESW">
            <summary>A cursor with arrows pointing northeast and southwest.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.SizeNS">
            <summary>A cursor with arrows pointing north and south.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.SizeNWSE">
            <summary>A cursor with arrows pointing northwest and southeast.  </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.SizeWE">
            <summary>A cursor with arrows pointing west and east.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.UpArrow">
            <summary>A vertical arrow cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.Wait">
            <summary>An hourglass cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.Hand">
            <summary>A hand cursor.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollNS">
            <summary>A scrolling cursor with arrows pointing north and south.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollWE">
            <summary>A scrolling cursor with arrows pointing west and east.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollAll">
            <summary>A scrolling cursor with arrows pointing north, south, east, and west.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollN">
            <summary>A scrolling cursor with an arrow pointing north.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollS">
            <summary>A scrolling cursor with an arrow pointing south.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollW">
            <summary>A scrolling cursor with an arrow pointing west.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollE">
            <summary>A scrolling cursor with an arrow pointing east.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollNW">
            <summary>A scrolling cursor with arrows pointing north and west.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollNE">
            <summary>A scrolling cursor with arrows pointing north and east.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollSW">
            <summary>A scrolling cursor with arrows pointing south and west.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.CursorType.ScrollSE">
            <summary>A scrolling cursor with arrows pointing south and east.</summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.KeyboardMask">
            <summary>
            Mask of pressed keyboard keys.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.KeyboardMask.None">
            <summary>
            No pressed hotkey.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.KeyboardMask.Ctrl">
            <summary>
            Ctrl.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.KeyboardMask.Shift">
            <summary>
            Shift.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.KeyboardMask.Alt">
            <summary>
            Alt.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.MouseMask">
            <summary>
            Mask of pressed mouse keys.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseMask.None">
            <summary>
            No pressed hotkey.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseMask.Left">
            <summary>
            Left mouse button.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseMask.Right">
            <summary>
            Right mouse button.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseMask.Middle">
            <summary>
            Middle mouse button.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.Hotkeys">
            <summary>
            Pair of mouse and keyboard hotkey.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Hotkeys.KeyboardMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Hotkeys.MouseMask">
            <summary>
            Mouse mask of hotkey.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.#ctor(AtomicusChart.Interface.Interaction.KeyboardMask,AtomicusChart.Interface.Interaction.MouseMask)">
            <summary>
            Constructor
            </summary>
            <param name="keyboardMask">Mask of keyboard.</param>
            <param name="mouseMask">Mask of mouse keys.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.op_Equality(AtomicusChart.Interface.Interaction.Hotkeys,AtomicusChart.Interface.Interaction.Hotkeys)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Is objects equal.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.op_Inequality(AtomicusChart.Interface.Interaction.Hotkeys,AtomicusChart.Interface.Interaction.Hotkeys)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Is objects unequal.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.Equals(AtomicusChart.Interface.Interaction.Hotkeys)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.Hotkeys.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.MouseKey">
            <summary>
            Mouse buttons enum.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseKey.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseKey.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseKey.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseKey.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.MouseKey.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IInterctionResolver">
            <summary>
            Helps to resolve interaction contexts.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInterctionResolver.RegisterContextCreator(System.Boolean,AtomicusChart.Interface.Interaction.Hotkeys,AtomicusChart.Interface.Interaction.InteractionContextCreationDelegate)">
            <summary>
            Register context creator.
            </summary>
            <param name="mode2D">Is mode 2d.</param>
            <param name="hotkeys">Hotkey parameters.</param>
            <param name="contextCreator">Creator of context.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IInterctionResolver.RegisterShortAction(System.Boolean,AtomicusChart.Interface.Interaction.KeyboardMask,AtomicusChart.Interface.Interaction.ShotInteractionsActionTypes,AtomicusChart.Interface.Interaction.IInteractionShortActionHandler)">
            <summary>
            Register short action handler.
            </summary>
            <param name="mode2D">Is mode 2d.</param>
            <param name="keyboardMask">Keyboeard mask.</param>
            <param name="shotInteractionsActionType">Type of action.</param>
            <param name="shortActionHandler">Handler.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.InteractionContextCreationDelegate">
            <summary>
            Delegate for creation INteraction context.
            </summary>
            <param name="arg">Arguement.</param>
            <returns>Interaction context.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.ShotInteractionsActionTypes">
            <summary>
            Types of show interaction actions.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.ShotInteractionsActionTypes.MouseDoubleClick">
            <summary>
            Double click.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.ShotInteractionsActionTypes.MouseWheel">
            <summary>
            Mouse wheel.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument">
            <summary>
            Argument for <see cref="T:AtomicusChart.Interface.Interaction.IInteractionContext"/> creation.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument.ContextView">
            <summary>
            Context view.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument.SelectionRectangle">
            <summary>
            Selection rectangle.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument.ScreenRatioInfo">
            <summary>
            ScreenRatioInfo.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument.DataScalingOwner">
            <summary>
            Data scaling owner.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.InteractionContextCreationArgument.#ctor(AtomicusChart.Interface.CameraView.ContextView,AtomicusChart.Interface.Interaction.SelectionRectangle,AtomicusChart.Interface.CameraView.IScreenRatioInfo,AtomicusChart.Interface.CameraView.IDataScalingOwner)">
            <summary>
            Ctor.
            </summary>
            <param name="contextView">Context view.</param>
            <param name="selectionRectangle">Selection rectangle.</param>
            <param name="screenRatioInfo">ScreenRatioInfo.</param>
            <param name="dataScalingOwner">DataScaling owner.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IPickingStrategy">
            <summary>
            Interface which declares how to picking for particular cursor position is executed.
            By default picking search for a <see cref="T:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData"/> only in the particular pixel position.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IPickingStrategy.SelectData(AtomicusChart.Interface.Data.Vector2Int,AtomicusChart.Interface.Interaction.IPickMap)">
            <summary>
            Select data from pickMap.
            </summary>
            <param name="pixelLocation">Location of pixel.</param>
            <param name="pickMap">Pick map.</param>
            <returns>Selected pick data.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.IPickMap">
            <summary>
            Pickmap.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IPickMap.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.IPickMap.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.IPickMap.TryGetPickData(AtomicusChart.Interface.Data.Vector2Int,System.Boolean@)">
            <summary>
            Pick in pixel.
            Performance comment: '(x, y)' and '(x + 1, y)' pixel lies in the same row.
            </summary>
            <param name="pixelLocation">Location on pickMap.</param>
            <param name="isInPickMap">Was pixel in the pick map.</param>
            <returns>Picking result.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.Keys">
            <summary>
            Enum for keys.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.KeyCode">
            <summary>The bitmask to extract a key code from a key value.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Modifiers">
            <summary>The bitmask to extract modifiers from a key value.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.None">
            <summary>No key pressed.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LButton">
            <summary>The left mouse button.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.RButton">
            <summary>The right mouse button.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Cancel">
            <summary>The CANCEL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.MButton">
            <summary>The middle mouse button (three-button mouse).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.XButton1">
            <summary>The first x mouse button (five-button mouse).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.XButton2">
            <summary>The second x mouse button (five-button mouse).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Back">
            <summary>The BACKSPACE key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Tab">
            <summary>The TAB key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LineFeed">
            <summary>The LINEFEED key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Clear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Return">
            <summary>The RETURN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Enter">
            <summary>The ENTER key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.ShiftKey">
            <summary>The SHIFT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.ControlKey">
            <summary>The CTRL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Menu">
            <summary>The ALT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Pause">
            <summary>The PAUSE key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Capital">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.CapsLock">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.KanaMode">
            <summary>The IME Kana mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.HanguelMode">
            <summary>The IME Hanguel mode key. (maintained for compatibility; use <see langword="HangulMode" />) </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.HangulMode">
            <summary>The IME Hangul mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.JunjaMode">
            <summary>The IME Junja mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.FinalMode">
            <summary>The IME final mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.HanjaMode">
            <summary>The IME Hanja mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.KanjiMode">
            <summary>The IME Kanji mode key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Escape">
            <summary>The ESC key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.IMEConvert">
            <summary>The IME convert key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.IMENonconvert">
            <summary>The IME nonconvert key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.IMEAccept">
            <summary>The IME accept key, replaces <see cref="F:System.Windows.Forms.Keys.IMEAceept" />.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.IMEAceept">
            <summary>The IME accept key. Obsolete, use <see cref="F:System.Windows.Forms.Keys.IMEAccept" /> instead.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.IMEModeChange">
            <summary>The IME mode change key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Space">
            <summary>The SPACEBAR key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Prior">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.PageUp">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Next">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.PageDown">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.End">
            <summary>The END key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Home">
            <summary>The HOME key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Left">
            <summary>The LEFT ARROW key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Up">
            <summary>The UP ARROW key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Right">
            <summary>The RIGHT ARROW key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Down">
            <summary>The DOWN ARROW key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Select">
            <summary>The SELECT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Print">
            <summary>The PRINT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Execute">
            <summary>The EXECUTE key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Snapshot">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.PrintScreen">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Insert">
            <summary>The INS key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Delete">
            <summary>The DEL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Help">
            <summary>The HELP key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D0">
            <summary>The 0 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D1">
            <summary>The 1 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D2">
            <summary>The 2 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D3">
            <summary>The 3 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D4">
            <summary>The 4 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D5">
            <summary>The 5 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D6">
            <summary>The 6 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D7">
            <summary>The 7 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D8">
            <summary>The 8 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D9">
            <summary>The 9 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.A">
            <summary>The A key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.B">
            <summary>The B key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.C">
            <summary>The C key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.D">
            <summary>The D key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.E">
            <summary>The E key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F">
            <summary>The F key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.G">
            <summary>The G key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.H">
            <summary>The H key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.I">
            <summary>The I key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.J">
            <summary>The J key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.K">
            <summary>The K key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.L">
            <summary>The L key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.M">
            <summary>The M key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.N">
            <summary>The N key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.O">
            <summary>The O key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.P">
            <summary>The P key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Q">
            <summary>The Q key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.R">
            <summary>The R key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.S">
            <summary>The S key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.T">
            <summary>The T key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.U">
            <summary>The U key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.V">
            <summary>The V key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.W">
            <summary>The W key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.X">
            <summary>The X key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Y">
            <summary>The Y key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Z">
            <summary>The Z key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LWin">
            <summary>The left Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.RWin">
            <summary>The right Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Apps">
            <summary>The application key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Sleep">
            <summary>The computer sleep key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad0">
            <summary>The 0 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad1">
            <summary>The 1 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad2">
            <summary>The 2 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad3">
            <summary>The 3 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad4">
            <summary>The 4 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad5">
            <summary>The 5 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad6">
            <summary>The 6 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad7">
            <summary>The 7 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad8">
            <summary>The 8 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumPad9">
            <summary>The 9 key on the numeric keypad.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Multiply">
            <summary>The multiply key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Add">
            <summary>The add key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Separator">
            <summary>The separator key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Subtract">
            <summary>The subtract key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Decimal">
            <summary>The decimal key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Divide">
            <summary>The divide key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F1">
            <summary>The F1 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F2">
            <summary>The F2 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F3">
            <summary>The F3 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F4">
            <summary>The F4 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F5">
            <summary>The F5 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F6">
            <summary>The F6 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F7">
            <summary>The F7 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F8">
            <summary>The F8 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F9">
            <summary>The F9 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F10">
            <summary>The F10 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F11">
            <summary>The F11 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F12">
            <summary>The F12 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F13">
            <summary>The F13 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F14">
            <summary>The F14 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F15">
            <summary>The F15 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F16">
            <summary>The F16 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F17">
            <summary>The F17 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F18">
            <summary>The F18 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F19">
            <summary>The F19 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F20">
            <summary>The F20 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F21">
            <summary>The F21 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F22">
            <summary>The F22 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F23">
            <summary>The F23 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.F24">
            <summary>The F24 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NumLock">
            <summary>The NUM LOCK key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Scroll">
            <summary>The SCROLL LOCK key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LShiftKey">
            <summary>The left SHIFT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.RShiftKey">
            <summary>The right SHIFT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LControlKey">
            <summary>The left CTRL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.RControlKey">
            <summary>The right CTRL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LMenu">
            <summary>The left ALT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.RMenu">
            <summary>The right ALT key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserBack">
            <summary>The browser back key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserForward">
            <summary>The browser forward key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserRefresh">
            <summary>The browser refresh key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserStop">
            <summary>The browser stop key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserSearch">
            <summary>The browser search key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserFavorites">
            <summary>The browser favorites key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.BrowserHome">
            <summary>The browser home key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.VolumeMute">
            <summary>The volume mute key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.VolumeDown">
            <summary>The volume down key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.VolumeUp">
            <summary>The volume up key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.MediaNextTrack">
            <summary>The media next track key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.MediaPreviousTrack">
            <summary>The media previous track key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.MediaStop">
            <summary>The media Stop key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.MediaPlayPause">
            <summary>The media play pause key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LaunchMail">
            <summary>The launch mail key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.SelectMedia">
            <summary>The select media key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LaunchApplication1">
            <summary>The start application one key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.LaunchApplication2">
            <summary>The start application two key (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemSemicolon">
            <summary>The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem1">
            <summary>The OEM 1 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oemplus">
            <summary>The OEM plus key on any country/region keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oemcomma">
            <summary>The OEM comma key on any country/region keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemMinus">
            <summary>The OEM minus key on any country/region keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemPeriod">
            <summary>The OEM period key on any country/region keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemQuestion">
            <summary>The OEM question mark key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem2">
            <summary>The OEM 2 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oemtilde">
            <summary>The OEM tilde key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem3">
            <summary>The OEM 3 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemOpenBrackets">
            <summary>The OEM open bracket key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem4">
            <summary>The OEM 4 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemPipe">
            <summary>The OEM pipe key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem5">
            <summary>The OEM 5 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemCloseBrackets">
            <summary>The OEM close bracket key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem6">
            <summary>The OEM 6 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemQuotes">
            <summary>The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem7">
            <summary>The OEM 7 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem8">
            <summary>The OEM 8 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemBackslash">
            <summary>The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Oem102">
            <summary>The OEM 102 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.ProcessKey">
            <summary>The PROCESS KEY key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Packet">
            <summary>Used to pass Unicode characters as if they were keystrokes. The Packet key value is the low word of a 32-bit virtual-key value used for non-keyboard input methods.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Attn">
            <summary>The ATTN key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Crsel">
            <summary>The CRSEL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Exsel">
            <summary>The EXSEL key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.EraseEof">
            <summary>The ERASE EOF key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Play">
            <summary>The PLAY key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Zoom">
            <summary>The ZOOM key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.NoName">
            <summary>A constant reserved for future use.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Pa1">
            <summary>The PA1 key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.OemClear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Shift">
            <summary>The SHIFT modifier key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Control">
            <summary>The CTRL modifier key.</summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.Keys.Alt">
            <summary>The ALT modifier key.</summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.SelectionRectangle">
            <summary>
            Selection rectangle settings.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.SelectionRectangle.DefaultMainAreColor">
            <summary>
            Default value for MainAreColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.SelectionRectangle.DefaultAxisAreaColor">
            <summary>
            Default value for AxisAreaColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.SelectionRectangle.DefaultInvalidAreaColor">
            <summary>
            Default value for InvalidAreaColor.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.SelectionRectangle.DefaultOpacity">
            <summary>
            Default value for Opacity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.SelectionRectangle.MainAreColor">
            <summary>
            Color of amin area.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.SelectionRectangle.AxisAreaColor">
            <summary>
            Color of axes area.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.SelectionRectangle.InvalidAreaColor">
            <summary>
            Color for invalid area.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.SelectionRectangle.Opacity">
            <summary>
            Opacity o area.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.SelectionRectangle.#ctor(System.Action)">
            <summary>
            Ctor.
            </summary>
            <param name="changed">On changed.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.SelectionRectangle.SetRectangle(AtomicusChart.Interface.Interaction.AreaType,AtomicusChart.Interface.Data.Margins4F)">
            <summary>
            Set rectangle.
            </summary>
            <param name="newAreaType">Area type.</param>
            <param name="newArea">Area.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.SelectionRectangle.Disable">
            <summary>
            Hide selection rectangle.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.SelectionRectangle.GetColors">
            <summary>
            Rectangle info.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.AreaType">
            <summary>
            Type of area.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.AreaType.Main">
            <summary>
            Main area.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.AreaType.Axis">
            <summary>
            On axis area.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.AreaType.Invalid">
            <summary>
            Invalid rectangle.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor">
            <summary>
            Represents base logic implementation of interactor used for click tracking as extension of <see cref="T:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor"/>.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor.LastMouseDownMask">
            <summary>
            Gets last mouse-down event <see cref="T:AtomicusChart.Interface.Interaction.MouseMask"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor.MouseDown(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor.MouseMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseClickableInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor">
            <summary>
            Represents base logic of interactor used for mouse enter/leave tracking.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.InsideCursorType">
            <summary>
            Gets or sets the interactor cursor used when mouse is over a render data.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseLeave(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseEnter(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.DoubleClick(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseWheel(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The method is invoked on mouse enter.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked on mouse leave.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseDown(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseUp(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseEnterLeaveInteractor.MouseMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor">
            <summary>
            Represents interactor that implements base logic of data moving.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.IsOnInteraction">
            <summary>
            Was click on data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.PrevMouseLocation">
            <summary>
            Gets last mouse on-screen absolute location.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.PrevRelativeLocation">
            <summary>
            Gets last mouse on-screen relative location.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.MouseClickMask">
            <summary>
            Mask that is used for checking mouse up and down.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.MouseMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.MouseDown(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.MouseUp(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.OnMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The event is invoked any time a render data is about to be moved.
            </summary>
            <param name="pickData">Picked data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.OnStartInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The event is invoked any time a render data start interaction.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.BaseMovingInteractor.OnFinishInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The event is invoked any time a render data finish interaction.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor">
            <summary>
            Represents render data interactor interface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseDown(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse down event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseUp(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse up event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse move event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseLeave(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse leave event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseEnter(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse enter event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.DoubleClick(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse double click event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="args">Chart event arguments.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Interaction.RenderDataInteraction.IInteractor.MouseWheel(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The methods is invoked by mouse wheele event.
            </summary>
            <param name="pickData">Pick data.</param>
            <param name="arg">Chart event arguments.</param>
        </member>
        <member name="T:AtomicusChart.Interface.ObservableRangeCollection`1">
            <summary>
            Implementation of a dynamic data collection based on generic Collection&lt;T&gt;,
            implementing INotifyCollectionChanged to notify listeners
            when items get added, removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.#ctor">
            <summary>
            Initializes a new instance of ObservableCollection that is empty and has default initial capacity.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class that contains
            elements copied from the specified collection and has sufficient capacity
            to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> collection is a null reference </exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class
            that contains elements copied from the specified list
            </summary>
            <param name="list">The list whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the list.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> list is a null reference </exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the list. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>                
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not in the collection range.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Removes the first occurence of each item in the specified collection from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The items to remove.</param>        
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Iterates over the collection and removes all items that satisfy the specified match.
            </summary>
            <remarks>The complexity is O(n).</remarks>
            <param name="match"></param>
            <returns>Returns the number of elements that where </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.RemoveAll(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Iterates over the specified range within the collection and removes all items that satisfy the specified match.
            </summary>
            <remarks>The complexity is O(n).</remarks>
            <param name="index">The index of where to start performing the search.</param>
            <param name="count">The number of items to iterate on.</param>
            <param name="match"></param>
            <returns>Returns the number of elements that where </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is exceeding the collection.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Clears the current collection and replaces it with the specified collection,
            using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>             
            <param name="collection">The items to fill the collection with, after clearing it.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Clears the current collection and replaces it with the specified collection,
            using the specified comparer to skip equal items.
            </summary>
            <param name="collection">The items to fill the collection with, after clearing it.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used
            to check whether an item in the same location already existed before,
            which in case it would not be added to the collection, and no event will be raised for it.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ReplaceRange(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified range and inserts the specified collection,
            ignoring equal items (using <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>).
            </summary>
            <param name="index">The index of where to start the replacement.</param>
            <param name="count">The number of items to be replaced.</param>
            <param name="collection">The collection to insert in that location.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ReplaceRange(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified range and inserts the specified collection in its position, leaving equal items in equal positions intact.
            </summary>
            <param name="index">The index of where to start the replacement.</param>
            <param name="count">The number of items to be replaced.</param>
            <param name="collection">The collection to insert in that location.</param>
            <param name="comparer">The comparer to use when checking for equal items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.ContainsAny(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Helper function to determine if a collection contains any elements.
            </summary>
            <param name="collection">The collection to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.OnEssentialPropertiesChanged">
            <summary>
            Helper to raise Count property and the Indexer property.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.OnIndexerPropertyChanged">
            <summary>
            /// Helper to raise a PropertyChanged event for the Indexer property
            /// </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ObservableRangeCollection`1.OnRangeReplaced(System.Int32,System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Helper to raise event for clustered action and clear cluster.
            </summary>
            <param name="followingItemIndex">The index of the item following the replacement block.</param>
            <param name="newCluster"></param>
            <param name="oldCluster"></param>
        </member>
        <member name="T:AtomicusChart.Interface.EventArgsCache">
            <remarks>
            To be kept outside <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, since otherwise, a new instance will be created for each generic type used.
            </remarks>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Collections.BasePrimitiveCollection">
            <summary>
            Represents base class for primitive collection render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Collections.BasePrimitiveCollection.Mesh">
            <summary>
            Gets or sets the primitive collection mesh.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Collections.BasePrimitiveCollection.Transforms">
            <summary>
            Gets the primitive collection transform collection.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Collections.BasePrimitiveCollection.GetMesh">
            <summary>
            Gets the primitive collection mesh it's based on.
            </summary>
            <returns>Result mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Collections.MultiColorPrimitiveCollection">
            <summary>
            Represents primitive collection render data with specified color for each primitive.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Collections.MultiColorPrimitiveCollection.Colors">
            <summary>
            Contains the collection primitive colors.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Collections.MultiColorPrimitiveCollection.IsOpaque">
            <summary>
            Set the flag to true if the collection contains at least a single non-opaque color.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Collections.MultiColorPrimitiveCollection.SetTransformsAndColor(AtomicusChart.Interface.Data.Matrix4F[],AtomicusChart.Interface.Data.Color4[])">
            <summary>
            Sets the collection transforms and colors.
            </summary>
            <param name="newTransforms">Tranforms collection.</param>
            <param name="newColors">Colors collection.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection">
            <summary>
            Represents primitive collection render data with a single color for each primitive.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection.Color">
            <summary>
            Gets or sets the primitive collection color.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection.#ctor(AtomicusChart.Interface.Data.Matrix4F[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection"/>.
            </summary>
            <param name="transforms">Transforms array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection.SetTransforms(AtomicusChart.Interface.Data.Matrix4F[])">
            <summary>
            Sets the collection transforms.
            </summary>
            <param name="newTransforms">Tranforms collection.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.ColoredMesh">
            <summary>
            Represents mesh with per-vertex color.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ColoredMesh.Colors">
            <summary>
            Contains the mesh colors.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.ColoredMesh.#ctor(AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.ColoredMesh"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="colors">Colors array.</param>
            <param name="normals">Normals array.</param>
            <param name="indices">Indices array.</param>
            <param name="alternateIndices">Alternate indices array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.ColoredMesh.#ctor(AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.ColoredMesh"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="colors">Colors array.</param>
            <param name="indices">Indices array.</param>
            <param name="alternateIndices">Alternate indices array.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Container.RenderContainer">
            <summary>
            RenderData for custom rendering.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Container.RenderContainer.RedrawRequested">
            <summary>
            Request for redraw.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.RenderContainer.OnRedrawRequested">
            <summary>
            Raise <see cref="F:AtomicusChart.Interface.PresentationData.Container.RenderContainer.RedrawRequested"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.RenderContainer.GetIsOpaque">
            <summary>
            Consider render data as opaque during rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.RenderContainer.Render2D(AtomicusChart.Interface.PresentationData.Container.IRender2DArgument)">
            <summary>
            Render 2d scene.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Container.IRender2DArgument">
            <summary>
            Argument for 2d rendering.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.IRender2DArgument.GetViewport">
            <summary>
            View port of data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Container.IRender2DArgument.Renderer">
            <summary>
            Renderer.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Container.IRenderer">
            <summary>
            Points data.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.IRenderer.RenderLine(AtomicusChart.Interface.PresentationData.Container.IPointsData,AtomicusChart.Interface.Data.Color4,System.Single)">
            <summary>
            Render line by points.
            </summary>
            <param name="lineData">Points.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Container.IPointsData">
            <summary>
            Points data.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Container.HorizontalRangeSelector">
            <summary>
            Widget for selection of horizontal area.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Container.HorizontalRangeSelector.Left">
            <summary>
            Left bound.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Container.HorizontalRangeSelector.Right">
            <summary>
            Left bound.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.HorizontalRangeSelector.GetIsOpaque">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Container.HorizontalRangeSelector.Render2D(AtomicusChart.Interface.PresentationData.Container.IRender2DArgument)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.ContourLine">
            <summary>
            Represents render data that is used for contour line presentation.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ContourLine.Contour">
            <summary>
            Gets the contour the <see cref="T:AtomicusChart.Interface.PresentationData.ContourLine"/> is assotiated with.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ContourLine.Parent">
            <summary>
            Gets the render data that will receive interaction events.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ContourLine.LinePositionsProvider">
            <summary>
            Gets the contour line positions provider instance.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ContourLine.PickIndex">
            <summary>
            Gets or sets the contour line pick index that parent render data will receive as interaction sub index.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ContourLine.PickingAdditionalThickness">
            <summary>
            Gets or sets optional additional picking thickness of line.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.ContourLine.#ctor(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData,AtomicusChart.Interface.PresentationData.IContoursLinePositionsProvider,AtomicusChart.Interface.Data.Contour)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.ContourLine"/>.
            </summary>
            <param name="parent">Parent render data instance.</param>
            <param name="positionsProvider"><see cref="T:AtomicusChart.Interface.PresentationData.IContoursLinePositionsProvider"/> instance responsible for line points compute.</param>
            <param name="contour">Contour instance the line is attached to.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.IContoursLinePositionsProvider">
            <summary>
            Contains methods for extraction contour line positions.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.IContoursLinePositionsProvider.GetContourLinePoints(AtomicusChart.Interface.Data.Contour)">
            <summary>
            Gets point-list of positions for the contour line associated with the specified contour.
            </summary>
            <param name="contour">Contour instance.</param>
            <returns>Line points.</returns>
        </member>
        <member name="E:AtomicusChart.Interface.PresentationData.IContoursLinePositionsProvider.ContoursChanged">
            <summary>
            The event is called any time the provider has contours changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.ErrorBars">
            <summary>
            Represents render data used to display error bars.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.Color">
            <summary>
            Gets or sets color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.AreaAlphaCoefficient">
            <summary>
            Gets or sets coefficient of alpha.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.ErrorsOffsetDirection">
            <summary>
            Gets or sets positive direction of erros offset.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.Data">
            <summary>
            Gets or sets error points.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.ErrorPresentaionType">
            <summary>
            Gets or sets type of error bar for visualization.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.PresentationType">
            <summary>
            Presentation type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.MainLineThickness">
            <summary>
            Gets or sets main line thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.SecondaryLineThickness">
            <summary>
            Gets or sets secondary line thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.ErrorBars.ErrorBarDashWidth">
            <summary>
            Gets or sets size of dash in pixels.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.ErrorPresentaionType">
            <summary>
            Type of error bar. How error will presented.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ErrorPresentaionType.Stripes">
            <summary>
            Stripes.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ErrorPresentaionType.Bars">
            <summary>
            LineBars.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.PresentationType">
            <summary>
            Error bar presentation type.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PresentationType.ValueAndErrors">
            <summary>
            Line and and bar are visible.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PresentationType.ErrorsOnly">
            <summary>
            Errors only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PresentationType.ValueOnly">
            <summary>
            Value only.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.ErrorPoint">
            <summary>
            Contains point with error information.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Point">
            <summary>
            Point with error.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Offset1">
            <summary>
            <see cref="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Offset1"/> will be added to <see cref="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Point"/> along predefined axis.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Offset2">
            <summary>
            <see cref="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Offset2"/> will be added to <see cref="F:AtomicusChart.Interface.PresentationData.ErrorPoint.Point"/> along predefined axis.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.ErrorPoint.#ctor(AtomicusChart.Interface.Data.Vector3F,System.Single,System.Single)">
            <summary>
            Initializes <see cref="T:AtomicusChart.Interface.PresentationData.ErrorPoint"/>.
            </summary>
            <param name="point">Point of error.</param>
            <param name="offset1">Low bound offset.</param>
            <param name="offset2">Top bound offset.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.ErrorPoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.FixedStepLine2D">
            <summary>
            Represents line render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine2D.ArgumentStart">
            <summary>
            Start of argument.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine2D.ArgumentStep">
            <summary>
            Step of argument.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine2D.Projection">
            <summary>
            Projection type.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.FixedStepLine3D">
            <summary>
            Represents line render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine3D.Origin">
            <summary>
            Gets or sets the line origin.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine3D.ArgumentAxisUnit">
            <summary>
            Gets or sets the line argument step.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.FixedStepLine3D.ValueAxisUnit">
            <summary>
            Gets or sets the line value step.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseFixedStepLine">
            <summary>
            Base line for fixed step.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseFixedStepLine.Values">
            <summary>
            Gets or sets the line values.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseFixedStepLine.GetOrigin">
            <summary>
            Gets or sets the line origin.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseFixedStepLine.GetArgumentAxisUnit">
            <summary>
            Gets or sets the line argument step.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseFixedStepLine.GetValueAxisUnit">
            <summary>
            Gets or sets the line value step.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.LineBase">
            <summary>
            Represents line render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.LineBase.Color">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.LineBase.Strip">
            <summary>
            Gets or sets the line-strip flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.LineBase.Thickness">
            <summary>
            Gets or sets thickness of line.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.LineBase.PickingThickness">
            <summary>
            Gets or sets optional picking thickness of line.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Link">
            <summary>
            Type to describe link shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Radius">
            <summary>
            Radius of the tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Ratio">
            <summary>
            Height of the tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Point1">
            <summary>
            Position of point 1 that should be connected by tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Point2">
            <summary>
            Position of point 2 that should be connected by tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Color1">
            <summary>
            Color 1. Alpha channel is ignored.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Link.Color2">
            <summary>
            Color 2. Alpha channel is ignored.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Link.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Link.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.MultiColorPrimitive">
            <summary>
            Represents multi-color primitive render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.MultiColorPrimitive.Opacity">
            <summary>
            Gets or sets the primitive opacity.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.MultiColorPrimitive.GetMesh">
            <summary>
            Gets the primitive mesh.
            </summary>
            <returns>Colored mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.MultiColorSurface">
            <inheritdoc />
            <summary>
            Type to describe multi color surface mesh.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.MultiColorSurface.SurfaceMesh">
            <summary>
            Gets or sets colored mesh.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.MultiColorSurface.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.MultiColorSurface.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.BasePrimitive">
            <summary>
            Represents base class for primitive render data.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.PresentationData.Primitives.BasePrimitive.MeshChanged">
            <summary>
            The event is called whenever the primitive mesh changes.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.BasePrimitive.Material">
            <summary>
            Gets or sets the render data render material.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.BasePrimitive.PresentationType">
            <summary>
            Gets or sets the render data presentation type.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.BasePrimitive.OnMeshChanged">
            <summary>
            Call this method to notify about mesh changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Primitive">
            <summary>
            Represents base class for primitive render data.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.PresentationData.Primitives.Primitive.MeshTransformChanged">
            <summary>
            The event is called whenever the primitive mesh transform matrix changes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Primitive.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <summary>
            Gets the primitive geometry transform.
            </summary>
            <param name="geometryTransform">Geometry transform.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Primitive.OnMeshTransformChanged">
            <summary>
            Call the method to notify about the mesh geometry transform changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.PrimitivePresentationType">
            <summary>
            Contains available primitive presentation types.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Primitives.PrimitivePresentationType.Solid">
            <summary>
            Solid presentation.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Primitives.PrimitivePresentationType.Wireframe">
            <summary>
            Wireframe presentation.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Pyramid">
            <inheritdoc />
            <summary>
            Type to describe tetrahedron shape.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Pyramid.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Pyramid.GetMesh">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink">
            <summary>
            Type to describe link shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.Radius">
            <summary>
            Item radius.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.Point1">
            <summary>
            Position of point 1 that should be connected by tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.Point2">
            <summary>
            Position of point 2 that should be connected by tube.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLink.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection">
            <summary>
            Collection of links with the same radius and color.
            </summary>
            <seealso cref="T:AtomicusChart.Interface.PresentationData.Collections.SingleColorPrimitiveCollection"/>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection.Radius">
            <summary>
            Radius of the tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round. </remarks>
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection.#ctor(AtomicusChart.Interface.Data.Matrix4F[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection"/>.
            </summary>
            <param name="transforms">Transforms array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection.#ctor(AtomicusChart.Interface.Data.Matrix4F[],System.Int32,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Primitives.SingleColorLinkCollection"/>.
            </summary>
            <param name="transforms">Transforms array.</param>
            <param name="resolution">Resolution value.</param>
            <param name="r">Radius value.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection">
            <summary>
            Type to describe sphere collection with the same radius primitive type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection.#ctor(AtomicusChart.Interface.Data.Matrix4F[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection"/>.
            </summary>
            <param name="transforms">Transforms collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection.#ctor(AtomicusChart.Interface.Data.Matrix4F[],System.Single,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Primitives.SphereCollection"/>.
            </summary>
            <param name="transforms">Transforms collection.</param>
            <param name="radius">Sphere radius value.</param>
            <param name="resolution">Sphere resolution value.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Torus">
            <summary>
            Represents torus primitive render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.ResolutionSmall">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.Position">
            <summary>
            Position of mesh for Transform propery is Identity. 0,0,0 is in arrow base center.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.Direction">
            <summary>
            Arrow direction. Default direction is along Z axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.Radius">
            <summary>
            Radius of maximal drom base cone element depending on radius ratio.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Torus.RadiusSmall">
            <summary>
            Radius of maximal drom base cone element depending on radius ratio.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Torus.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Torus.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Arrow">
            <summary>
            Type to describe arrow shape.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Primitives.Arrow.DefaultResolution">
            <summary>
            Gets default arrow resolution.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.BaseToConeRadiusRatio">
            <summary>
            Cone part radius to base(cylinder) part radius ratio.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.TipToFullLengthRatio">
            <summary>
            Base(cylinder) part height to cone part height ratio.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.Position">
            <summary>
            Position of mesh for Transform propery is Identity. 0,0,0 is in arrow base center.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.Direction">
            <summary>
            Arrow direction. Default direction is along Z axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.Radius">
            <summary>
            Radius of maximal drom base cone element depending on radius ratio.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Arrow.Height">
            <summary>
            Arrow height.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Arrow.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Arrow.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Cone">
            <summary>
            Type to describe cone shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cone.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cone.Position">
            <summary>
            Gets or sets the cone position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cone.Direction">
            <summary>
            Gets or sets the cone direction.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cone.Radius">
            <summary>
            Gets or sets the cone radius.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cone.Height">
            <summary>
            Gets or sets the cone height.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cone.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cone.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Cube">
            <summary>
            Type to describe cube shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cube.Size">
            <summary>
            Gets or sets the cube size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cube.Position">
            <summary>
            Gets or sets the cube position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cube.Direction">
            <summary>
            Gets or sets the cube direction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cube.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cube.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Cylinder">
            <summary>
            Type to describe cylinder shape.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.DefaultResolution">
            <summary>
            Gets default cylinder base resolution.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Radius">
            <summary>
            Radius of the cylinder.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Height">
            <summary>
            Height of the cylinder.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Position">
            <summary>
            Position of cylinder relatively center with identity Transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Direction">
            <summary>
            Scale of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.Scale">
            <summary>
            Scale of the cylinder.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Cylinder.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Disk">
            <summary>
            Type to describe disk shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Radius">
            <summary>
            Radius of the cylinder.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Height">
            <summary>
            Height of the cylinder.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Position">
            <summary>
            Position of cylinder relatively center with identity Transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Direction">
            <summary>
            Scale of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Disk.Scale">
            <summary>
            Scale of the cylinder.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Disk.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Disk.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Prism">
            <summary>
            Type to describe prism shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Prism.Side">
            <summary>
             Gets or sets vertexes of prism's bottom side (basis).
             Points should be sequential (CCW or CW).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Prism.BottomToTopVector">
            <summary>
            Prism are extruded along this direction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Prism.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Prism.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere">
            <summary>
            Type to describe half of sphere shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.Position">
            <summary>
            Position of item center with identity Transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.Scale">
            <summary>
            Scale of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.Direction">
            <summary>
            Orientation semisphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.DrawBottomBase">
            <summary>
            Draw semisphere bottom base surface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.GetMesh">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SemiSphere.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.SingleColorPrimitive">
            <summary>
            Represents single color primitive render data type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.SingleColorPrimitive.Color">
            <summary>
            Color of primitive.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.SingleColorPrimitive.GetMesh">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.IMeshCreator">
            <summary>
            Contains method for generating mesh.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.IMeshCreator.GetMesh">
            <summary>
            Generates mesh.
            </summary>
            <returns>Generated mesh.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Sphere">
            <summary>
            Type to describe sphere shape.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Primitives.Sphere.DefaultResolution">
            <summary>
            Gets default sphere resolution.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Sphere.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Sphere.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Sphere.Position">
            <summary>
            Position of sphere center with identity Transform.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Sphere.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Sphere.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Surface">
            <summary>
            Type to describe surface mesh.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Surface.SurfaceMesh">
            <summary>
            Gets or sets mesh.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Surface.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Surface.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron">
            <summary>
            Type to describe tetrahedron shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron.Position">
            <summary>
            Position of tetrahedron relatively center with identity Transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron.Direction">
            <summary>
            Orientation of tetrahedron.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron.Scale">
            <summary>
            Scale of the tetrahedron.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Tetrahedron.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Primitives.Tube">
            <summary>
            Type to describe tube shape.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Radius">
            <summary>
            Radius of the tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Height">
            <summary>
            Height of the tube.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Resolution">
            <summary>
            Resolution of generated circle curve.
            <remarks> Bigger resolution requires more render time but looks more round.
            </remarks>
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Position">
            <summary>
            Position of tube relatively center with identity Transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Direction">
            <summary>
            Orientation vector.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Primitives.Tube.Scale">
            <summary>
            Scale of the tube.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Tube.GetMesh">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Primitives.Tube.GetGeometryTransforms(AtomicusChart.Interface.Data.Matrix4F@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.SingleColorPoints">
            <summary>
            Represents single color points render data type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SingleColorPoints.Reader">
            <summary>
            Gets or sets the points data reader.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SingleColorPoints.Color">
            <summary>
            Gets or sets the points color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor">
            <summary>
            Represents interactor that implements logic of in-plane rotation.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.#ctor(System.Int32,AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget,AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor"/>.
            </summary>
            <param name="orthoIndex">Ortho-plane axis index.</param>
            <param name="interactiveContainerWidget"><see cref="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget"/> instance for rotation.</param>
            <param name="tangentLine">Line that will be used to show rotation tangent.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.OnMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.OnStartInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.OnFinishInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.DoubleClick(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InPlaneRotationInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget">
            <summary>
            Represents widget contained render data.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.InnerRenderData">
            <summary>
            Gets the widget container inner render data it's associated with.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.Marker">
            <summary>
            Gets the widget container marker render data.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.Changing">
            <summary>
            The event is invoked whenever the widget has geometry changes.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ChangesFinished">
            <summary>
            Event about interaction ended.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.WidgetPixelSize">
            <summary>
            Gets or sets the widget pixel size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.RotationLinesThickness">
            <summary>
            Thickness of rotation line if they are not highlighted.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.RotationLinesHighlightedThickness">
            <summary>
            Thickness of rotation line if they are not highlighted.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.RotationLinesHighlightingThickness">
            <summary>
            Thickness of rotation line used for tracking of highlighting raising.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.MaxControllerScaling">
            <summary>
            Max scaling of controller marker.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ScaleX">
            <summary>
            Gets or sets the widget scaling by X axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ScaleY">
            <summary>
            Gets or sets the widget scaling by Y axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ScaleZ">
            <summary>
            Gets or sets the widget scaling by Z axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.CenterX">
            <summary>
            Gets or sets the widget center by X axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.CenterY">
            <summary>
            Gets or sets the widget center by Y axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.CenterZ">
            <summary>
            Gets or sets the widget center by Z axis.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ThetaX">
            <summary>
            Euler thetaX. (Order Rz -> Ry -> Rx)
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ThetaY">
            <summary>
            Euler thetaY. (Order Rz -> Ry -> Rx)
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ThetaZ">
            <summary>
            Euler thetaY. (Order Rz -> Ry -> Rx)
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.IsControllerVisible">
            <summary>
            Gets or sets the widget controller visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.ScalingKeepingType">
            <summary>
            Keep x and y scaling equals or not.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.MarkerTransform">
            <summary>
            Marker's transform.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.IsScaleControllerVisible">
            <summary>
            Is scale controller of visible.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.SensitivityOptions">
            <summary>
            Interaction sensitivity options.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.#ctor(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget"/>.
            </summary>
            <param name="innerRenderData"></param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.GetScaling">
            <summary>
            Inner data scaling.
            </summary>
            <returns>Scaling vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.AttachRoi(AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget)">
            <summary>
            Adds the child to the container.
            </summary>
            <param name="child">Child instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.DetachRoi(AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget)">
            <summary>
            Removes the child from the container.
            </summary>
            <param name="child">Child instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.AttachRenderData(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Adds the child to the container.
            </summary>
            <param name="child">Child instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.DetachRenderData(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Removes the child from the container.
            </summary>
            <param name="child">Child instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.GetFullTransform">
            <summary>
            Computes the container full transformation matrix.
            </summary>
            <returns>Full transformation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.GetParentFullTransform">
            <summary>
            Gets the container parent full transformation matrix.
            </summary>
            <returns>Parent full transformation matrix.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget.OnPropertyChanged(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType">
            <summary>
            Type of scaling keeping.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.Free">
            <summary>
            Scaling are independent.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.X">
            <summary>
            X.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.Y">
            <summary>
            Y.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.Z">
            <summary>
            Z.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.XY">
            <summary>
            XY.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.XZ">
            <summary>
            XZ.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.YZ">
            <summary>
            YZ.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.ScalingKeepingType.XYZ">
            <summary>
            XYZ.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions">
            <summary>
            Interaction sensitivity options.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.PanComment">
            <summary>
            Comment for pan coefficient.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.PanFactor">
            <summary>
            See <see cref="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.PanComment"/>.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.ScaleComment">
            <summary>
            Comment for pan coefficient.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.ScaleFactor">
            <summary>
            See <see cref="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.ScaleComment"/>.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.RotationComment">
            <summary>
            Comment for pan coefficient.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.RotationFactor">
            <summary>
            See <see cref="F:AtomicusChart.Interface.PresentationData.Widget.SensitivityOptions.RotationComment"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositePanInteractor.OnMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositePanInteractor.OnStartInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositePanInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositePanInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.MovingAlongAxisInteractor">
            <summary>
            Interactor for moving along axis.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.MovingAlongAxisInteractor.GetDeltaAlongVector(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            Get delta along axis.
            </summary>
            <param name="orthoVectorTransformed">OrthoVectorTransformed</param>
            <param name="dataCenter">DataCenter</param>
            <param name="chartEventArg">chartEventArg</param>
            <returns>Delta vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.MovingAlongAxisInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.MovingAlongAxisInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.RoiControllerPresentation">
            <summary>
            Represents container render data that implements region-of-interest presentation logic.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerPresentation.RotationLinesThickness">
            <summary>
            Thickness of rotation line if they are not highlighted.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerPresentation.IsScaleControllerVisible">
            <summary>
            Is scale controller of visible.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.RoiControllerPresentation.#ctor(AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget,AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.RoiControllerPresentation"/>.
            </summary>
            <param name="interactiveContainerWidget"><see cref="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget"/> the presentation is associated with.</param>
            <param name="renderDataForScaling">ROI presentation primitive.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.AxesColorsHelper">
            <summary>
            Class helper for storing of defautl axes colors.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.AxesColorsHelper.GetAxesColors">
            <summary>
            Get colors of axes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.AxesColorsHelper.GetAxisColor(System.Int32)">
            <summary>
            Color of axis.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.AxesColorsHelper.GetHighlightedAxisColor(System.Int32)">
            <summary>
            Color of highlighted axis.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget">
            <summary>
            Represents region-of-interest selection controller widget.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.RoiType">
            <summary>
            Gets or sets the widget region-of-interest shape type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.RoiColor">
            <summary>
            Gets or sets the widget region-of-interest shape color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.KeepXYScalingForCylinder">
            <summary>
            Should we keep XY scaling equals for cylinder.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.KeepXYZScalingForSphere">
            <summary>
            Should we keep XYZ scaling equals for sphere.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.SetRotationToOwn">
            <summary>
            Set widget to own coordinate system.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.SetToRotationGlobal">
            <summary>
            Set widget to global coordinate system.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.RoiControllerWidget.SetToRotationToView(AtomicusChart.Interface.CameraView.ContextView)">
            <summary>
            Set widget to view system.
            </summary>
            <param name="contextView">Convex view.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.RoiType">
            <summary>
            Contains available region-of-interest widget shape types.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.RoiType.Cube">
            <summary>
            Cube shape.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.RoiType.Cylinder">
            <summary>
            Cylinder shape.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Widget.RoiType.Sphere">
            <summary>
            Sphere shape.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor">
            <summary>
            Represents interactor that implements logic of scaling data by pan.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.#ctor(AtomicusChart.Interface.PresentationData.Widget.InteractiveContainerWidget,AtomicusChart.Interface.PresentationData.BaseTypes.RenderData,AtomicusChart.Interface.PresentationData.Collections.MultiColorPrimitiveCollection)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor"/>.
            </summary>
            <param name="interactiveContainerWidget"><see cref="!:InteractiveCompositeRenderData"/> the data for scaling is contained in.</param>
            <param name="dataForScaling"><see cref="T:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData"/> that will be scaled.</param>
            <param name="multiColorPrimitiveCollection"></param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.OnMove(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.DoubleClick(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.OnStartInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.OnFinishInteraction(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.OnEntering(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.InteractiveCompositeScaleByPanInteractor.OnLeaving(AtomicusChart.Interface.PickData,AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase">
            <summary>
            Represents base class for visual plane section render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.OutlineColor">
            <summary>
            Gets or sets the section outline color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.OutlineThickness">
            <summary>
            Gets or sets the section outline thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.IsOutlineVisible">
            <summary>
            Gets or sets the outline visiblity flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.IsFillVisible">
            <summary>
            Gets or sets the fill visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.FillPresentationType">
            <summary>
            Gets or sets fill presentation type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.SurfacePositions">
            <summary>
            Gets the section surface positions.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.NotifySectionChanged">
            <summary>
            Call this method to notify about 
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.OnSectionChanged">
            <summary>
            This method is called whenever the section geometry should be reconstructred.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.UpdateSurface(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Updates the section fill surface.
            </summary>
            <param name="positions">Surface positions.</param>
            <param name="indices">Surface indices.</param>
            <param name="normal">Surface normal.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase.UpdateOutline(AtomicusChart.Interface.Data.Vector3F[],System.Boolean)">
            <summary>
            Updates the section outline.
            </summary>
            <param name="positions">Outline positions.</param>
            <param name="isStrip">Outline strip flag.</param>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneNormalSection">
            <summary>
            Represents extension of <see cref="T:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneSectionBase"/> with normal to plane.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneNormalSection.Origin">
            <summary>
            Gets or sets the plane origin position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.VisualPlaneNormalSection.Normal">
            <summary>
            Gets or sets the plane normal.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.IReadOnlyPlaneSection">
            <summary>
            Represents interactive  read-only plane interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.IReadOnlyPlaneSection.Origin">
            <summary>
            Gets the plane origin position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.IReadOnlyPlaneSection.Normal">
            <summary>
            Gets the plane normal.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Widget.IPlaneSection">
            <summary>
            Represents interactive plane interface.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.IPlaneSection.Origin">
            <summary>
            Gets or sets the plane origin position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Widget.IPlaneSection.Normal">
            <summary>
            Gets or sets the plane normal.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Label">
            <summary>
            Type to describe single label data.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Label.DefaultFontFamily">
            <summary>
            Default font familty for labels on scene.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Label.MinMarkerRadius">
            <summary>
            The minimum marker radius.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Label.MaxMarkerRadius">
            <summary>
            The maximum marker radius.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.Position">
            <summary>
            Gets or sets the label position. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.Offset">
            <summary>
            Offset of label.
            +/- 1 means -/+ label width (height) in screen coordinates according to <see cref="P:AtomicusChart.Interface.PresentationData.Label.Position"/> on screen.
            Center in top left corner. Example: (-0.5, -0.5) means center of label.
            This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.Text">
            <summary>
            Gets or sets the label text string. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.IsBold">
            <summary>
            Gets or sets the label text string. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.FontFamily">
            <summary>
            Gets or sets the label font family name. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.FontSize">
            <summary>
            Gets or sets the label font size value. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.FontColor">
            <summary>
            Gets or sets the label font color. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.Background">
            <summary>
            Gets or sets the label background color. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.BorderThickness">
            <summary>
            Gets or sets the label frame border thickness. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.BorderColor">
            <summary>
            Label frame border color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.MarkerColor">
            <summary>
            Gets or sets the label marker color. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.MarkerRadius">
            <summary>
            Gets or sets the label marker radius in pixels. Value can not be less than 0.
            This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value can not be less than zero.</exception>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Label.IsVertical">
            <summary>
            Gets or sets the label vertical orientation mode. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Label.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Label"/> with default settings.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Label.#ctor(System.String,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Label"/> with the given settings.
            </summary>
            <param name="labelText">Label text.</param>
            <param name="position">Label position.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Label.GetFontDescription">
            <summary>
            Gets the description of font.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Marker">
            <summary>
            Represents marker render data that is independent of view scaling.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Marker.RenderData">
            <summary>
            Gets instance of render data the marker is associated with.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Marker.PixelSize">
            <summary>
            Gets or sets the marker pixel size.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Marker.MaxScaling">
            <summary>
            Optional max value of scaling that may be applied.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Marker.#ctor(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Marker"/>.
            </summary>
            <param name="renderData">Render data the marker is based on.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Marker.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Mesh">
            <summary>
            Represents mesh geometry container class.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.#ctor(AtomicusChart.Interface.Data.Vector3F[],AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Mesh"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="normals">Normals array.</param>
            <param name="indices">Indices array.</param>
            <param name="alternateIndices">Alternate indices array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.#ctor(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.Mesh"/>.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="indices">Indices array.</param>
            <param name="alternateIndices">Alternate indices array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetTransformed(AtomicusChart.Interface.Data.Matrix4F)">
            <summary>
            Get transformed deep copy of mesh.
            </summary>
            <param name="transform">Transformation matrix.</param>
            <returns>Transformed deep copy of mesh.</returns>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.Mesh.Acessor">
            <summary>
            Gets the mesh geometry accessor.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.Concat(AtomicusChart.Interface.PresentationData.Mesh[])">
            <summary>
            Concatenated meshes.
            </summary>
            <param name="meshes">Meshes for concatenate.</param>
            <returns>Concatenated mesh.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetClonedPositions">
            <summary>
            Get cloned positions.
            </summary>
            <returns>Positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetClonedIndices">
            <summary>
            Get cloned indices.
            </summary>
            <returns>Positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetClonedAlternateIndices">
            <summary>
            Get cloned alternate indices.
            </summary>
            <returns>Positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetClonedNormals">
            <summary>
            Get cloned normals.
            </summary>
            <returns>Normals.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.Mesh.GetRawAlternatedIndices(System.Int32[])">
            <summary>
            A raw way to get alternate indices. Indices present triangles borders.
            </summary>
            <param name="indices">Indices of triangle points.</param>
            <returns>Line indices.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.RasterData">
            <summary>
            Represents render data type suitable for raster images visualization.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterData.Reader">
            <summary>
            Gets or sets the raster data image reader.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.RasterDataBase">
            <summary>
            Represents raster data base render data type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.HighlightColor">
            <summary>
            Gets or sets the raster data highlight color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.IsGrayScale">
            <summary>
            Gets or sets the raster data gray-scale representation mode, when all channels of pixel becomes equal to red channel.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.Opacity">
            <summary>
            Gets or sets the raster data opacity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.Material">
            <summary>
            Gets or sets the raster data render material.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.BumpReader">
            <summary>
            Gets or sets the raster data bump map reader.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.InterpolationType">
            <summary>
            Gets or sets the raster data interpolation type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.RasterDataBase.Geometry">
            <summary>
            Gets or sets the raster data geometry.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.RasterDataInterpolationType">
            <summary>
            Contains available raster data interpolation types.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.RasterDataInterpolationType.None">
            <summary>
            No interpolation.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.RasterDataInterpolationType.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Series">
            <summary>
            Represents series render data type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Series.Reader">
            <summary>
            Gets or sets the series data reader.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Series.MarkerColor">
            <summary>
            Gets or sets the series marker color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Series.Color">
            <summary>
            Gets or sets the series line color.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.SeriesBase">
            <summary>
            Represents base class for series render data type.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SeriesBase.PatternStyle">
            <summary>
            gets or sets the series pattern style.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SeriesBase.MarkerStyle">
            <summary>
            Gets or sets the series marker style.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SeriesBase.Thickness">
            <summary>
            Gets or sets the series line thickness.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.SeriesBase.MarkerSize">
            <summary>
            Gets or sets the series marker size.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.MarkerStyle">
            <summary>
            Series marker styles enumeration.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.None">
            <summary>
            No marker.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.Square">
            <summary>
            Square marker.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.Triangle">
            <summary>
            Triangle marker.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.Circle">
            <summary>
            Circle marker.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.Rhombus">
            <summary>
            Rhombus marker.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.MarkerStyle.Cross">
            <summary>
            Cross marker.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.PatternStyle">
            <summary>
            Series pattern styles enumeration.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PatternStyle.Solid">
            <summary>
            Solid line style.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PatternStyle.DashDash">
            <summary>
            Dash-dash line style.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.PatternStyle.DashDot">
            <summary>
            Dash-dot line style.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1">
            <summary>
            Represents render data container.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.Collection">
            <summary>
            Gets the container render data collection.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1"/>"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1"/>.
            </summary>
            <param name="collection">Initial render data collection that will be used as link.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.FromEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1"/>.
            </summary>
            <param name="enumerable">Initial render data collection</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData`1.GetData">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData">
            <summary>
            Composite Render data.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData.#ctor(System.Collections.ObjectModel.ObservableCollection{AtomicusChart.Interface.PresentationData.BaseTypes.RenderData})">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection that will inner collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.CompositeRenderData.FromEnumerable(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.PresentationData.BaseTypes.RenderData})">
            <summary>
            Create collection from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="enumerable">Source.</param>
            <returns></returns>/// <returns>Composite.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseTypes.BaseCompositeRenderData">
            <summary>
            Base class for composite render data.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseTypes.BaseCompositeRenderData.CollectionAccess">
            <summary>
            Represents collection accessor delegate.
            </summary>
            <param name="compositeRenderData">Source render data.</param>
            <returns>Collection.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.BaseCompositeRenderData.GetAccess">
            <summary>
            Gets the collection accessor.
            </summary>
            <returns>Collection accessor.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.BaseCompositeRenderData.GetData">
            <summary>
            Get inner data.
            </summary>
            <returns>Collection.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData">
            <summary>
            Represents base class for chart visualization data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.Name">
            <summary>
            Gets or sets the render data name. The name is typically used for legend.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsVisible">
            <summary>
            Gets or sets the render data visibility.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsLegendVisible">
            <summary>
            Gets or sets the render data legend visibility.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.Tag">
            <summary>
            Gets or sets the render data tag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsDataScaleApplicable">
            <summary>
            Is data scale applicable defines if all data vertices will be automatically scaled to target data scale via GPU. If you require own data scale conversion logic set property to false.
            </summary>
            <remarks>If camera AspectRation3D=null;null;null;
            with false value and DataScale differ from Linear
            it will be not visible to view bounds, like <see cref="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsBoundsVisible"/> = false.
            </remarks>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsHitTestVisible">
            <summary>
            Gets or sets the render data hit-test visibility flag.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.Interactor">
            <summary>
            Gets or sets the render data interactor.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.Transform">
            <summary>
            Custom transform of the object.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsBoundsVisible">
            <summary>
            Is bounds visible.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.GetTransformRef">
            <summary>
            Gets the render data transform matrix by ref.
            </summary>
            <returns>Transform matrix ref.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.PresentationData.Line">
            <summary>
            Represents line render data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.PresentationData.Line.Points">
            <summary>
            Gets or sets the line points.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.PickData">
            <summary>
            Contains information about picked render data.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PickData.RenderData">
            <summary>
            Gets picked render data.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.PickData.RawSubIndex">
            <summary>
            Gets picked render data sub-index.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.PickData.#ctor(AtomicusChart.Interface.PresentationData.BaseTypes.RenderData,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.PickData"/>.
            </summary>
            <param name="renderData">Picked render data.</param>
            <param name="rawSubIndex">Picked render data sub-index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.PickData.GetRoundedIndex">
            <summary>
            Returns rounded sub-index.
            </summary>
            <returns>rounded sub-index.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.PickData.Equals(AtomicusChart.Interface.PickData)">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PickData.Equals(System.Object)">
            <inhertidoc/>
        </member>
        <member name="M:AtomicusChart.Interface.PickData.GetHashCode">
            <inhertidoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.BoundsComputer">
            <summary>
            Contains helper functions for computation associated with geometry bounds.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.BoundsComputer.GetBoundsOfAxisOrderedPoints(AtomicusChart.Interface.Data.Vector3F[],System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Computes bounds of the specified positions array in concrete axis direction.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="index">Start index.</param>
            <param name="count">Search count.</param>
            <param name="axisIndex">Search axis index.</param>
            <param name="from">Region start.</param>
            <param name="to">Region end.</param>
            <returns>Result of bounds computation.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor">
            <summary>
            Contains helper methods for infinity values processing.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(System.Single@,System.Single,System.Single)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="value">Source value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(System.Single[],System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="values">Values array.</param>
            <param name="index">Start index.</param>
            <param name="count">Count of value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="value">Source value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(AtomicusChart.Interface.Data.Vector3F[],System.Int32,System.Int32,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="values">Vertices array.</param>
            <param name="index">Start index.</param>
            <param name="count">Count of value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(AtomicusChart.Interface.Data.Vector3F@,System.Single,System.Single,System.Int32)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="value">Source value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
            <param name="axisIndex">Axis index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Interpolation.InfinityProcessor.ReplaceInfinity(AtomicusChart.Interface.Data.Vector3F[],System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Performs infinity values replacement.
            </summary>
            <param name="values">Vertices array.</param>
            <param name="index">Start index.</param>
            <param name="count">Count of value.</param>
            <param name="negativeReplacement">Negative infinity replacement.</param>
            <param name="positiveReplacement">Positive infinity replacement.</param>
            <param name="axisIndex">Axis index.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.IntersectionHelper">
            <summary>
            Contains helper methods for intersection compute.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.CheckBounding(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns true if the point is located between two other points.
            </summary>
            <param name="point">Source point.</param>
            <param name="point1">Point 1.</param>
            <param name="point2">Point 2.</param>
            <returns>True if between.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.CheckBounding(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,System.Single)">
            <summary>
            Returns true if the point is located between two other points with the given epsilon.
            </summary>
            <param name="point">Source point.</param>
            <param name="point1">Point 1.</param>
            <param name="point2">Point 2.</param>
            <param name="epsilon">Epsilon value.</param>
            <returns>True if between.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.CheckVertexSide(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns true if the point is located in direction of the plane normal.
            </summary>
            <param name="vertex">Vertex position.</param>
            <param name="planePosition">Point on the plane.</param>
            <param name="planeNormal">Normal of the plane.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IntersectPlaneAndLine(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns result of intersection of the plane and line.
            </summary>
            <param name="linePoint">Origin point of the line.</param>
            <param name="lineDirection">Direction vector of the line.</param>
            <param name="planeOrigin">Origin point of the plane.</param>
            <param name="planeNormal">Normal to the plane.</param>
            <returns>Result of intersection. Null if not intersected.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IntersectPlaneAndEdge(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns result of intersection of the plane and edge.
            </summary>
            <param name="edgePoint0">First point of the edge.</param>
            <param name="edgePoint1">Second point of the edge.</param>
            <param name="planeOrigin">Origin point of the plane.</param>
            <param name="planeNormal">Normal to the plane.</param>
            <returns>Result of intersection. Null if not intersected.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.GetProjection(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns the result of projection of two vectors.
            </summary>
            <param name="from">Source vector.</param>
            <param name="to">Destination vector.</param>
            <returns>Projection result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.ProjectPointOnLine(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Gets the point-on-line projection result.
            </summary>
            <param name="point">Source point.</param>
            <param name="p1">Line first point.</param>
            <param name="p2">Line second point.</param>
            <returns>Point-on-line projection result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.GetMinMax(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Returns min and max values.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="min">Out min value.</param>
            <param name="max">Out max value.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IsInBounds(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the value is located between the specified values.
            </summary>
            <param name="value">Input value.</param>
            <param name="border1">First border.</param>
            <param name="border2">Second border.</param>
            <returns>True if located.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IsInBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the value is located between the specified values.
            </summary>
            <param name="value">Input value.</param>
            <param name="border1">First border.</param>
            <param name="border2">Second border.</param>
            <param name="epsilon">Compare epsilon.</param>
            <returns>True if located.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IsInBounds(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns true if the point is located in the bounds.
            </summary>
            <param name="point">Specified point.</param>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>True if is in bounds.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.IntersectionHelper.IsInBounds(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,System.Single)">
            <summary>
            Returns true if the point is located in the bounds.
            </summary>
            <param name="point">Specified point.</param>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <param name="epsilon">Compare epsilon value.</param>
            <returns>True if is in bounds.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.BoundsSectionBuilder">
            <summary>
            Contains helper methods for bounds section construction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.BoundsSectionBuilder.GetSection(AtomicusChart.Interface.CameraView.Bounds,AtomicusChart.Interface.Data.Plane)">
            <summary>
            Constructrs section for the specified bounds.
            </summary>
            <param name="bounds">Geometry bounds.</param>
            <param name="plane">Section plane.</param>
            <returns>Result geometry as set of vertices and indices.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.ContourBuilder">
            <summary>
            Contains methods for contour searching.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContourVertices(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},System.Int32,AtomicusChart.Interface.Data.OneAxisBounds)">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="axisIndex">Axis index in range [0; 2].</param>
            <param name="bounds">Bounds of the data.</param>
            <returns>Calculated contour line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContourVertices(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="axisIndex">Axis index in range [0; 2].</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContour(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes contour geometry for triangle-list geometry presented as set of generic sections.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="axisIndex">Axis index in range [0; 2].</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContour(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},System.Int32,AtomicusChart.Interface.Data.OneAxisBounds)">
            <summary>
            Computes contour geometry for triangle-list geometry presented as set of generic sections.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="axisIndex">Axis index in range [0; 2].</param>
            <param name="bounds">Bounds of the data.</param>
            <returns>Calculated contour line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContourVertices(AtomicusChart.Interface.Data.Vector3F[],System.Single[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},AtomicusChart.Interface.Data.OneAxisBounds)">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="values">Values array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="bounds">Bounds of the data.</param>
            <returns>Calculated contour line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContourVertices(AtomicusChart.Interface.Data.Vector3F[],System.Single[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="values">Values array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <returns>Calculated contour line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContour(AtomicusChart.Interface.Data.Vector3F[],System.Single[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes contour geometry for triangle-list geometry presented as set of generic sections.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="values">Values array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourBuilder.GetContour(AtomicusChart.Interface.Data.Vector3F[],System.Single[],System.Int32[],System.Collections.Generic.IEnumerable{System.Single},AtomicusChart.Interface.Data.OneAxisBounds)">
            <summary>
            Computes contour geometry for triangle-list geometry presented as set of generic sections.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="values">Values array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="levels">Contours levels.</param>
            <param name="bounds">Bounds of the data.</param>
            <returns>Calculated contour line geometry.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.SectionBuilder">
            <summary>
            Contains methods for section compute.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilder.GetSectionVertices(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane},AtomicusChart.Interface.CameraView.Bounds)">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="planes">Section planes.</param>
            <param name="bounds">Bounds of the data.</param>
            <returns>Calculated section line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilder.GetSectionVertices(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane})">
            <summary>
            Computes contour geometry for triangle-list geometry (non-strip lines) presented as set of <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> vertices.
            </summary>
            <param name="positions">Vertices positions array.</param>
            <param name="indices">Grid connection indices array.</param>
            <param name="planes">Section planes.</param>
            <returns>Calculated section line geometry.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilder.GetSections(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane})">
            <summary>
            Computes sections for the specified geometry and planes.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="indices">Grid indices array.</param>
            <param name="planes">Planes collection.</param>
            <returns>Computation result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilder.GetSections(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane},AtomicusChart.Interface.CameraView.Bounds)">
            <summary>
            Computes sections for the specified geometry and planes.
            </summary>
            <param name="positions">Positions array.</param>
            <param name="indices">Grid indices array.</param>
            <param name="planes">Planes collection.</param>
            <param name="bounds">Geometry bounds.</param>
            <returns>Computation result.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.ClippingResult`1">
            <summary>
            Contains geometry clipping result fields.
            </summary>
            <typeparam name="TVertex">Geometry vertex type.</typeparam>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.ClippingResult`1.ShapeVertices">
            <summary>
            Contains reconstructed geometry vertices.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.ClippingResult`1.ShapeIndices">
            <summary>
            Contains reconstructed geometry indices.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.ClippingResult`1.Sections">
            <summary>
            Contains <see cref="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection"/> list of the clipping section faces.
            The sections might be converted to point and triangulated to get result surface.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ClippingResult`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.ClippingResult`1"/>.
            </summary>
            <param name="shapeVertices">Shape vertices.</param>
            <param name="shapeIndices">Shape indices.</param>
            <param name="sections">Plane sections.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleClippingHelperBase">
            <summary>
            Contains helper functions for triangle geometry clipping.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleClippingHelperBase.GetClippedGeometry(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],AtomicusChart.Interface.Data.Plane)">
            <summary>
            Computes the geometry clipping result. Note: doesn't includes triangulated sections.
            </summary>
            <param name="vertices">Positions array.</param>
            <param name="indices">Indices array.</param>
            <param name="sectionPlane">Plane for clipping.</param>
            <returns>Result of clipping.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleClippingHelperBase.GetClippedGeometry``1(AtomicusChart.Interface.Processing.Traits.IVertexReader{``0},System.Int32[],AtomicusChart.Interface.Data.Plane,AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{``0,AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{``0})">
            <summary>
            Computes the geometry clipping result. Note: doesn't includes triangulated sections.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexReader">Vertex reader.</param>
            <param name="indices">Indices array.</param>
            <param name="sectionPlane">Plane for clipping.</param>
            <param name="positionAccessor">Vertex position accessor.</param>
            <param name="linearInterpolator">Vertex linear interpolator.</param>
            <returns>Result of clipping.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleClippingHelperBase.OptimizeGeometry``1(``0[],System.Int32[])">
            <summary>
            Returns result of the geometry optimization (deleting repeating vertices and triangles).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertices">Vertex array.</param>
            <param name="indices">Index array.</param>
            <returns>Result of optimization as pair of vertex array and index array.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleClippingHelperBase.TriangulateConvexSections``1(System.Collections.Generic.List{AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection},AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{``0,AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns result of the convex section geometry reconstruction. Extracts the positions from the sections and triangulates it.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="sections">Sections collection.</param>
            <param name="positionAccessor">Vertex position accessor.</param>
            <param name="planeNormal">Normal to the convex plane.</param>
            <returns>Result of the triangulation. Null components if not triangulated.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleContourHelper">
            <summary>
            Contains helper methods for triangulated data value contour construction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleContourHelper.GetContours``1(AtomicusChart.Interface.Processing.Traits.IVertexValueReader{``0},System.Int32[],AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{``0},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Processes sections from the specified abstract input parameters.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexReader">Vertices reader.</param>
            <param name="indices">Grid indices.</param>
            <param name="interpolator">Vertex interpolator.</param>
            <param name="levels">Section collection.</param>
            <returns>List of sections for each contour.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleContourHelper.FilterBounds(System.Collections.Generic.IEnumerable{System.Single},AtomicusChart.Interface.Data.OneAxisBounds)">
            <summary>
            Filters the levels with the specified range.
            </summary>
            <param name="levels">Levels collection.</param>
            <param name="range">Data bounds.</param>
            <returns>Filtered valid levels indices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleContourHelper.GetSection``1(AtomicusChart.Interface.Data.VertexTriangle{``0}@,AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@,AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{``0},System.Int32,System.Single)">
            <summary>
            Computes triangle section at the specified level.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexTriangle">Vertex triangle.</param>
            <param name="valueTriangle">Value triangle.</param>
            <param name="indexTriangle">Index triangle.</param>
            <param name="vertexInterpolator">Vertex interpolator instance.</param>
            <param name="triangleIndex">Triangle index.</param>
            <param name="level">Section level.</param>
            <returns>Result of section compute.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.ContourTriangleSectionBuilder`1">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder`1"/> for contour compute.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Sections.ContourTriangleSectionBuilder`1.PrimitiveCount">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourTriangleSectionBuilder`1.#ctor(AtomicusChart.Interface.Processing.Traits.IVertexValueReader{`0},AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{`0},System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.ContourTriangleSectionBuilder`1"/>.
            </summary>
            <param name="vertexReader">Vertex-value reader instance.</param>
            <param name="vertexInterpolator">Vertex interpolator instance.</param>
            <param name="indices">Triangle indices.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ContourTriangleSectionBuilder`1.GetSection(System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelper">
            <summary>
            Contains helper methods for section compute.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelper.GetSections``1(AtomicusChart.Interface.Processing.Traits.IVertexReader{``0},System.Int32[],AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{``0},AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{``0,AtomicusChart.Interface.Data.Vector3F},System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane})">
            <summary>
            Processes sections from the specified abstract input parameters.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexReader">Vertices reader.</param>
            <param name="indices">Grid indices.</param>
            <param name="interpolator">Vertex interpolator.</param>
            <param name="positionAcessor">Vertex position accessor.</param>
            <param name="planes">Section collection.</param>
            <returns>List of sections for each contour.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelper.FilterPlanes(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Plane},AtomicusChart.Interface.CameraView.Bounds)">
            <summary>
            Filters the planes with the specified range.
            </summary>
            <param name="planes">Plane collection.</param>
            <param name="range">Data bounds.</param>
            <returns>Filtered valid planes indices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelper.IsInBounds(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.CameraView.Bounds)">
            <summary>
            Returns true if the plane intersects the data bounds.
            </summary>
            <param name="planeOrigin">Section plane origin point.</param>
            <param name="planeNormal">Section plane normal (must be normalized).</param>
            <param name="range">Data bounds.</param>
            <returns>True if located.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelper.GetSection``1(AtomicusChart.Interface.Data.VertexTriangle{``0}@,AtomicusChart.Interface.Data.VertexTriangle{AtomicusChart.Interface.Data.Vector3F}@,AtomicusChart.Interface.Data.IndexedTriangle@,AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{``0},System.Int32,AtomicusChart.Interface.Data.Plane)">
            <summary>
            Gets trianglular section with the specified parameters.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="vertexTriangle">Vertex triangle.</param>
            <param name="positionTriangle">Positions triangle.</param>
            <param name="indexTriangle">Index triangle.</param>
            <param name="vertexInterpolator">Vertex interpolator instance.</param>
            <param name="triangleIndex">Triangle index.</param>
            <param name="plane">Plane for section compute.</param>
            <returns>Result section (or null if no intersection).</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.SectionBuilderContext`1">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder`1"/> siutable for plane section compute.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Sections.SectionBuilderContext`1.PrimitiveCount">
            ,inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilderContext`1.#ctor(AtomicusChart.Interface.Processing.Traits.IVertexReader{`0},AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{`0,AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator{`0},System.Int32[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.SectionBuilderContext`1"/>.
            </summary>
            <param name="vertexReader">Vertex reader instance.</param>
            <param name="vertexPositionAccessor">Vertex position accessor instance.</param>
            <param name="vertexInterpolator">Vertex interpolator instance.</param>
            <param name="indices">Triangle indices.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.SectionBuilderContext`1.GetSection(System.Int32,AtomicusChart.Interface.Data.Plane)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelperBase">
            <summary>
            Contains helper methods for triangulated data section construction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelperBase.ComputeFilteredSections``1(System.Func{``0[],System.Collections.Generic.List{AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection}[]},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.Int32})">
            <summary>
            Computes filtered sections.
            </summary>
            <typeparam name="TIntersector">Intersector type.</typeparam>
            <param name="sectionsComputer">Sections computer function.</param>
            <param name="sections">Sections collection.</param>
            <param name="filteredSections">Filtered sections indices.</param>
            <returns>Compute result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelperBase.ConvertSectionsToVector3FLines(System.Collections.Generic.List{AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection}[])">
            <summary>
            Converts the triangle section list into line geometry positions (non-strip line).
            </summary>
            <param name="sections">Sections collection.</param>
            <returns>Result sections positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelperBase.ConvertSectionsToLines``2(AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{``0,``1},System.Collections.Generic.List{AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection}[])">
            <summary>
            Converts the triangle section list into line geometry positions (non-strip line).
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TPosition">Position type.</typeparam>
            <param name="traits">Vertex traits.</param>
            <param name="sections">Sections collection.</param>
            <returns>Result sections positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionHelperBase.GetSections``1(System.Collections.Generic.IEnumerable{``0},AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder{``0})">
            <summary>
            Processes sections from the specified abstract input parameters.
            </summary>
            <typeparam name="TIntersector">Intersector type.</typeparam>
            <param name="sections">Sections collection.</param>
            <param name="triangleSectionBuilder">Section builder instance.</param>
            <returns>Result sections.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder`1">
            <summary>
            Represents section builder interface.
            </summary>
            <typeparam name="TIntersector">Intersector type.</typeparam>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder`1.PrimitiveCount">
            <summary>
            Gets the builder primitive count.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.ITriangleSectionBuilder`1.GetSection(System.Int32,`0)">
            <summary>
            Computes section of the specified triangle.
            </summary>
            <param name="primitiveIndex">Index of the primitive</param>
            <param name="intersector">Intersection value.</param>
            <returns>Result section of null if no intersection.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionType">
            <summary>
            Defines the type of ContourSegment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionType.Regular">
            <summary>
            Section is regular segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionType.EntireTriangle">
            <summary>
            Section is entire triangle (triangle belongs to section plane).
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionType.TriangleSide">
            <summary>
            Section is one of triangle's sides. 
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionType.TriangleVertex">
            <summary>
            Section is a single triangle's vertex.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection">
            <summary>
            Represents a section of triangle by plane.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection.Type">
            <summary>
            Defines a type of segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection.TriangleIndex">
            <summary>
            Index of the triangle the section belongs to.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection.#ctor(AtomicusChart.Interface.Processing.Sections.TriangleSectionType)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSection"/>.
            </summary>
            <param name="type">Section type.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1">
            <summary>
            Represents a section of triangle by plane that is a segment.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType">
            <summary>
            Enumerates possible states of two AbstractTriangleSegmentSection's adjacency.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType.No">
            <summary>
            Triangle segments are not adjacent.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType.LeftLeft">
            <summary>
             "Left" end of first triangle segment is adjacent to "left" end of second segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType.LeftRight">
            <summary>
             "Left" end of first triangle segment is adjacent to "right" end of second segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType.RightLeft">
            <summary>
             "Right" end of first triangle segment is adjacent to "left" end of second segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.TriangleSegmentAdjacencyType.RightRight">
            <summary>
             "Right" end of first triangle segment is adjacent to "right" end of second segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.Point1">
            <summary>
            First ("left") point of segment.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.Point2">
            <summary>
            Second ("right") point of segment.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.GetAdjacency(AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection{`0})">
            <summary>
            Checks if this AbstractTriangleSegmentSection is adjacent to other.
            </summary>
            <param name="oth">Other AbstractTriangleSegmentSection.</param>
            <returns>Adjacency type.
            "No", if this is not adjacent to oth.
            "LeftLeft", if this Point1 is equal to oth Point1. 
            "LeftRight", if this Point1 is equal to oth Point2. 
            "RightLeft", if this Point2 is equal to oth Point1. 
            "RightRight", if this Point2 is equal to oth Point2. 
            </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1.#ctor(AtomicusChart.Interface.Processing.Sections.TriangleSectionType)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection`1"/>.
            </summary>
            <param name="type">Section type.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1">
            <summary>
            Represents a segment that appears at section of triangulation primitive (triangle for 2D map) by contour section plane.
            Scheme:
            
             IndexOrigin11 and IndexOrigin21
                       \
                        /\
                       /  \
             Point1 - *----* - Point2
                     /      \
                    /        \
                   /__________\ 
                 /              \    
            IndexOrigin12       IndexOrigin22.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.IndexOrigin11">
            <summary>
            First ("left") index of triangle side, to which Point1 belongs.
            Should be always less than IndexOrigin12 for easier operations.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.IndexOrigin12">
            <summary>
            Second ("right") index of triangle side, to which Point1 belongs.
            Should be always larger than IndexOrigin11 for easier operations.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.IndexOrigin21">
            <summary>
            First ("left") index of triangle side, to which Point2 belongs.
            Should be always less than IndexOrigin22 for easier operations.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.IndexOrigin22">
            <summary>
            Second ("right") index of triangle side, to which Point2 belongs.
            Should be always larger than IndexOrigin21 for easier operations.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.CommonVertexIndex">
            <summary>
            Index of the section edges common vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.GetAdjacency(AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection{`0})">
            <summary>
            Overrides AbstractTriangleSegmentSection.GetAdjacency(AbstractTriangleSegmentSection).
            Checks if this triangle section segment is adjacent to other.
            </summary>
            <param name="oth">Other AbstractTriangleSegmentSection.</param>
            <returns>Adjacency type.
            "No", if this is not adjacent to oth.
            "LeftLeft", if this Point1 is equal to oth Point1. 
            "LeftRight", if this Point1 is equal to oth Point2. 
            "RightLeft", if this Point2 is equal to oth Point1. 
            "RightRight", if this Point2 is equal to oth Point2. 
            </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionRegular`1.CompareTo(System.Object)">
            <summary>
            Compares this ContourSegment to other by indexes of triangle side, to which Point1 belongs.
            </summary>
            <param name="obj">Other ContourSegment.</param>
            <returns>Standard CompareTo return.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1">
            <summary>
            Represents a triangle that appears if section of triangulation primitive (triangle for 2D map) by contour section plane is triangle itself.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.PointA">
            <summary>
            First point of triangle.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.PointB">
            <summary>
            Second point of triangle.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.PointC">
            <summary>
            Third point of triangle.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.IndexA">
            <summary>
            Index of the first triangle vertex.
            Should be less than IndexB and IndexC.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.IndexB">
            <summary>
            Index of the second triangle vertex.
            Should be less than IndexC and larger than IndexA.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.IndexC">
            <summary>
            Index of the third triangle vertex.
            Should be larger than IndexA and IndexB.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.IsAdjacent(AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle{`0})">
            <summary>
            Checks if this TriangleSectionEntireTriangle is adjacent to other. Adjacent means shares a side.
            </summary>
            <param name="oth">Other TriangleSectionEntireTriangle.</param>
            <returns>True, if adjacent, false otherwise.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle`1.IsAdjacent(AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide{`0})">
            <summary>
            Checks if this TriangleSectionEntireTriangle is adjacent to TriangleSectionTriangleSide. Adjacent means shares a side.
            </summary>
            <param name="oth">Some TriangleSectionTriangleSide.</param>
            <returns>True, if adjacent, false otherwise.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1">
            <summary>
            Represents a segment appears if section of triangulation primitive (triangle for 2D map) by contour section plane is a triangle side.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1.Index1">
            <summary>
            Index of the first triangle's side vertex.
            Should be always smaller than Index2 for easier operations.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1.Index2">
            <summary>
            Index of the second triangle's side vertex.
            Should be always larger than Index1 for easier operations.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1.GetAdjacency(AtomicusChart.Interface.Processing.Sections.AbstractTriangleSegmentSection{`0})">
            <summary>
            Overrides AbstractTriangleSegmentSection.GetAdjacency(AbstractTriangleSegmentSection).
            Checks if this triangle section segment is adjacent to other.
            </summary>
            <param name="oth">Other AbstractTriangleSegmentSection.</param>
            <returns>Adjacency type.
            "No", if this is not adjacent to oth.
            "LeftLeft", if this Point1 is equal to oth Point1. 
            "LeftRight", if this Point1 is equal to oth Point2. 
            "RightLeft", if this Point2 is equal to oth Point1. 
            "RightRight", if this Point2 is equal to oth Point2. 
            </returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleSide`1.IsAdjacent(AtomicusChart.Interface.Processing.Sections.TriangleSectionEntireTriangle{`0})">
            <summary>
            Checks if this TriangleSectionTriangleSide is adjacent to TriangleSectionEntireTriangle. Adjacent means shares a side.
            </summary>
            <param name="oth">Some TriangleSectionEntireTriangle.</param>
            <returns>True, if adjacent, false otherwise.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleVertex`1">
            <summary>
            Represents a vertex that appears if section of triangulation primitive (triangle for 2D map) by contour section plane is a single vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleVertex`1.Point">
            <summary>
            Position of triangle's vertex.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleVertex`1.Index">
            <summary>
            Index of triangle's vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleVertex`1.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Sections.TriangleSectionTriangleVertex`1"/>.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Interaction.IEventListener"/> with default snapping mechanics.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.CurrentSnapData">
            <summary>
            Gets current snap data.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.CursorPosition">
            <summary>
            Gets current cursor position.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.#ctor(AtomicusChart.Interface.Processing.Snapping.ISnapTarget,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener"/> with the specified parameters.
            </summary>
            <param name="snapTarget">Snap target instance.</param>
            <param name="snapContext">Snap context instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.OnCursorMove">
            <summary>
            The event is called on cursor move.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.OnSnapChanged">
            <summary>
            The event is called on snap changed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.OnMouseEnter(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The event is called on chart mouse enter.
            </summary>
            <param name="arg">Event arguments instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.OnMouseLeave(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            The event is called on chart mouse leave.
            </summary>
            <param name="arg">Event arguments instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.ProjectCursor(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <summary>
            Returns result of cursor projection.
            </summary>
            <param name="arg">Event arguments instance.</param>
            <returns>Projection result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseDown(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseUp(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseMove(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseEnter(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseLeave(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseDoubleClick(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.MouseWheel(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <interitdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.KeyDown(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc />
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ChartSnapDefaultEventListener.KeyUp(AtomicusChart.Interface.Interaction.IChartEventArg)">
            <inheritdoc />
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapContext"/> that simply measures distance between object position and nearests snap point.
            This context type is suitable mostly for cases, when all geometry points lie in the same plane.
            As alternate context with relative distance measurement see <see cref="T:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext"/>.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.Change">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.ExtendedExtractingRequired">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.DistanceMeasurer">
            <summary>
            Gets or sets the context distance measurer object.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.SnapDefaultDistance">
            <summary>
            Gets or sets the context maximum affect distance value.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.SnapDistance">
            <summary>
            Gets or sets the context maximum affect distance value (used for <see cref="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.DistanceMeasurer"/> only).
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.SnapMode">
            <summary>
            Gets or sets the snap marker mode.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.Origin">
            <summary>
            Gets the contex origin position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.Result">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext"/> structure.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.TransformPoint(AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.SubmitPoint(AtomicusChart.Interface.Processing.Snapping.SnapData)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.ResetOrigin(AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.MeasureDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.DefaultSnapContext.CreateProxy">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext">
            <summary>
            Represents context may be used for on-screen projection in-radius snapping.
            Uses relative distance measurement mechanics.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.Change">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.ExtendedExtractingRequired">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.DistanceMeasurer">
            <summary>
            Gets or sets the context maximum affect distance value.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.Transform">
            <summary>
            Gets or sets the context projection matrix.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.SnapDefaultDistance">
            <summary>
            Gets or sets the context maximum affect distance value.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.SnapRadius">
            <summary>
            Gets or sets the context maximum affect radius value (in relative coordinates). Used for <see cref="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.DistanceMeasurer"/> only.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.IsOrigin2D">
            <summary>
            Gets or sets the context origin position interpretation rule.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.SnapMode">
            <summary>
            Gets or sets the snap marker mode.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.Origin">
            <summary>
            Gets the context origin position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.Result">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext"/> class with default settings.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.TransformPoint(AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.SubmitPoint(AtomicusChart.Interface.Processing.Snapping.SnapData)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.ResetOrigin(AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.MeasureDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Contexts.TransformSnapContext.CreateProxy">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapMode">
            <summary>
            Represents available snap interactor modes enumerator.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.SnapMode.SnapOnly">
            <summary>
            Supports snapping only.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.SnapMode.Hybrid">
            <summary>
            Supports snapping and free mode if not nearing a snap point.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.ISnapContext">
            <summary>
            Represents context responsible for data analyzing during snapping.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.ISnapContext.Change">
            <summary>
            The event is called any time the context changes it's state.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.ISnapContext.ExtendedExtractingRequired">
            <summary>
            Returns true if the context requires entended point extracting. It means that target should submit all possible points into it.
            It can be usefull if object that submit points into the context uses origin point as foundation for optimization, but skips some points because of this reason.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapContext.SubmitPoint(AtomicusChart.Interface.Processing.Snapping.SnapData)">
            <summary>
            Submits the point to the context.
            </summary>
            <param name="data">Snap data.</param>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.ISnapContext.Result">
            <summary>
            Gets the context result point.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapContext.TransformPoint(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Gets the point the context internal representation.
            </summary>
            <param name="point">Input point.</param>
            <returns>Result point.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapContext.ResetOrigin(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Resets the context origin position.
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapContext.MeasureDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns result of distance measurement between two specified points.
            </summary>
            <param name="point0">First point.</param>
            <param name="point1">Second point.</param>
            <returns>Result distance.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapContext.CreateProxy">
            <summary>
            Create the context proxy object (typically used for parallel processing).
            </summary>
            <returns>Ready-to-use proxy object of the context.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapParallelProcessor">
            <summary>
            Represents snap parallel processor delegate.
            </summary>
            <param name="partIndex">Part index.</param>
            <param name="index">Range index.</param>
            <param name="length">Range length.</param>
            <param name="context"></param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapParallelHelper">
            <summary>
            Represents snap parallel processing helper class.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapParallelHelper.Process(System.Int32,System.Int32,AtomicusChart.Interface.Processing.Snapping.ISnapContext,AtomicusChart.Interface.Processing.Snapping.SnapParallelProcessor)">
            <summary>
            Performs parallel snap processing.
            </summary>
            <param name="size">Data size.</param>
            <param name="parallelLevel">Task count.</param>
            <param name="context">Snap context.</param>
            <param name="processor">Snap context [partIndex; rangeIndex; rangeLength; snapContext].</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer">
            <summary>
            Represents interface responsible for two point weight-distance measuring.
            Use the inteface to implement your nearest point search logic.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Returns distance between the two points.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">second point.</param>
            <returns>Result length.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.DefaultPointDistanceMeasurer">
            <summary>
            Represents default implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.DefaultPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.XPointDistanceMeasurer">
            <summary>
            Represents X difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.XPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.YPointDistanceMeasurer">
            <summary>
            Represents Y difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.YPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.ZPointDistanceMeasurer">
            <summary>
            Represents Z difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ZPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.XyPointDistanceMeasurer">
            <summary>
            Represents XY difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.XyPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.XzPointDistanceMeasurer">
            <summary>
            Represents XZ difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.XzPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.YzPointDistanceMeasurer">
            <summary>
            Represents Y difference based implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.IPointDistanceMeasurer"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.YzPointDistanceMeasurer.GetDistance(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget">
            <summary>
            Represents interface for objects may be used during snapping operations.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.ISnapTarget.SnapChange">
            <summary>
            The event is called any time the snap state of the object is changed.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.ISnapTarget.ExtractSnapPoints(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <summary>
            Returns nearest to the specified point base point of the object. 
            </summary>
            <param name="point">Object position.</param>
            <param name="context">Snap context.</param>
            <returns>Nearest point.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapData">
            <summary>
            Represents snapping result data structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.SnapData.Owner">
            <summary>
            Gets the point owner.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.SnapData.Context">
            <summary>
            Gets the data context.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.SnapData.Point">
            <summary>
            Gets the snap point position.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapData.#ctor(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Initializes new instance of see	<see cref="T:AtomicusChart.Interface.Processing.Snapping.SnapData"/> with the specified parameters.
            </summary>
            <param name="point">Snap position.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapData.#ctor(AtomicusChart.Interface.Data.Vector3F,System.Object)">
            <summary>
            Initializes new instance of see	<see cref="T:AtomicusChart.Interface.Processing.Snapping.SnapData"/> with the specified parameters.
            </summary>
            <param name="point">Snap position.</param>
            <param name="owner">Snap position owner.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapData.#ctor(AtomicusChart.Interface.Data.Vector3F,System.Object,System.Object)">
            <summary>
            Initializes new instance of see	<see cref="T:AtomicusChart.Interface.Processing.Snapping.SnapData"/> with the specified parameters.
            </summary>
            <param name="point">Snap position.</param>
            <param name="owner">Snap position owner.</param>
            <param name="context">Snap context.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapData.Equals(AtomicusChart.Interface.Processing.Snapping.SnapData)">
            <summary>
            Equality compares the objects.
            </summary>
            <param name="snapData">Second object.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapHelper">
            <summary>
            Contains helper functions for points snapping.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapHelper.ExtractPoints(AtomicusChart.Interface.Data.Vector3F[],System.Object,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <summary>
            Extracts points to the specified snap context.
            </summary>
            <param name="snapPoints">Source points array.</param>
            <param name="owner">Points owner.</param>
            <param name="context">Context for data output.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapHelper.ExtractPoints(AtomicusChart.Interface.Data.Vector3F[],System.Object,System.Int32,System.Int32,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <summary>
            Extracts points to the specified snap context.
            </summary>
            <param name="snapPoints">Source points array.</param>
            <param name="owner">Points owner.</param>
            <param name="index">Start index.</param>
            <param name="count">Points count.</param>
            <param name="context">Context for data output.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.SnapManager">
            <summary>
            Represents render data move interactor for snapping.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.SnapManager.SnapContext">
            <summary>
            Gets or sets the object used as snap information getter. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.SnapManager.SnapTarget">
            <summary>
            Gets or sets the object used as snap information getter. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.SnapManager.CurrentSnapData">
            <summary>
            Gets the marker current snapped data. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.SnapManager.TrackingPosition">
            <summary>
            Gets the manager tracking position (typically it's marker current position). This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.SnapManager.Active">
            <summary>
            Gets or sets the manager activity-enabled flag value. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapManager.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.SnapManager"/> with default settings.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapManager.#ctor(AtomicusChart.Interface.Processing.Snapping.ISnapTarget,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.SnapManager"/> with the given settings.
            </summary>
            <param name="target">Snap target object.</param>
            <param name="context">Snap context object.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapManager.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapManager.GetData(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Computes snap data for the specified point.
            </summary>
            <param name="position">Specific position.</param>
            <returns>Result snap data.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.SnapManager.UpdateSnap(AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Updates the snapping data. Use this function for external position sychronization.
            </summary>
            <param name="position">New position.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> containing set of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> objects.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.SnapChange">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.SnapObjects">
            <summary>
            Gets or sets the object snappable objects collection. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.#ctor(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Processing.Snapping.ISnapTarget})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget"/> with the given snap targets set.
            </summary>
            <param name="targets">Render data collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.CollectionSnapTarget.ExtractSnapPoints(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> presented by line.
            Uses edge projection algorithm.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.InternalSnapData">
            <summary>
            Represents <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget"/> snap data context.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.InternalSnapData.LowIndex">
            <summary>
            Gets low point index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.InternalSnapData.HighIndex">
            <summary>
            Gets high point index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.InternalSnapData.IsVertex">
            <summary>
            Returns true if the snap data is a vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.InternalSnapData.ToString">
            <inheritdoc/>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.SnapChange">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.VertexSnapDistance">
            <summary>
            Gets or sets the target vertex snap distance. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.IsStrip">
            <summary>
            Gets or sets the points strip layout flag. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.Points">
            <summary>
            Gets or sets the target point array. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.#ctor">
            <summary>
            Initializes new instance of see <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget"/> with default settings.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.#ctor(AtomicusChart.Interface.Data.Vector3F[])">
            <summary>
            Initializes new instance of see <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget"/> with the given settings.
            </summary>
            <param name="points">Points array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.#ctor(AtomicusChart.Interface.Data.Vector3F[],System.Boolean)">
            <summary>
            Initializes new instance of see <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget"/> with the given settings.
            </summary>
            <param name="points">Points array.</param>
            <param name="isStrip">Strip flag.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.LineSnapTarget.ExtractSnapPoints(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> containing set of points.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget.SnapChange">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget.SnapPoints">
            <summary>
            Gets or sets the object snap point collection. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget.#ctor(AtomicusChart.Interface.Data.Vector3F[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget"/> with the given point set.
            </summary>
            <param name="points">Points array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.PointCollectionSnapTarget.ExtractSnapPoints(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> containing set of render data.
            By default snaps to the <see cref="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.Transform"/> translation point, otherwise if render data class implements <see cref="T:AtomicusChart.Interface.Processing.Snapping.ISnapTarget"/> then uses it's internal method.
            Doesn't snap to invisible data (see <see cref="P:AtomicusChart.Interface.PresentationData.BaseTypes.RenderData.IsVisible"/>).
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.SnapChange">
            <inheritdoc/>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.SnapData">
            <summary>
            Gets or sets the object snap render data collection. This property implements INotifyPropertyChanged and INotifyPropertyChanging.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.#ctor(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.PresentationData.BaseTypes.RenderData})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget"/> with the given render data set.
            </summary>
            <param name="renderData">Render data collection.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Snapping.Targets.RenderDataCollectionSnapTarget.ExtractSnapPoints(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Processing.Snapping.ISnapContext)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator`1">
            <summary>
            Contains methods for vertex linear interpolation.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator`1.InterpolateVertex(`0@,`0@,System.Single)">
            <summary>
            Interpolates the vertices.
            </summary>
            <param name="vertex0">First vertex.</param>
            <param name="vertex1">Second vertex.</param>
            <param name="factor">Interpolation factor.</param>
            <returns>Interpolation result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator`1.IsEqual(`0@,`0@,System.Single)">
            <summary>
            Compares the two vertices.
            </summary>
            <param name="vertex0">First vertex.</param>
            <param name="vertex1">Second vertex.</param>
            <param name="epsilon">Compare epsilon.</param>
            <returns>True if equal with the epsilon.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.FloatVertexLinearInterpolator">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator`1"/> for <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Traits.FloatVertexLinearInterpolator.Instance">
            <summary>
            Gets the interpolator instance.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.FloatVertexLinearInterpolator.InterpolateVertex(System.Single@,System.Single@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.FloatVertexLinearInterpolator.IsEqual(System.Single@,System.Single@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.Vector3FVertexLinearInterpolator">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexLinearInterpolator`1"/> for <see cref="T:AtomicusChart.Interface.Data.Vector3F"/> type.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Traits.Vector3FVertexLinearInterpolator.Instance">
            <summary>
            Gets the interpolator instance.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.Vector3FVertexLinearInterpolator.InterpolateVertex(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.Vector3FVertexLinearInterpolator.IsEqual(AtomicusChart.Interface.Data.Vector3F@,AtomicusChart.Interface.Data.Vector3F@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor`2">
            <summary>
            Contains methods for vertex position accessing.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TPosition">Position type.</typeparam>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor`2.GetPosition(`0@,`1@)">
            <summary>
            Gets the vertex position.
            </summary>
            <param name="vertex">Vertex.</param>
            <param name="position">Position.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor`2.GetPositions(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.VertexTriangle{`1}@)">
            <summary>
            Gets the triangle positions.
            </summary>
            <param name="vertexTriangle">Vertex triangle.</param>
            <param name="positionTriangle">Positions triangle.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor`2.GetPositions(`0[],System.Int32,System.Int32,`1[],System.Int32)">
            <summary>
            Gets the vertices positions.
            </summary>
            <param name="source">Vertices array.</param>
            <param name="sourceIndex">Source index.</param>
            <param name="count">Vertex count.</param>
            <param name="destination">Destination array.</param>
            <param name="destinationIndex">Destination index.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.DefaultVertexPositionAccessor`1">
            <summary>
            Represents default implementation of the vertex position accessor.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Traits.DefaultVertexPositionAccessor`1.Instance">
            <summary>
            Gets the instance of the accessor.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVertexPositionAccessor`1.GetPosition(`0@,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVertexPositionAccessor`1.GetPositions(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.VertexTriangle{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVertexPositionAccessor`1.GetPositions(`0[],System.Int32,System.Int32,`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1">
            <summary>
            Represents vertex-value reader interface.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1.GetLevel(System.Int32)">
            <summary>
            Gets level at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1.GetLevelTriangle(AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <summary>
            Gets level triangle.
            </summary>
            <param name="levelTriangle">Output level triangle.</param>
            <param name="indexedTriangle">Input indexed triangle.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1.GetVertexAndLevelTriangles(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <summary>
            Gets level and vertex triangles.
            </summary>
            <param name="vertexTriangle">Output vertex triangle.</param>
            <param name="levelTriangle">Output level triangle.</param>
            <param name="indexedTriangle">Input indexed triangle.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader">
            <summary>
            Represents default implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1"/> for primitive geometry contouring.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader.#ctor(AtomicusChart.Interface.Data.Vector3F[],System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader"/>.
            </summary>
            <param name="array">Positions array.</param>
            <param name="axisIndex">axis index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader.GetLevel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader.GetLevelTriangle(AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DefaultVector3FVertexValueReader.GetVertexAndLevelTriangles(AtomicusChart.Interface.Data.VertexTriangle{AtomicusChart.Interface.Data.Vector3F}@,AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1">
            <summary>
            Represents default implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexValueReader`1"/> for value geometry contouring.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1.#ctor(`0[],System.Single[])">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1"/>.
            </summary>
            <param name="vertexArray">Vertex array.</param>
            <param name="valueArray">Value array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1.GetLevel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1.GetLevelTriangle(AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.DoubleVertexValueReader`1.GetVertexAndLevelTriangles(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.VertexTriangle{System.Single}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.IVertexReader`1">
            <summary>
            Represents vertex reader interface.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Traits.IVertexReader`1.Count">
            <summary>
            Gets vertex count.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexReader`1.GetVertex(`0@,System.Int32)">
            <summary>
            Gets vertex by index.
            </summary>
            <param name="vertex">Out vertex.</param>
            <param name="index">Vertex index.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexReader`1.GetVertexTriangle(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <summary>
            Gets vertex triangle by index triangle.
            </summary>
            <param name="vertexTriangle">Result vertex triangle.</param>
            <param name="indexedTriangle">Input indexed triangle.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.IVertexReader`1.GetVertices(System.Int32,System.Int32,`0[],System.Int32)">
            <summary>
            Copies the vertices to the specified array.
            </summary>
            <param name="sourceIndex">Source index.</param>
            <param name="count">Count of vertices.</param>
            <param name="destination">Destination array.</param>
            <param name="destinationIndex">Destination array index.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1">
            <summary>
            Represents array implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexReader`1"/>.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.VertexArray">
            <summary>
            Base vertex array.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.#ctor(`0[])">
            <summary>
            Default c-tor.
            </summary>
            <param name="array">Vertex array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.GetVertex(`0@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.GetVertexTriangle(AtomicusChart.Interface.Data.VertexTriangle{`0}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.ArrayVertexReader`1.GetVertices(System.Int32,System.Int32,`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1">
            <summary>
            Represents implementation of <see cref="T:AtomicusChart.Interface.Processing.Traits.IVertexReader`1"/> for position extraction.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1.#ctor(`0[],AtomicusChart.Interface.Processing.Traits.IVertexPositionAccessor{`0,AtomicusChart.Interface.Data.Vector3F})">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1"/>.
            </summary>
            <param name="vertexArray">Vertex array.</param>
            <param name="positionAccessor">Position accessor instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1.GetVertex(AtomicusChart.Interface.Data.Vector3F@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1.GetVertexTriangle(AtomicusChart.Interface.Data.VertexTriangle{AtomicusChart.Interface.Data.Vector3F}@,AtomicusChart.Interface.Data.IndexedTriangle@)">
            <inheritdoc/>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Traits.VertexArrayPositionReader`1.GetVertices(System.Int32,System.Int32,AtomicusChart.Interface.Data.Vector3F[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D">
            <summary>
            Divide-and-conquer based Delaunay 2D triangulator class.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Primitives">
            <summary>
            Provides some primitives regularly used in computational geometry.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Primitives.ExactInit">
             <summary>
             Initialize the variables used for exact arithmetic.
             </summary>
             <remarks>
             'epsilon' is the largest power of two such that 1.0 + epsilon = 1.0 in
             doubleing-Vertex arithmetic. 'epsilon' bounds the relative roundoff
             error. It is used for doubleing-Vertex error analysis.
            
             'splitter' is used to split doubleing-Vertex numbers into two half-
             length significants for exact multiplication.
            
             I imagine that a highly optimizing compiler might be too smart for its
             own good, and somehow cause this routine to fail, if it pretends that
             doubleing-Vertex arithmetic is too much like real arithmetic.
            
             Don't change this routine unless you fully understand it.
             </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Primitives.CounterClockwise(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
             <summary>
             Check, if the three vertices appear in counterclockwise order. The result is 
             also a rough approximation of twice the signed area of the triangle defined 
             by the three vertices.
             </summary>
             <param name="pa">Vertex a.</param>
             <param name="pb">Vertex b.</param>
             <param name="pc">Vertex c.</param>
             <returns>Return a positive value if the Vertexs pa, pb, and pc occur in 
             counterclockwise order; a negative value if they occur in clockwise order; 
             and zero if they are collinear.</returns>
             <remarks>
             Uses exact arithmetic if necessary to ensure a correct answer. The
             result returned is the determinant of a matrix. This determinant is
             computed adaptively, in the sense that exact arithmetic is used only to
             the degree it is needed to ensure that the returned value has the
             correct sign. Hence, this function is usually quite fast, but will run
             more slowly when the input vertices are collinear or nearly so.
            
             See Robust Predicates paper for details.
             </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Primitives.InCircle(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
             <summary>
             Check if the Vertex pd lies inside the circle passing through pa, pb, and pc. The 
             Vertexes pa, pb, and pc must be in counterclockwise order, or the sign of the result 
             will be reversed.
             </summary>
             <param name="pa">Vertex a.</param>
             <param name="pb">Vertex b.</param>
             <param name="pc">Vertex c.</param>
             <param name="pd">Vertex d.</param>
             <returns>Return a positive value if the Vertex pd lies inside the circle passing through 
             pa, pb, and pc; a negative value if it lies outside; and zero if the four Vertexs 
             are cocircular.</returns>
             <remarks>
             Uses exact arithmetic if necessary to ensure a correct answer.  The
             result returned is the determinant of a matrix.  This determinant is
             computed adaptively, in the sense that exact arithmetic is used only to
             the degree it is needed to ensure that the returned value has the
             correct sign.  Hence, this function is usually quite fast, but will run
             more slowly when the input Vertexs are cocircular or nearly so.
            
             See Robust Predicates paper for details.
             </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Primitives.NonRegular(AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D,AtomicusChart.Interface.Data.Vector2D)">
            <summary>
            Return a positive value if the Vertex pd is incompatible with the circle 
            or plane passing through pa, pb, and pc (meaning that pd is inside the 
            circle or below the plane); a negative value if it is compatible; and 
            zero if the four Vertexes are co-circular/coplanar. The Vertexes pa, pb, and 
            pc must be in counterclockwise order, or the sign of the result will be 
            reversed.
            </summary>
            <param name="pa">Vertex a.</param>
            <param name="pb">Vertex b.</param>
            <param name="pc">Vertex c.</param>
            <param name="pd">Vertex d.</param>
            <returns>Return a positive value if the Vertex pd lies inside the circle passing through 
            pa, pb, and pc; a negative value if it lies outside; and zero if the four Vertexes 
            are co-circular.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle">
            <summary>
            The triangle data structure.
            </summary>
            <remarks>
            Each triangle contains three pointers to adjoining triangles, plus three pointers to vertices.
            </remarks>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle.Hash">
            <summary>
            Gets the triangle hash value for mesh hash set.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle.Neighbors">
            <summary>
            Gets the triangle neighbors triangles.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle.Vertices">
            <summary>
            Gets the triangle vertices.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle">
            <summary>
            An Orientationed Triangle.
            </summary>
            <remarks>
            Includes a pointer to a Triangle and Orientationation.
            The Orientationation denotes an edge of the Triangle. Hence, there are
            three possible Orientationations. By convention, each edge always points
            counterclockwise about the corresponding Triangle.
            </remarks>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Triangle">
            <summary>
            Gets or sets base triangle
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Orientation">
            <summary>
            Integer value from 0 to 2
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Sym(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Find the abutting Triangle; same edge. [sym(abc) -> ba*]
            </summary>
            <remarks>
            Note that the edge direction is necessarily reversed, because the handle specified 
            by an Orientationed Triangle is directed counterclockwise around the Triangle.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.SymSelf">
            <summary>
            Find the abutting Triangle; same edge. [sym(abc) -> ba*]
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Lnext(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Find the next edge (counterclockwise) of a Triangle. [lnext(abc) -> bca].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.LnextSelf">
            <summary>
            Find the next edge (counterclockwise) of a Triangle. [lnext(abc) -> bca].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Lprev(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Find the previous edge (clockwise) of a Triangle. [lprev(abc) -> cab].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.LprevSelf">
            <summary>
            Find the previous edge (clockwise) of a Triangle. [lprev(abc) -> cab].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.GetOrigin">
            <summary>
            Origin [org(abc) -> a].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.GetDestination">
            <summary>
            Destination [dest(abc) -> b].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.GetApex">
            <summary>
            Apex [apex(abc) -> c].
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.SetOrigin(System.Int32)">
            <summary>
            Sets origin vertex.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.SetDestination(System.Int32)">
            <summary>
            Set Destination
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.SetApex(System.Int32)">
            <summary>
            Set Apex
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Bond(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Bond two Triangles together at the resepective handles. [bond(abc, bad)]
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Dissolve(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle)">
            <summary>
            Dissolve a bond (from one side).  
            </summary>
            <remarks>Note that the other Triangle will still think it's connected to 
            this Triangle. Usually, however, the other Triangle is being deleted 
            entirely, or bonded to another Triangle, so it doesn't matter.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Copy(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Copy an Orientationed Triangle.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Equal(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle)">
            <summary>
            Test for equality of Orientationed Triangles.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle.Kill(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle)">
            <summary>
            Set a Triangle's deallocation.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext">
             <summary>
             Builds a delaunay triangulation using the divide-and-conquer algorithm.
             </summary>
             <remarks>
             The divide-and-conquer bounding box
            
             I originally implemented the divide-and-conquer and incremental Delaunay
             triangulations using the edge-based data structure presented by Guibas
             and Stolfi. Switching to a triangle-based data structure doubled the
             speed. However, I had to think of a few extra tricks to maintain the
             elegance of the original algorithms.
            
             The "bounding box" used by my variant of the divide-and-conquer
             algorithm uses one triangle for each edge of the convex hull of the
             triangulation. These bounding triangles all share a common apical
             vertex, which is represented by NULL and which represents nothing.
             The bounding triangles are linked in a circular fan about this NULL
             vertex, and the edges on the convex hull of the triangulation appear
             opposite the NULL vertex. You might find it easiest to imagine that
             the NULL vertex is a point in 3D space behind the center of the
             triangulation, and that the bounding triangles form a sort of cone.
            
             This bounding box makes it easy to represent degenerate cases. For
             instance, the triangulation of two vertices is a single edge. This edge
             is represented by two bounding box triangles, one on each "side" of the
             edge. These triangles are also linked together in a fan about the NULL
             vertex.
            
             The bounding box also makes it easy to traverse the convex hull, as the
             divide-and-conquer algorithm needs to do.
             </remarks>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.dummyTriangle">
            <summary>
            Return the 'triangle' that occupies all of 'outer space'
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.Triangulate(AtomicusChart.Interface.Processing.Traits.IVertexReader{AtomicusChart.Interface.Data.Vector2D})">
            <summary>
            Form a Delaunay triangulation by the divide-and-conquer method.
            </summary>
            <returns></returns>
            <remarks>
            Sorts the vertices, calls a recursive procedure to triangulate them, and
            removes the bounding box, setting boundary markers as appropriate.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.VertexSort(System.Int32,System.Int32)">
            <summary>
            Sort an array of vertices by x-coordinate, using the y-coordinate as a secondary key.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <remarks>
            Uses quicksort. Randomized O(n log n) time. No, I did not make any of
            the usual quicksort mistakes.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.VertexMedian(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An order statistic algorithm, almost.  Shuffles an array of vertices so that 
            the first 'median' vertices occur lexicographically before the remaining vertices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="median"></param>
            <param name="axis"></param>
            <remarks>
            Uses the x-coordinate as the primary key if axis == 0; the y-coordinate
            if axis == 1.  Very similar to the VertexSort() procedure, but runs in
            randomized linear time.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.AlternateAxes(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the vertices as appropriate for the divide-and-conquer algorithm with 
            alternating cuts.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="axis"></param>
            <remarks>
            Partitions by x-coordinate if axis == 0; by y-coordinate if axis == 1.
            For the base case, subsets containing only two or three vertices are
            always sorted by x-coordinate.
            </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.MergeHulls(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@,AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@,AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@,AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@,System.Int32)">
             <summary>
             Merge two adjacent Delaunay triangulations into a single Delaunay triangulation.
             </summary>
             <param name="farLeft">Bounding triangles of the left triangulation.</param>
             <param name="innerLeft">Bounding triangles of the left triangulation.</param>
             <param name="innerRight">Bounding triangles of the right triangulation.</param>
             <param name="farRight">Bounding triangles of the right triangulation.</param>
             <param name="axis"></param>
             <remarks>
             This is similar to the algorithm given by Guibas and Stolfi, but uses
             a triangle-based, rather than edge-based, data structure.
            
             The algorithm walks up the gap between the two triangulations, knitting
             them together.  As they are merged, some of their bounding triangles
             are converted into real triangles of the triangulation.  The procedure
             pulls each hull's bounding triangles apart, then knits them together
             like the teeth of two gears.  The Delaunay property determines, at each
             step, whether the next "tooth" is a bounding triangle of the left hull
             or the right.  When a bounding triangle becomes real, its apex is
             changed from NULL to a real vertex.
            
             Only two new triangles need to be allocated.  These become new bounding
             triangles at the top and bottom of the seam.  They are used to connect
             the remaining bounding triangles (those that have not been converted
             into real triangles) into a single fan.
            
             On entry, 'farLeft' and 'innerLeft' are bounding triangles of the left
             triangulation.  The origin of 'farLeft' is the leftmost vertex, and
             the destination of 'innerLeft' is the rightmost vertex of the
             triangulation.  Similarly, 'innerRight' and 'farRight' are bounding
             triangles of the right triangulation.  The origin of 'innerRight' and
             destination of 'farRight' are the leftmost and rightmost vertices.
            
             On completion, the origin of 'farLeft' is the leftmost vertex of the
             merged triangulation, and the destination of 'farRight' is the rightmost
             vertex.
             </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.DivconqRecurse(System.Int32,System.Int32,System.Int32,AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@,AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
             <summary>
             Recursively form a Delaunay triangulation by the divide-and-conquer method.
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <param name="axis"></param>
             <param name="farLeft"></param>
             <param name="farRight"></param>
             <remarks>
             Recursively breaks down the problem into smaller pieces, which are
             knitted together by mergehulls(). The base cases (problems of two or
             three vertices) are handled specially here.
            
             On completion, 'farLeft' and 'farRight' are bounding triangles such that
             the origin of 'farLeft' is the leftmost vertex (breaking ties by
             choosing the highest leftmost vertex), and the destination of
             'farRight' is the rightmost vertex (breaking ties by choosing the
             lowest rightmost vertex).
             </remarks>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.RemoveGhosts(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Removes ghost triangles.
            </summary>
            <param name="startGhost"></param>
            <returns>Number of vertices on the hull.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.MakeTriangle(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.OrientedTriangle@)">
            <summary>
            Create a new triangle with orientation zero.
            </summary>
            <param name="newTriangle">Reference to the new triangle.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.TriangulationContext.TriangleDealloc(AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangle)">
            <summary>
            Deallocate space for a triangle, marking it dead.
            </summary>
            <param name="dyingTriangle"></param>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.EdgeCount">
            <summary>
            Gets the triangulation edge count.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.HullSize">
            <summary>
            Gets the triangulation hull size (count of edges in result convex hull).
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangulate(AtomicusChart.Interface.Processing.Traits.IVertexReader{AtomicusChart.Interface.Data.Vector2D})">
            <summary>
            Triangulates given point set. The point collection must have at least three points.
            </summary>
            <param name="vertexReader">Vertex reader instance.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.Triangulate(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Vector3F},System.Int32)">
            <summary>
            Triangulates given point collection. The point collection must have at least three points.
            Setup orthogonal index for correct triangulation (for example for XY triangulator the index will be Z = 2).
            </summary>
            <param name="points">Points collection for triangulation.</param>
            <param name="orthogonalAxisIndex">Orthogonal index for triangulation.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulator2D.ExtractIndices">
            <summary>
            Constructs mesh index buffer after proper triangulation. Returns null if not triangulated.
            </summary>
            <returns>Triangulation indices.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulation2D">
            <summary>
            Triangulation of 2d points.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.DelaunayTriangulation2D.Triangulate(AtomicusChart.Interface.Data.Vector3F[],System.Int32)">
            <summary>
            Triangulate points.
            </summary>
            <param name="points">Points collection for triangulation.</param>
            <param name="orthogonalAxisIndex">Orthogonal index for triangulation.</param>
            <returns>Mesh indices.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator">
            <summary>
            Helper-class used for circle ordered in-plane point-set triangulation.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.#ctor(AtomicusChart.Interface.Processing.Traits.IVertexReader{AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs triangulation of the point set.
            </summary>
            <param name="vertices">Input vertices reader.</param>
            <param name="normal">Normal to the vertices plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.#ctor(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs triangulation of the point set.
            </summary>
            <param name="vertices">Input vertices.</param>
            <param name="normal">Normal to the vertices plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.Triangulate(AtomicusChart.Interface.Processing.Traits.IVertexReader{AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs triangulation of the point set.
            </summary>
            <param name="vertices">Input vertices reader.</param>
            <param name="normal">Normal to the vertices plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.Triangulate(System.Collections.Generic.IEnumerable{AtomicusChart.Interface.Data.Vector3F},AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Performs triangulation of the point set.
            </summary>
            <param name="vertices">Input vertices.</param>
            <param name="normal">Normal to the vertices plane.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.ExtractSurfaceIndices">
            <summary>
            Gets indices for output surface vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.ExtractIndices">
            <summary>
            Gets default indices for input vertices grid.
            </summary>
            <returns>Default indices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.ExtractEdgeVertices">
            <summary>
            Extracts the triangulation result edge vertices.
            </summary>
            <returns>Edge vertices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.ExtractSurfaceVertices">
            <summary>
            Extracts the triangulation result surface vertices (includes geometry center).
            </summary>
            <returns>Surface vertices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.GetGeometryCenter(AtomicusChart.Interface.Processing.Traits.IVertexReader{AtomicusChart.Interface.Data.Vector3F})">
            <summary>
            Gets the vertex array geometry center.
            </summary>
            <param name="vertexReader">Vertex reader.</param>
            <returns>Geometry center.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.GetGeometryCenter(AtomicusChart.Interface.Data.Vector3F[])">
            <summary>
            Gets the vertex array geometry center.
            </summary>
            <param name="vertices">Vertex array.</param>
            <returns>Geometry center.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Triangulation.InPlaneOrderedTriangulator.GetOrderedGridIndices(System.Int32)">
            <summary>
            Gets default indices for input vertices grid for ordered point set.
            </summary>
            <param name="pointCount">Count of points.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Utility.CollectionRange">
            <summary>
            Represents collection range descriptor structure.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Utility.CollectionRange.Index">
            <summary>
            Gets range start index.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Processing.Utility.CollectionRange.Length">
            <summary>
            Gets range length.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.CollectionRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.Processing.Utility.CollectionRange"/> structure.
            </summary>
            <param name="index">Range start index.</param>
            <param name="length">Range length.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.CollectionRange.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Utility.ParallelCollectionProcessor">
            <summary>
            Represents parallel collection processor delegate.
            </summary>
            <param name="partIndex">Part index.</param>
            <param name="rangeStartIndex">Range start index.</param>
            <param name="rangeLength">Range length.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper">
            <summary>
            Represents helper-class for collection parallel operations.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.IsParallelMode(System.Int32,System.Int32)">
            <summary>
            Returns true if the elements should be processed in parallel mode.
            </summary>
            <param name="count">Operation count.</param>
            <param name="border">Per-core border.</param>
            <returns>True if parallel.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.UniteResult``1(``0[][])">
            <summary>
            Unites the results of partial compute and returns combined array.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="parts">Partial results.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.UniteResult``1(System.Collections.Generic.List{``0}[])">
            <summary>
            Unites the results of partial compute and returns combined array.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="parts">Partial results.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.UniteResultAsList``1(System.Collections.Generic.List{``0}[])">
            <summary>
            Unites the results of partial compute and returns combined list.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="parts">Partial results.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.UniteResult``1(System.Collections.Generic.ICollection{``0}[])">
            <summary>
            Unites the results of partial compute and returns combined array.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="parts">Partial results.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.SplitCollection(System.Int32)">
            <summary>
            Returns real count of tasks used by processor.
            </summary>
            <param name="size">Collection size.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.SplitCollection(System.Int32,System.Int32)">
            <summary>
            Returns real count of tasks used by processor.
            </summary>
            <param name="size">Collection size.</param>
            <param name="partCount">Parallel part count.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.Process(AtomicusChart.Interface.Processing.Utility.CollectionRange[],AtomicusChart.Interface.Processing.Utility.ParallelCollectionProcessor)">
            <summary>
            Processes the collection ranges and calls the predicates for it.
            </summary>
            <param name="ranges">Input ranges.</param>
            <param name="processor">Processor action (partIndex, rangeIndex, rangeLength).</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.Utility.ParallelCollectionHelper.Process(System.Int32,System.Int32,AtomicusChart.Interface.Processing.Utility.ParallelCollectionProcessor)">
            <summary>
            Processes the collection ranges parallel if it's suitable and calls the predicates for it.
            </summary>
            <param name="size">Operation count.</param>
            <param name="border">Border operation count (per core).</param>
            <param name="partialProcessor">Partial processor.</param>
            <returns>True if parallel.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.GridHelper">
            <summary>
            Contains helper methods for index grid constructioning.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.ExtractAxisValues(AtomicusChart.Interface.Data.Vector3F[],System.Int32)">
            <summary>
            Extracts values from the specified axis.
            </summary>
            <param name="input">Input values.</param>
            <param name="axisIndex">Axis index
             for extraction.</param>
            <returns>Result values.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.ExtractAxisValues(AtomicusChart.Interface.Data.Vector3F[],System.Int32,System.Single[])">
            <summary>
            Extracts values from the specified axis.
            </summary>
            <param name="input">Input values.</param>
            <param name="axisIndex">Axis index for extraction.</param>
            <param name="output">Output values array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetStructuredParametricGridPositions(AtomicusChart.Interface.Processing.ParametricFunctionDelegate1D,System.Single,System.Single,System.Int32)">
            <summary>
            Generates parametric surface.
            </summary>
            <param name="function">Parametric function.</param>
            <param name="start">Parameter start.</param>
            <param name="end">Parameter end.</param>
            <param name="resolution">Function resolution.</param>
            <returns>Generated surface positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetStructuredParametricGridPositions(AtomicusChart.Interface.Processing.ParametricFunctionDelegate2D,AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F,System.Int32,System.Int32)">
            <summary>
            Generates parametric surface using parallel algorithm.
            </summary>
            <param name="function">Parametric function.</param>
            <param name="uvStart">UV start.</param>
            <param name="uvEnd">UV end.</param>
            <param name="width">Grid width (U step count).</param>
            <param name="height">Grid height (V step count)</param>
            <returns>Generated surface positions.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetStructuredParametricGridMesh(AtomicusChart.Interface.Processing.ParametricFunctionDelegate2D,AtomicusChart.Interface.Data.Vector2F,AtomicusChart.Interface.Data.Vector2F,System.Int32,System.Int32)">
            <summary>
            Generates parametric surface mesh using parallel algorithm.
            </summary>
            <param name="function">Parametric function.</param>
            <param name="uvStart">UV start.</param>
            <param name="uvEnd">UV end.</param>
            <param name="width">Grid width (U step count).</param>
            <param name="height">Grid height (V step count)</param>
            <returns>Generated surface mesh.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetWireframeIndices(System.Int32[])">
            <summary>
            Gets wireframe indices for the specified triangle-list grid.
            </summary>
            <param name="input">Input geometry indices.</param>
            <returns>Result index grid.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetStructuredTriangleListIndices(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets triangle list indices for structured grid.
            </summary>
            <param name="baseIndex">Base (start) index.</param>
            <param name="width">Grid width.</param>
            <param name="height">Grid height.</param>
            <param name="step">Grid step (may be used for LOD).</param>
            <returns>Result indices.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.GridHelper.GetStructuredWireframeQuadIndices(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets quad wireframe indices for structured grid.
            </summary>
            <param name="baseIndex">Base (start) index.</param>
            <param name="width">Grid width.</param>
            <param name="height">Grid height.</param>
            <param name="step">Grid step (may be used for LOD).</param>
            <returns>Result indices.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.ParametricFunctionDelegate1D">
            <summary>
            Represents parametric function delegate type.
            </summary>
            <param name="u">U value.</param>
            <returns>Computed position.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.ParametricFunctionDelegate2D">
            <summary>
            Represents parametric function delegate type.
            </summary>
            <param name="u">U value.</param>
            <param name="v">V value.</param>
            <returns>Computed position.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Processing.NormalProcessor">
            <summary>
            The class contains helper methods for normal computing using default implementation.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.NormalProcessor.GetNormal(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Computes the normalized normal vector for triangle presented as three vertices. Note: no input check is performed.
            </summary>
            <param name="v1">First vertex.</param>
            <param name="v2">Second vertex.</param>
            <param name="v3">Third vertex.</param>
            <returns>Normalized normal vector.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.NormalProcessor.GetSmoothNormals(AtomicusChart.Interface.Data.Vector3F[],System.Int32[],AtomicusChart.Interface.Data.Vector3F[])">
            <summary>
            Computes smooth normals for triangle list geometry. Note: the output array must be represented as array of zero component vectors, otherwise result will be incorrect.
            </summary>
            <param name="positions">Vertex positions array.</param>
            <param name="indices">Grid indices array.</param>
            <param name="output">Output normal array.</param>
        </member>
        <member name="M:AtomicusChart.Interface.Processing.NormalProcessor.GetSmoothNormals(AtomicusChart.Interface.Data.Vector3F[],System.Int32[])">
            <summary>
            Computes smooth normals for triangle list geometry.
            </summary>
            <param name="positions">Vertex positions array.</param>
            <param name="indices">Grid indices array.</param>
            <returns>Result normals array.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.TriangleContoursRenderData">
            <summary>
            Represents render data responsible for triangle geometry contour visualization.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.TriangleContoursRenderData.ContoursSource">
            <summary>
            Gets the instance of <see cref="T:AtomicusChart.Interface.IContoursOwner"/> which owns contours for tracking.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.TriangleContoursRenderData.DataSource">
            <summary>
            Gets the instance of <see cref="T:AtomicusChart.Interface.ITriangleContoursProvider"/> responsible for contour sections processing.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.TriangleContoursRenderData.PickingAdditionalThickness">
            <summary>
            Gets or sets optional additional picking thickness of line.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.TriangleContoursRenderData.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.TriangleContoursRenderData"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.TriangleContoursRenderData.#ctor(AtomicusChart.Interface.IContoursOwner,AtomicusChart.Interface.ITriangleContoursProvider)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.TriangleContoursRenderData"/>.
            </summary>
            <param name="contoursOwner">Contours owner.</param>
            <param name="contoursProvider">Contours provider.</param>
        </member>
        <member name="T:AtomicusChart.Interface.ContoursChangedDelegate">
            <summary>
            Represents delegate that notifies about contour provider changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="invalidatedBounds">Invalidated range.</param>
        </member>
        <member name="T:AtomicusChart.Interface.ITriangleContoursProvider">
            <summary>
            Contains methods for triangle contours extraction.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.ITriangleContoursProvider.GetSections(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets sections for the specified contours levels.
            </summary>
            <param name="levels">Contours levels.</param>
            <returns>Result sections.</returns>
        </member>
        <member name="E:AtomicusChart.Interface.ITriangleContoursProvider.ContoursChanged">
            <summary>
            Thee event is invoked whenever the provider has internal changes.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.Utilities.MarchingCubeHelper">
            <summary>
            Draft implementation of marching cubes.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MarchingCubeHelper.Extract(System.Single[0:,0:,0:],System.Single,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F)">
            <summary>
            Extract positions.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MarchingCubeHelper.VertexInterpolate(System.Single,AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Vector3F,System.Single,System.Single)">
            <summary>
            Linearly interpolate the position where an iso-surface cuts an edge between two vertices, each with their own scalar value
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MarchingCubeHelper.GetVertexIndicesByCubeType">
            <summary>
            Get array of VertexIndicesByCubeType.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.Utilities.CommonExtensions">
            <summary>
            Common extensions for .net.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.CommonExtensions.DisposeAndNull``1(``0@)">
            <summary>
            If reference is not null call dispose and set to null.
            </summary>
            <typeparam name="T">Type of disposable data.</typeparam>
            <param name="objectRef">Reference for disposing and set null.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Utilities.CollectionExtensions">
            <summary>
            Extensions for collections.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.CollectionExtensions.GetLast``1(``0[])">
            <summary>
            Get last element of array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="array">Array.</param>
            <returns>Last element.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.CollectionExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Is array null or empty.
            </summary>
            <typeparam name="T">Type of array.</typeparam>
            <param name="array">Array to check.</param>
            <returns>Is null or empty.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.CollectionExtensions.SelectFast``2(``0[],System.Func{``0,``1})">
            <summary>
            Fast select of array.
            </summary>
            <typeparam name="TIn">Input element type.</typeparam>
            <typeparam name="TOut">output element type.</typeparam>
            <param name="arrayInput">Input array.</param>
            <param name="selector">Selector.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.CollectionExtensions.Populate``1(``0[],``0)">
            <summary>
            Populate array by value
            </summary>
            <typeparam name="T">Type of elemtns.</typeparam>
            <param name="array">Array.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:AtomicusChart.Interface.Utilities.MathExt">
            <summary>
            Additional math functions.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Utilities.MathExt.PiFloat">
            <summary>
            Float value of Pi / 2.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Utilities.MathExt.HalfPiFloat">
            <summary>
            Float value of Pi / 2.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Utilities.MathExt.RadiansInDegree">
            <summary>
            Radians in degree.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.Utilities.MathExt.DegreesInRadian">
            <summary>
            Degrees in radian.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.GetBit(System.Int32,System.Int32)">
            <summary>
            Get bit by number.
            </summary>
            <param name="number">Number to check.</param>
            <param name="bitNumber">Bit number.</param>
            <returns>Int representation of bit.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Scale(System.Int32,System.Single)">
            <summary>
            Multiply integer value and round it.
            </summary>
            <param name="value">Integer value for scale.</param>
            <param name="scalingCoefficient">Scale factor.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundToInt(System.Single)">
            FLOAT
            <summary>
            Round fraction value to nearest integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundUpToInt(System.Single)">
            <summary>
            Round fraction value to nearest bigger integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundDownToInt(System.Single)">
            <summary>
            Round fraction value to nearest lower integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Round(System.Single)">
            <summary>
            Round fraction value to nearest integer float value.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Float rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundUp(System.Single)">
            <summary>
            Round fraction value to nearest bigger integer float value.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Float rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundToInt(System.Double)">
            <summary>
            Round fraction value to nearest integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundDownToInt(System.Double)">
            <summary>
            Round fraction value to floor integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundUpToInt(System.Double)">
            <summary>
            Round fraction value to ceiling integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundToInt(System.Double,System.MidpointRounding)">
            <summary>
            Round fraction value to nearest integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <param name="rounding">Rounding parameter.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.FloorToInt(System.Double)">
            <summary>
            Floor fraction value to integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.RoundToLong(System.Double)">
            <summary>
            Round fraction value to nearest long integer.
            </summary>
            <param name="value">Value for rounding.</param>
            <returns>Long integer rounded value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Scale(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Scales@)">
            <summary>
            Scales the vector.
            </summary>
            <param name="point">Source vector.</param>
            <param name="scales">Destination scaling vector.</param>
            <returns>Scaling result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Unscale(AtomicusChart.Interface.Data.Vector3F,AtomicusChart.Interface.Data.Scales@)">
            <summary>
            Unscales the vector.
            </summary>
            <param name="point">Source vector.</param>
            <param name="scales">Destination scaling vector.</param>
            <returns>Unscaled result.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Scale(System.Single,AtomicusChart.Interface.AxesData.Common.DataScale)">
            <summary>
            Scale value by function.
            </summary>
            <param name="value">Value for scale.</param>
            <param name="dataScales">Scale.</param>
            <returns>Scaled value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Unscale(System.Single,AtomicusChart.Interface.AxesData.Common.DataScale)">
            <summary>
            Unscale value.
            </summary>
            <param name="value">Value to unscale.</param>
            <param name="dataScales">Scale.</param>
            <returns>Unscaled value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.GetRelative(System.Single,System.Single,System.Single)">
            <summary>
            Get relative value from range.
            </summary>
            <param name="start">Star value.</param>
            <param name="stop">Stop value.</param>
            <param name="relativePosition">Relative position, where 0 - start, 1 - stop.</param>
            <returns>Relative value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Lerp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Lerp.
            </summary>
            <param name="xa">Start argument.</param>
            <param name="xb">Stop argumnet.</param>
            <param name="ya">Start value.</param>
            <param name="yb">Stop value.</param>
            <param name="x">Target argument.</param>
            <returns>Target value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.Square(System.Single)">
            <summary>
            Get square of value.
            </summary>
            <param name="value">Argument.</param>
            <returns>Result is square value.</returns>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.MathExt.GetBiggerOrEqualMultiplier(System.Int32,System.Int32)">
            <summary>
            Get nearest multiplier of value.
            Equals to "value / divisor + (value % divisor == 0? 0 : 1)".
            </summary>
            <param name="value">Value for division.</param>
            <param name="divisor">Divisor.</param>
            <returns>Result * divisor is nearest equals or more that value. </returns>
        </member>
        <member name="T:AtomicusChart.Interface.Utilities.BitHelper">
            <summary>
            Class helps to manage bit logic.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.Utilities.BitHelper.IsBitEnabled(System.Int32,System.Int32)">
            <summary>
            Is specified bit has value 1.
            </summary>
            <param name="valueToCheck">Value to check.</param>
            <param name="bitNumber">Number of bit to check.</param>
            <returns>Is bit has 1.</returns>
        </member>
        <member name="T:AtomicusChart.Interface.UtilityTypes.Light">
            <summary>
            Adapter for effect(shader) class to control only light properties.
            </summary>
        </member>
        <member name="E:AtomicusChart.Interface.UtilityTypes.Light.Changed">
            <summary>
            Settings changed and render() required.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.Light.SpecularColor">
            <summary>
            Specular light color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.Light.RimColor">
            <summary>
            Rim light color.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.Light.DiffuseLightPosition">
            <summary>
            Diffuse light position.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.Light.SpecularLightPosition">
            <summary>
            Specular light position.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.UtilityTypes.Light.SetDefaults">
            <summary>
            Set properties defaults.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.UtilityTypes.Light.OnChanged">
            <summary>
            Occurs when something changed and render() required.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.UtilityTypes.Multisampling">
            <summary>
            Enumeration of multisampling antialiasing qualities.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.Multisampling.Off">
            <summary>
            Off.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.Multisampling.Low2X">
            <summary>
            2X MSAA.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.Multisampling.Middle4X">
            <summary>
            4X MSAA.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.Multisampling.High8X">
            <summary>
            8X MSAA.
            </summary>
        </member>
        <member name="T:AtomicusChart.Interface.UtilityTypes.RenderMaterial">
            <summary>
            Represents render material container class.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultRenderMaterial">
            <summary>
            Gets default render material.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultAmbientIntensity">
            <summary>
            Default ambient intensity.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultDiffuseIntensity">
            <summary>
            Default diffuse intensity.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultSpecularIntensity">
            <summary>
            Default specular intensity.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultRimIntensity">
            <summary>
            Default rim intensity.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DefaultReflectionIntensity">
            <summary>
            Default reflection intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.RenderMaterial.AmbientIntensity">
            <summary>
            Ambient light intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.RenderMaterial.DiffuseIntensity">
            <summary>
            Diffuse light intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.RenderMaterial.SpecularIntensity">
            <summary>
            Specular light intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.RenderMaterial.RimIntensity">
            <summary>
            Rim light intensity.
            </summary>
        </member>
        <member name="P:AtomicusChart.Interface.UtilityTypes.RenderMaterial.ReflectionColorIntensity">
            <summary>
            Reflection intensity for lit sphere.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.UtilityTypes.RenderMaterial.#ctor">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.UtilityTypes.RenderMaterial"/>.
            </summary>
        </member>
        <member name="M:AtomicusChart.Interface.UtilityTypes.RenderMaterial.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:AtomicusChart.Interface.UtilityTypes.RenderMaterial"/>.
            </summary>
            <param name="ambientIntensity">Ambient intensity.</param>
            <param name="diffuseIntensity">Diffuse intensity.</param>
            <param name="specularIntensity">Specular intensity.</param>
            <param name="rimIntensity">Rim intensit.</param>
            <param name="reflectionColorIntensity">Reflection color intensity.</param>
        </member>
        <member name="T:AtomicusChart.Interface.VertexMask">
            <summary>
            Value type enumerator.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.VertexMask.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.VertexMask.IsNan">
            <summary>
            The value is NaN.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.VertexMask.PositiveInfinity">
            <summary>
            The value is positive infinity.
            </summary>
        </member>
        <member name="F:AtomicusChart.Interface.VertexMask.NegativeInfinity">
            <summary>
            The value is negative infinity.
            </summary>
        </member>
    </members>
</doc>
