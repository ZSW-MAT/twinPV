<Application
    x:Class="twinPV.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:twinPV"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!--
            ██╗ useful links
            ╚═╝
            Style templates
            https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/ms752094(v=vs.85)
            
            Create Symbols
            https://jxnblk.github.io/paths/?d=M1%205%20L4%208%20L8%202%20M10%200%20M10%2010%20L0%2010
        -->

        <!--
            ██╗ colors
            ╚═╝
        -->
        <Color x:Key="colorBackgroundGlobal">#FFFFFF</Color>
        <Color x:Key="colorBackgroundLocal">#EEEEEE</Color>
        <Color x:Key="colorFontDark">#000000</Color>
        <Color x:Key="colorFontBright">#FFFFFF</Color>
        <Color x:Key="colorAccent1">#3d5d75</Color>
        <Color x:Key="colorAccent2">#253a4a</Color>
        <Color x:Key="colorAccent3">#d67b27</Color>
        <Color x:Key="colorDisabled1">#bbbbbb</Color>

        <Color x:Key="colorLayerstackAbsorber">#555555</Color>
        <Color x:Key="colorLayerstackTCO">#d3dfe7</Color>
        <Color x:Key="colorLayerstackGrid">#d1d1d1</Color>
        <Color x:Key="colorLayerstackCoherent">#cfe0cd</Color>
        <Color x:Key="colorLayerstackCoherentSemiconductor">#D3EDE9</Color>
        <Color x:Key="colorLayerstackIncoherent">#9bb399</Color>

        <SolidColorBrush x:Key="brushBackgroundGlobal" Color="{StaticResource colorBackgroundGlobal}" />
        <SolidColorBrush x:Key="brushBackgroundLocal" Color="{StaticResource colorBackgroundLocal}" />
        <SolidColorBrush x:Key="brushFontDark" Color="{StaticResource colorFontDark}" />
        <SolidColorBrush x:Key="brushFontBright" Color="{StaticResource colorFontBright}" />
        <SolidColorBrush x:Key="brushAccent1" Color="{StaticResource colorAccent1}" />
        <SolidColorBrush x:Key="brushAccent2" Color="{StaticResource colorAccent2}" />
        <SolidColorBrush x:Key="brushAccent3" Color="{StaticResource colorAccent3}" />
        <SolidColorBrush x:Key="brushDisabled1" Color="{StaticResource colorDisabled1}" />

        <SolidColorBrush x:Key="brushLayerstackAbsorber" Color="{StaticResource colorLayerstackAbsorber}" />
        <SolidColorBrush x:Key="brushLayerstackTCO" Color="{StaticResource colorLayerstackTCO}" />
        <SolidColorBrush x:Key="brushLayerstackGrid" Color="{StaticResource colorLayerstackGrid}" />
        <SolidColorBrush x:Key="brushLayerstackCoherent" Color="{StaticResource colorLayerstackCoherent}" />
        <SolidColorBrush x:Key="brushLayerstackCoherentSemiconductor" Color="{StaticResource colorLayerstackCoherentSemiconductor}" />
        <SolidColorBrush x:Key="brushLayerstackIncoherent" Color="{StaticResource colorLayerstackIncoherent}" />

        <VisualBrush
            x:Key="HatchBrush"
            TileMode="Tile"
            Viewbox="0,0,5,5"
            ViewboxUnits="Absolute"
            Viewport="0,0,5,5"
            ViewportUnits="Absolute">
            <VisualBrush.Visual>
                <Path
                    Data="M 0 5 L 5 0 M -2 2 L 2 -2 M 3 7 L 7 3"
                    RenderOptions.EdgeMode="Aliased"
                    Stroke="#80ff00ff"
                    StrokeEndLineCap="Square" />
            </VisualBrush.Visual>
        </VisualBrush>

        <!--
            ██╗ fonts
            ╚═╝
        -->
        <FontFamily x:Key="fontFamiliy">Segoe UI</FontFamily>
        <sys:Double x:Key="fontsizeTitle">28</sys:Double>
        <sys:Double x:Key="fontsizeHeader">20</sys:Double>
        <sys:Double x:Key="fontsizeHeaderSmall">18</sys:Double>
        <sys:Double x:Key="fontsizeText">12</sys:Double>

        <!--
            ██╗ sizes
            ╚═╝
        -->
        <!--  window  -->
        <sys:Double x:Key="windowWidth">1800</sys:Double>
        <sys:Double x:Key="windowHeight">1000</sys:Double>
        <!--  heights  -->
        <sys:Double x:Key="elementHeight">26</sys:Double>

        <!--
            ██╗ window
            ╚═╝
        -->
        <Style x:Key="windowStyle" TargetType="{x:Type Window}">
            <Setter Property="Background" Value="{StaticResource brushBackgroundGlobal}" />
            <Setter Property="Width" Value="{StaticResource windowWidth}" />
            <Setter Property="Height" Value="{StaticResource windowHeight}" />
        </Style>

        <!--
            ██╗ textblock
            ╚═╝
        -->
        <!--  texbox : Title  -->
        <Style x:Key="textblockTitleStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeTitle}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{StaticResource brushAccent1}" />
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0,0,0,10" />
        </Style>
        <!--  texbox : Header  -->
        <Style x:Key="textblockHeaderStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeHeader}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="TextAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <!--  texbox : Header Small  -->
        <Style
            x:Key="textblockHeaderSmallStyle"
            BasedOn="{StaticResource textblockHeaderStyle}"
            TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize" Value="{StaticResource fontsizeHeaderSmall}" />
            <Setter Property="Foreground" Value="{StaticResource brushAccent1}" />
        </Style>
        <!--  texbox : text  -->
        <Style x:Key="textblockTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="TextAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Top" />
        </Style>
        <!--  texbox : file  -->
        <Style x:Key="textblockFileStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Italic" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="TextAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <!--
            ██╗ textbox
            ╚═╝
        -->
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Margin" Value="1,1,1,1" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <!--<Setter Property="MinWidth" Value="120" />-->
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border
                            Name="Border"
                            Padding="3"
                            BorderThickness="1"
                            CornerRadius="0">
                            <Border.Background>
                                <SolidColorBrush Color="{StaticResource colorFontBright}" />
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent" />
                            </Border.BorderBrush>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" />
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource colorDisabled1}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReadOnly">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource colorDisabled1}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            ██╗ groupbox
            ╚═╝
        -->
        <Style TargetType="GroupBox">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeHeader}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Background" Value="{StaticResource brushBackgroundLocal}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GroupBox">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border
                                Grid.Row="0"
                                Background="{StaticResource brushBackgroundLocal}"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="0,0,0,0">
                                <ContentPresenter
                                    Margin="8,4,4,4"
                                    ContentSource="Header"
                                    RecognizesAccessKey="True" />
                            </Border>
                            <Border
                                Grid.Row="1"
                                Background="{StaticResource brushBackgroundLocal}"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="0,0,0,0">
                                <ContentPresenter Margin="4" />
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="groupboxSlider" TargetType="GroupBox">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeHeader}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Background" Value="{StaticResource brushAccent1}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="TextBlock.TextAlignment" Value="Center" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GroupBox">
                        <Border
                            Background="White"
                            BorderBrush="{StaticResource brushAccent1}"
                            BorderThickness="2,2,2,2"
                            CornerRadius="0,10,10,0">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            ██╗ button
            ╚═╝
        -->
        <Style TargetType="Button">
            <Setter Property="Margin" Value="1,1,1,1" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="MinHeight" Value="{StaticResource elementHeight}" />
            <!--<Setter Property="MinWidth" Value="{StaticResource elementHeight}" />-->
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="Foreground" Value="{StaticResource brushFontBright}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            x:Name="Border"
                            Background="{StaticResource brushAccent1}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            CornerRadius="0">
                            <ContentPresenter
                                Margin="2"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brushAccent1}" />
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brushAccent1}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource brushAccent2}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource brushAccent2}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brushAccent2}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource brushDisabled1}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brushDisabled1}" />
                                <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource brushAccent2}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="btnRaw" TargetType="{x:Type Button}">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="Black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="btnMenuBand" TargetType="{x:Type Button}">

            <Setter Property="Height" Value="100" />
            <Setter Property="Width" Value="50" />

            <Setter Property="Margin" Value="0" />

            <Setter Property="BorderThickness" Value="0" />

            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/menu_band_button.png" Stretch="Fill" />
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="btnImprintMail" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="36" />
            <Setter Property="Height" Value="20" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="mail to" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_mail.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_mail_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnImprintStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="50" />
            <Setter Property="Height" Value="50" />

            <Setter Property="ToolTip" Value="show imprint" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/impressum.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/impressum_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnDesignerCell" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="design new or existing cell/module device" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_device_designer.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_device_designer_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="btnDesignerSemiconductor1D" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="design new or existing semiconductor device" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer1D.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer_hover1D.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnDesignerSemiconductor2D" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="design new or existing semiconductor device" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnSemiconductorIV" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="calculate IV of a semiconductor device" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnMaterialStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="add and edit any material(s)" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterial.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterialHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnOpticsStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="add and edit any material(s)" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracing.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracingHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnSemiconductorIVfitREF" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="fit model to measured IV data" />
            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV_fitREF.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV_fitREF_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnRayTracingStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="calculate transmittance, charge carrier generation, and reflection of a semiconductor cell by tay tracing" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_raytracing_sc.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_raytracing_sc_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnTMMStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="calculate transmittance, charge carrier generation, and reflection of a semiconductor cell by transfer matrix methode" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_tmm_sc.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_tmm_sc_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnYieldSCStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="calculate the yield of a semiconductor: € or kWh" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_yield_sc.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_yield_sc_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnLossSCStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="make a detailed loss analysis of a semiconductor" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_loss_sc.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_loss_sc_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnOptimizeSCStyle" TargetType="{x:Type Button}">

            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="100" />

            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />

            <Setter Property="ToolTip" Value="use algorithms to optimize semiconductor output: efficiency and yield" />

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_optimize_sc.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_optimize_sc_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--
            ██╗ tabcontrol
            ╚═╝
        -->
        <Style TargetType="{x:Type TabControl}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <TabPanel
                                x:Name="HeaderPanel"
                                Grid.Row="0"
                                Margin="0,0,0,0"
                                Panel.ZIndex="1"
                                Background="Transparent"
                                IsItemsHost="True"
                                KeyboardNavigation.TabIndex="1" />
                            <Border
                                x:Name="Border"
                                Grid.Row="1"
                                Background="Transparent"
                                BorderThickness="0"
                                CornerRadius="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="Black" />
                                </Border.BorderBrush>
                                <ContentPresenter
                                    x:Name="PART_SelectedContentHost"
                                    Margin="0,0,-2,0"
                                    ContentSource="SelectedContent" />
                            </Border>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="Black" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="Root">
                            <Border
                                x:Name="Border"
                                Margin="0,0,0,0"
                                BorderBrush="{StaticResource brushAccent1}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="0,0,0,0">
                                <Border.Background>

                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0.0" Color="{StaticResource colorBackgroundLocal}" />
                                                <GradientStop Offset="1.0" Color="{StaticResource colorBackgroundLocal}" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                                <ContentPresenter
                                    x:Name="ContentSite"
                                    Margin="12,2,12,2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    RecognizesAccessKey="True" />
                            </Border>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="Transparent" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="Transparent" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderThickness)">
                                                <EasingThicknessKeyFrame KeyTime="0" Value="1,1,1,0" />
                                            </ThicknessAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <!--<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource colorDisabled1}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource colorDisabled1}" />
                                            </ColorAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource brushDisabled1}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            ██╗ checkbox
            ╚═╝
        -->
        <RadialGradientBrush x:Key="HoverBrush">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="{StaticResource colorBackgroundGlobal}" />
                    <GradientStop Offset="1.0" Color="{StaticResource colorDisabled1}" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </RadialGradientBrush>
        <RadialGradientBrush x:Key="PressedBrush">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="{StaticResource colorDisabled1}" />
                    <GradientStop Offset="1.0" Color="{StaticResource colorDisabled1}" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </RadialGradientBrush>

        <Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <!--<Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle
                                Margin="15,0,0,0"
                                Stroke="#60000000"
                                StrokeDashArray="1 2"
                                StrokeThickness="1" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border
                                    x:Name="Border"
                                    Width="13"
                                    Height="13"
                                    Background="White"
                                    BorderBrush="{StaticResource brushFontDark}"
                                    BorderThickness="1"
                                    CornerRadius="0">
                                    <Path
                                        x:Name="CheckMark"
                                        Width="11"
                                        Height="11"
                                        Data="M 1 5.5 L 4 8 L 9 2"
                                        SnapsToDevicePixels="False"
                                        Stroke="{StaticResource brushFontDark}"
                                        StrokeThickness="2" />
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter
                                Margin="4,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>-->
        </Style>

        <!--
            ██╗ radiobutton
            ╚═╝
        -->
        <Style x:Key="RadioButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle
                                Margin="15,0,0,0"
                                Stroke="#60000000"
                                StrokeDashArray="1 2"
                                StrokeThickness="1" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="{StaticResource brushFontDark}" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid Width="13" Height="13">
                                    <Ellipse
                                        x:Name="Border"
                                        Fill="{StaticResource brushBackgroundGlobal}"
                                        Stroke="{StaticResource brushAccent1}"
                                        StrokeThickness="1" />
                                    <Ellipse
                                        x:Name="CheckMark"
                                        Margin="4"
                                        Fill="{StaticResource brushFontDark}" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <ContentPresenter
                                Margin="4,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Fill" Value="{StaticResource HoverBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Fill" Value="{StaticResource PressedBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            ██╗ progressbar
            ╚═╝
        -->
        <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
            <Setter Property="Height" Value="20" />
            <Setter Property="Minimum" Value="0" />
            <Setter Property="Background" Value="#FFFFFF" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid MinWidth="200" MinHeight="14">
                            <Border
                                Name="PART_Track"
                                Background="{StaticResource brushBackgroundGlobal}"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="0" />
                            <Border
                                Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="#06B025"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            ██╗ combobox
            ╚═╝
        -->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="Border"
                    Grid.ColumnSpan="2"
                    Height="{StaticResource elementHeight}"
                    Background="{StaticResource brushAccent1}"
                    BorderThickness="0"
                    CornerRadius="0" />
                <Border
                    x:Name="Border2"
                    Grid.Column="0"
                    Margin="1"
                    Background="{StaticResource brushAccent1}"
                    BorderThickness="0,0,0,0"
                    CornerRadius="0,0,0,0" />
                <Path
                    x:Name="Arrow"
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M 0 0 L 4 4 L 8 0 Z"
                    Fill="White" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource brushAccent2}" />
                    <Setter TargetName="Border2" Property="Background" Value="{StaticResource brushAccent2}" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource brushAccent2}" />
                    <Setter TargetName="Border2" Property="Background" Value="{StaticResource brushAccent2}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource brushDisabled1}" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource brushDisabled1}" />
                    <Setter Property="Foreground" Value="{StaticResource brushDisabled1}" />
                    <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource brushDisabled1}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
            <Border
                x:Name="PART_ContentHost"
                Background="{TemplateBinding Background}"
                Focusable="False" />
        </ControlTemplate>

        <Style x:Key="{x:Type ComboBox}" TargetType="ComboBox">
            <Setter Property="Margin" Value="1,1,1,1" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="FontSize" Value="{StaticResource fontsizeText}" />
            <Setter Property="FontFamily" Value="{StaticResource fontFamiliy}" />
            <Setter Property="Foreground" Value="{StaticResource brushFontBright}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <!--<Setter Property="MinWidth" Value="120" />-->
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="2"
                                ClickMode="Press"
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Template="{StaticResource ComboBoxToggleButton}" />
                            <ContentPresenter
                                Name="ContentSite"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />
                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                Focusable="True"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Template="{StaticResource ComboBoxTextBox}"
                                Visibility="Hidden" />
                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">
                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="{StaticResource brushAccent1}"
                                        BorderThickness="0" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource brushDisabled1}" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <Trigger Property="IsEditable" Value="true">
                                <Setter Property="IsTabStop" Value="false" />
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers />
        </Style>

        <!--
            ██╗
            ╚██╗ Toggle Buttons
            ██╔╝
            ╚═╝
        -->

        <Style x:Key="layerModuleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterial.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterialHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="unitStackModuleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_semiconductor_IV_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="unitStackModuleToggleButton_Designer1D" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer1D.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer_hover1D.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="unitStackModuleToggleButton_Designer2D" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_cell_designer_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="homeToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconHome.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconHomeHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="materialToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterial.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconMaterialHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="opticsToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracing.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracingHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="moduleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconModule.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconModuleHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="deviceModuleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconCell.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconCellHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="deviceModuleToggleButton_Designer" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_device_designer.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/button_device_designer_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="analysisToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconAnalysis.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconAnalysisHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="cellDeviceModuleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconModule.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconModuleHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="cellRayTracingModuleToggleButton" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracing.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/iconRaytracingHover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="mainLayer" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/layers.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/layers_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="mainSemiconductor" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/semiconductor_device.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/semiconductor_device_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="mainDevice" TargetType="ToggleButton">

            <Setter Property="Background">
                <Setter.Value>
                    <ImageBrush ImageSource="/twinPV;component/Icons/Button/device_AB.png" />
                </Setter.Value>
            </Setter>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/twinPV;component/Icons/Button/device_AB_hover.png" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="navigationToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Width" Value="100" />
            <Setter Property="Height" Value="30" />
        </Style>

    </Application.Resources>
</Application>